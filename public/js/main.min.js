/*! jQuery v1.8.2 jquery.com | jquery.org/license */
(function(a,b){function G(a){var b=F[a]={};return p.each(a.split(s),function(a,c){b[c]=!0}),b}function J(a,c,d){if(d===b&&a.nodeType===1){var e="data-"+c.replace(I,"-$1").toLowerCase();d=a.getAttribute(e);if(typeof d=="string"){try{d=d==="true"?!0:d==="false"?!1:d==="null"?null:+d+""===d?+d:H.test(d)?p.parseJSON(d):d}catch(f){}p.data(a,c,d)}else d=b}return d}function K(a){var b;for(b in a){if(b==="data"&&p.isEmptyObject(a[b]))continue;if(b!=="toJSON")return!1}return!0}function ba(){return!1}function bb(){return!0}function bh(a){return!a||!a.parentNode||a.parentNode.nodeType===11}function bi(a,b){do a=a[b];while(a&&a.nodeType!==1);return a}function bj(a,b,c){b=b||0;if(p.isFunction(b))return p.grep(a,function(a,d){var e=!!b.call(a,d,a);return e===c});if(b.nodeType)return p.grep(a,function(a,d){return a===b===c});if(typeof b=="string"){var d=p.grep(a,function(a){return a.nodeType===1});if(be.test(b))return p.filter(b,d,!c);b=p.filter(b,d)}return p.grep(a,function(a,d){return p.inArray(a,b)>=0===c})}function bk(a){var b=bl.split("|"),c=a.createDocumentFragment();if(c.createElement)while(b.length)c.createElement(b.pop());return c}function bC(a,b){return a.getElementsByTagName(b)[0]||a.appendChild(a.ownerDocument.createElement(b))}function bD(a,b){if(b.nodeType!==1||!p.hasData(a))return;var c,d,e,f=p._data(a),g=p._data(b,f),h=f.events;if(h){delete g.handle,g.events={};for(c in h)for(d=0,e=h[c].length;d<e;d++)p.event.add(b,c,h[c][d])}g.data&&(g.data=p.extend({},g.data))}function bE(a,b){var c;if(b.nodeType!==1)return;b.clearAttributes&&b.clearAttributes(),b.mergeAttributes&&b.mergeAttributes(a),c=b.nodeName.toLowerCase(),c==="object"?(b.parentNode&&(b.outerHTML=a.outerHTML),p.support.html5Clone&&a.innerHTML&&!p.trim(b.innerHTML)&&(b.innerHTML=a.innerHTML)):c==="input"&&bv.test(a.type)?(b.defaultChecked=b.checked=a.checked,b.value!==a.value&&(b.value=a.value)):c==="option"?b.selected=a.defaultSelected:c==="input"||c==="textarea"?b.defaultValue=a.defaultValue:c==="script"&&b.text!==a.text&&(b.text=a.text),b.removeAttribute(p.expando)}function bF(a){return typeof a.getElementsByTagName!="undefined"?a.getElementsByTagName("*"):typeof a.querySelectorAll!="undefined"?a.querySelectorAll("*"):[]}function bG(a){bv.test(a.type)&&(a.defaultChecked=a.checked)}function bY(a,b){if(b in a)return b;var c=b.charAt(0).toUpperCase()+b.slice(1),d=b,e=bW.length;while(e--){b=bW[e]+c;if(b in a)return b}return d}function bZ(a,b){return a=b||a,p.css(a,"display")==="none"||!p.contains(a.ownerDocument,a)}function b$(a,b){var c,d,e=[],f=0,g=a.length;for(;f<g;f++){c=a[f];if(!c.style)continue;e[f]=p._data(c,"olddisplay"),b?(!e[f]&&c.style.display==="none"&&(c.style.display=""),c.style.display===""&&bZ(c)&&(e[f]=p._data(c,"olddisplay",cc(c.nodeName)))):(d=bH(c,"display"),!e[f]&&d!=="none"&&p._data(c,"olddisplay",d))}for(f=0;f<g;f++){c=a[f];if(!c.style)continue;if(!b||c.style.display==="none"||c.style.display==="")c.style.display=b?e[f]||"":"none"}return a}function b_(a,b,c){var d=bP.exec(b);return d?Math.max(0,d[1]-(c||0))+(d[2]||"px"):b}function ca(a,b,c,d){var e=c===(d?"border":"content")?4:b==="width"?1:0,f=0;for(;e<4;e+=2)c==="margin"&&(f+=p.css(a,c+bV[e],!0)),d?(c==="content"&&(f-=parseFloat(bH(a,"padding"+bV[e]))||0),c!=="margin"&&(f-=parseFloat(bH(a,"border"+bV[e]+"Width"))||0)):(f+=parseFloat(bH(a,"padding"+bV[e]))||0,c!=="padding"&&(f+=parseFloat(bH(a,"border"+bV[e]+"Width"))||0));return f}function cb(a,b,c){var d=b==="width"?a.offsetWidth:a.offsetHeight,e=!0,f=p.support.boxSizing&&p.css(a,"boxSizing")==="border-box";if(d<=0||d==null){d=bH(a,b);if(d<0||d==null)d=a.style[b];if(bQ.test(d))return d;e=f&&(p.support.boxSizingReliable||d===a.style[b]),d=parseFloat(d)||0}return d+ca(a,b,c||(f?"border":"content"),e)+"px"}function cc(a){if(bS[a])return bS[a];var b=p("<"+a+">").appendTo(e.body),c=b.css("display");b.remove();if(c==="none"||c===""){bI=e.body.appendChild(bI||p.extend(e.createElement("iframe"),{frameBorder:0,width:0,height:0}));if(!bJ||!bI.createElement)bJ=(bI.contentWindow||bI.contentDocument).document,bJ.write("<!doctype html><html><body>"),bJ.close();b=bJ.body.appendChild(bJ.createElement(a)),c=bH(b,"display"),e.body.removeChild(bI)}return bS[a]=c,c}function ci(a,b,c,d){var e;if(p.isArray(b))p.each(b,function(b,e){c||ce.test(a)?d(a,e):ci(a+"["+(typeof e=="object"?b:"")+"]",e,c,d)});else if(!c&&p.type(b)==="object")for(e in b)ci(a+"["+e+"]",b[e],c,d);else d(a,b)}function cz(a){return function(b,c){typeof b!="string"&&(c=b,b="*");var d,e,f,g=b.toLowerCase().split(s),h=0,i=g.length;if(p.isFunction(c))for(;h<i;h++)d=g[h],f=/^\+/.test(d),f&&(d=d.substr(1)||"*"),e=a[d]=a[d]||[],e[f?"unshift":"push"](c)}}function cA(a,c,d,e,f,g){f=f||c.dataTypes[0],g=g||{},g[f]=!0;var h,i=a[f],j=0,k=i?i.length:0,l=a===cv;for(;j<k&&(l||!h);j++)h=i[j](c,d,e),typeof h=="string"&&(!l||g[h]?h=b:(c.dataTypes.unshift(h),h=cA(a,c,d,e,h,g)));return(l||!h)&&!g["*"]&&(h=cA(a,c,d,e,"*",g)),h}function cB(a,c){var d,e,f=p.ajaxSettings.flatOptions||{};for(d in c)c[d]!==b&&((f[d]?a:e||(e={}))[d]=c[d]);e&&p.extend(!0,a,e)}function cC(a,c,d){var e,f,g,h,i=a.contents,j=a.dataTypes,k=a.responseFields;for(f in k)f in d&&(c[k[f]]=d[f]);while(j[0]==="*")j.shift(),e===b&&(e=a.mimeType||c.getResponseHeader("content-type"));if(e)for(f in i)if(i[f]&&i[f].test(e)){j.unshift(f);break}if(j[0]in d)g=j[0];else{for(f in d){if(!j[0]||a.converters[f+" "+j[0]]){g=f;break}h||(h=f)}g=g||h}if(g)return g!==j[0]&&j.unshift(g),d[g]}function cD(a,b){var c,d,e,f,g=a.dataTypes.slice(),h=g[0],i={},j=0;a.dataFilter&&(b=a.dataFilter(b,a.dataType));if(g[1])for(c in a.converters)i[c.toLowerCase()]=a.converters[c];for(;e=g[++j];)if(e!=="*"){if(h!=="*"&&h!==e){c=i[h+" "+e]||i["* "+e];if(!c)for(d in i){f=d.split(" ");if(f[1]===e){c=i[h+" "+f[0]]||i["* "+f[0]];if(c){c===!0?c=i[d]:i[d]!==!0&&(e=f[0],g.splice(j--,0,e));break}}}if(c!==!0)if(c&&a["throws"])b=c(b);else try{b=c(b)}catch(k){return{state:"parsererror",error:c?k:"No conversion from "+h+" to "+e}}}h=e}return{state:"success",data:b}}function cL(){try{return new a.XMLHttpRequest}catch(b){}}function cM(){try{return new a.ActiveXObject("Microsoft.XMLHTTP")}catch(b){}}function cU(){return setTimeout(function(){cN=b},0),cN=p.now()}function cV(a,b){p.each(b,function(b,c){var d=(cT[b]||[]).concat(cT["*"]),e=0,f=d.length;for(;e<f;e++)if(d[e].call(a,b,c))return})}function cW(a,b,c){var d,e=0,f=0,g=cS.length,h=p.Deferred().always(function(){delete i.elem}),i=function(){var b=cN||cU(),c=Math.max(0,j.startTime+j.duration-b),d=1-(c/j.duration||0),e=0,f=j.tweens.length;for(;e<f;e++)j.tweens[e].run(d);return h.notifyWith(a,[j,d,c]),d<1&&f?c:(h.resolveWith(a,[j]),!1)},j=h.promise({elem:a,props:p.extend({},b),opts:p.extend(!0,{specialEasing:{}},c),originalProperties:b,originalOptions:c,startTime:cN||cU(),duration:c.duration,tweens:[],createTween:function(b,c,d){var e=p.Tween(a,j.opts,b,c,j.opts.specialEasing[b]||j.opts.easing);return j.tweens.push(e),e},stop:function(b){var c=0,d=b?j.tweens.length:0;for(;c<d;c++)j.tweens[c].run(1);return b?h.resolveWith(a,[j,b]):h.rejectWith(a,[j,b]),this}}),k=j.props;cX(k,j.opts.specialEasing);for(;e<g;e++){d=cS[e].call(j,a,k,j.opts);if(d)return d}return cV(j,k),p.isFunction(j.opts.start)&&j.opts.start.call(a,j),p.fx.timer(p.extend(i,{anim:j,queue:j.opts.queue,elem:a})),j.progress(j.opts.progress).done(j.opts.done,j.opts.complete).fail(j.opts.fail).always(j.opts.always)}function cX(a,b){var c,d,e,f,g;for(c in a){d=p.camelCase(c),e=b[d],f=a[c],p.isArray(f)&&(e=f[1],f=a[c]=f[0]),c!==d&&(a[d]=f,delete a[c]),g=p.cssHooks[d];if(g&&"expand"in g){f=g.expand(f),delete a[d];for(c in f)c in a||(a[c]=f[c],b[c]=e)}else b[d]=e}}function cY(a,b,c){var d,e,f,g,h,i,j,k,l=this,m=a.style,n={},o=[],q=a.nodeType&&bZ(a);c.queue||(j=p._queueHooks(a,"fx"),j.unqueued==null&&(j.unqueued=0,k=j.empty.fire,j.empty.fire=function(){j.unqueued||k()}),j.unqueued++,l.always(function(){l.always(function(){j.unqueued--,p.queue(a,"fx").length||j.empty.fire()})})),a.nodeType===1&&("height"in b||"width"in b)&&(c.overflow=[m.overflow,m.overflowX,m.overflowY],p.css(a,"display")==="inline"&&p.css(a,"float")==="none"&&(!p.support.inlineBlockNeedsLayout||cc(a.nodeName)==="inline"?m.display="inline-block":m.zoom=1)),c.overflow&&(m.overflow="hidden",p.support.shrinkWrapBlocks||l.done(function(){m.overflow=c.overflow[0],m.overflowX=c.overflow[1],m.overflowY=c.overflow[2]}));for(d in b){f=b[d];if(cP.exec(f)){delete b[d];if(f===(q?"hide":"show"))continue;o.push(d)}}g=o.length;if(g){h=p._data(a,"fxshow")||p._data(a,"fxshow",{}),q?p(a).show():l.done(function(){p(a).hide()}),l.done(function(){var b;p.removeData(a,"fxshow",!0);for(b in n)p.style(a,b,n[b])});for(d=0;d<g;d++)e=o[d],i=l.createTween(e,q?h[e]:0),n[e]=h[e]||p.style(a,e),e in h||(h[e]=i.start,q&&(i.end=i.start,i.start=e==="width"||e==="height"?1:0))}}function cZ(a,b,c,d,e){return new cZ.prototype.init(a,b,c,d,e)}function c$(a,b){var c,d={height:a},e=0;b=b?1:0;for(;e<4;e+=2-b)c=bV[e],d["margin"+c]=d["padding"+c]=a;return b&&(d.opacity=d.width=a),d}function da(a){return p.isWindow(a)?a:a.nodeType===9?a.defaultView||a.parentWindow:!1}var c,d,e=a.document,f=a.location,g=a.navigator,h=a.jQuery,i=a.$,j=Array.prototype.push,k=Array.prototype.slice,l=Array.prototype.indexOf,m=Object.prototype.toString,n=Object.prototype.hasOwnProperty,o=String.prototype.trim,p=function(a,b){return new p.fn.init(a,b,c)},q=/[\-+]?(?:\d*\.|)\d+(?:[eE][\-+]?\d+|)/.source,r=/\S/,s=/\s+/,t=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,u=/^(?:[^#<]*(<[\w\W]+>)[^>]*$|#([\w\-]*)$)/,v=/^<(\w+)\s*\/?>(?:<\/\1>|)$/,w=/^[\],:{}\s]*$/,x=/(?:^|:|,)(?:\s*\[)+/g,y=/\\(?:["\\\/bfnrt]|u[\da-fA-F]{4})/g,z=/"[^"\\\r\n]*"|true|false|null|-?(?:\d\d*\.|)\d+(?:[eE][\-+]?\d+|)/g,A=/^-ms-/,B=/-([\da-z])/gi,C=function(a,b){return(b+"").toUpperCase()},D=function(){e.addEventListener?(e.removeEventListener("DOMContentLoaded",D,!1),p.ready()):e.readyState==="complete"&&(e.detachEvent("onreadystatechange",D),p.ready())},E={};p.fn=p.prototype={constructor:p,init:function(a,c,d){var f,g,h,i;if(!a)return this;if(a.nodeType)return this.context=this[0]=a,this.length=1,this;if(typeof a=="string"){a.charAt(0)==="<"&&a.charAt(a.length-1)===">"&&a.length>=3?f=[null,a,null]:f=u.exec(a);if(f&&(f[1]||!c)){if(f[1])return c=c instanceof p?c[0]:c,i=c&&c.nodeType?c.ownerDocument||c:e,a=p.parseHTML(f[1],i,!0),v.test(f[1])&&p.isPlainObject(c)&&this.attr.call(a,c,!0),p.merge(this,a);g=e.getElementById(f[2]);if(g&&g.parentNode){if(g.id!==f[2])return d.find(a);this.length=1,this[0]=g}return this.context=e,this.selector=a,this}return!c||c.jquery?(c||d).find(a):this.constructor(c).find(a)}return p.isFunction(a)?d.ready(a):(a.selector!==b&&(this.selector=a.selector,this.context=a.context),p.makeArray(a,this))},selector:"",jquery:"1.8.2",length:0,size:function(){return this.length},toArray:function(){return k.call(this)},get:function(a){return a==null?this.toArray():a<0?this[this.length+a]:this[a]},pushStack:function(a,b,c){var d=p.merge(this.constructor(),a);return d.prevObject=this,d.context=this.context,b==="find"?d.selector=this.selector+(this.selector?" ":"")+c:b&&(d.selector=this.selector+"."+b+"("+c+")"),d},each:function(a,b){return p.each(this,a,b)},ready:function(a){return p.ready.promise().done(a),this},eq:function(a){return a=+a,a===-1?this.slice(a):this.slice(a,a+1)},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},slice:function(){return this.pushStack(k.apply(this,arguments),"slice",k.call(arguments).join(","))},map:function(a){return this.pushStack(p.map(this,function(b,c){return a.call(b,c,b)}))},end:function(){return this.prevObject||this.constructor(null)},push:j,sort:[].sort,splice:[].splice},p.fn.init.prototype=p.fn,p.extend=p.fn.extend=function(){var a,c,d,e,f,g,h=arguments[0]||{},i=1,j=arguments.length,k=!1;typeof h=="boolean"&&(k=h,h=arguments[1]||{},i=2),typeof h!="object"&&!p.isFunction(h)&&(h={}),j===i&&(h=this,--i);for(;i<j;i++)if((a=arguments[i])!=null)for(c in a){d=h[c],e=a[c];if(h===e)continue;k&&e&&(p.isPlainObject(e)||(f=p.isArray(e)))?(f?(f=!1,g=d&&p.isArray(d)?d:[]):g=d&&p.isPlainObject(d)?d:{},h[c]=p.extend(k,g,e)):e!==b&&(h[c]=e)}return h},p.extend({noConflict:function(b){return a.$===p&&(a.$=i),b&&a.jQuery===p&&(a.jQuery=h),p},isReady:!1,readyWait:1,holdReady:function(a){a?p.readyWait++:p.ready(!0)},ready:function(a){if(a===!0?--p.readyWait:p.isReady)return;if(!e.body)return setTimeout(p.ready,1);p.isReady=!0;if(a!==!0&&--p.readyWait>0)return;d.resolveWith(e,[p]),p.fn.trigger&&p(e).trigger("ready").off("ready")},isFunction:function(a){return p.type(a)==="function"},isArray:Array.isArray||function(a){return p.type(a)==="array"},isWindow:function(a){return a!=null&&a==a.window},isNumeric:function(a){return!isNaN(parseFloat(a))&&isFinite(a)},type:function(a){return a==null?String(a):E[m.call(a)]||"object"},isPlainObject:function(a){if(!a||p.type(a)!=="object"||a.nodeType||p.isWindow(a))return!1;try{if(a.constructor&&!n.call(a,"constructor")&&!n.call(a.constructor.prototype,"isPrototypeOf"))return!1}catch(c){return!1}var d;for(d in a);return d===b||n.call(a,d)},isEmptyObject:function(a){var b;for(b in a)return!1;return!0},error:function(a){throw new Error(a)},parseHTML:function(a,b,c){var d;return!a||typeof a!="string"?null:(typeof b=="boolean"&&(c=b,b=0),b=b||e,(d=v.exec(a))?[b.createElement(d[1])]:(d=p.buildFragment([a],b,c?null:[]),p.merge([],(d.cacheable?p.clone(d.fragment):d.fragment).childNodes)))},parseJSON:function(b){if(!b||typeof b!="string")return null;b=p.trim(b);if(a.JSON&&a.JSON.parse)return a.JSON.parse(b);if(w.test(b.replace(y,"@").replace(z,"]").replace(x,"")))return(new Function("return "+b))();p.error("Invalid JSON: "+b)},parseXML:function(c){var d,e;if(!c||typeof c!="string")return null;try{a.DOMParser?(e=new DOMParser,d=e.parseFromString(c,"text/xml")):(d=new ActiveXObject("Microsoft.XMLDOM"),d.async="false",d.loadXML(c))}catch(f){d=b}return(!d||!d.documentElement||d.getElementsByTagName("parsererror").length)&&p.error("Invalid XML: "+c),d},noop:function(){},globalEval:function(b){b&&r.test(b)&&(a.execScript||function(b){a.eval.call(a,b)})(b)},camelCase:function(a){return a.replace(A,"ms-").replace(B,C)},nodeName:function(a,b){return a.nodeName&&a.nodeName.toLowerCase()===b.toLowerCase()},each:function(a,c,d){var e,f=0,g=a.length,h=g===b||p.isFunction(a);if(d){if(h){for(e in a)if(c.apply(a[e],d)===!1)break}else for(;f<g;)if(c.apply(a[f++],d)===!1)break}else if(h){for(e in a)if(c.call(a[e],e,a[e])===!1)break}else for(;f<g;)if(c.call(a[f],f,a[f++])===!1)break;return a},trim:o&&!o.call("﻿ ")?function(a){return a==null?"":o.call(a)}:function(a){return a==null?"":(a+"").replace(t,"")},makeArray:function(a,b){var c,d=b||[];return a!=null&&(c=p.type(a),a.length==null||c==="string"||c==="function"||c==="regexp"||p.isWindow(a)?j.call(d,a):p.merge(d,a)),d},inArray:function(a,b,c){var d;if(b){if(l)return l.call(b,a,c);d=b.length,c=c?c<0?Math.max(0,d+c):c:0;for(;c<d;c++)if(c in b&&b[c]===a)return c}return-1},merge:function(a,c){var d=c.length,e=a.length,f=0;if(typeof d=="number")for(;f<d;f++)a[e++]=c[f];else while(c[f]!==b)a[e++]=c[f++];return a.length=e,a},grep:function(a,b,c){var d,e=[],f=0,g=a.length;c=!!c;for(;f<g;f++)d=!!b(a[f],f),c!==d&&e.push(a[f]);return e},map:function(a,c,d){var e,f,g=[],h=0,i=a.length,j=a instanceof p||i!==b&&typeof i=="number"&&(i>0&&a[0]&&a[i-1]||i===0||p.isArray(a));if(j)for(;h<i;h++)e=c(a[h],h,d),e!=null&&(g[g.length]=e);else for(f in a)e=c(a[f],f,d),e!=null&&(g[g.length]=e);return g.concat.apply([],g)},guid:1,proxy:function(a,c){var d,e,f;return typeof c=="string"&&(d=a[c],c=a,a=d),p.isFunction(a)?(e=k.call(arguments,2),f=function(){return a.apply(c,e.concat(k.call(arguments)))},f.guid=a.guid=a.guid||p.guid++,f):b},access:function(a,c,d,e,f,g,h){var i,j=d==null,k=0,l=a.length;if(d&&typeof d=="object"){for(k in d)p.access(a,c,k,d[k],1,g,e);f=1}else if(e!==b){i=h===b&&p.isFunction(e),j&&(i?(i=c,c=function(a,b,c){return i.call(p(a),c)}):(c.call(a,e),c=null));if(c)for(;k<l;k++)c(a[k],d,i?e.call(a[k],k,c(a[k],d)):e,h);f=1}return f?a:j?c.call(a):l?c(a[0],d):g},now:function(){return(new Date).getTime()}}),p.ready.promise=function(b){if(!d){d=p.Deferred();if(e.readyState==="complete")setTimeout(p.ready,1);else if(e.addEventListener)e.addEventListener("DOMContentLoaded",D,!1),a.addEventListener("load",p.ready,!1);else{e.attachEvent("onreadystatechange",D),a.attachEvent("onload",p.ready);var c=!1;try{c=a.frameElement==null&&e.documentElement}catch(f){}c&&c.doScroll&&function g(){if(!p.isReady){try{c.doScroll("left")}catch(a){return setTimeout(g,50)}p.ready()}}()}}return d.promise(b)},p.each("Boolean Number String Function Array Date RegExp Object".split(" "),function(a,b){E["[object "+b+"]"]=b.toLowerCase()}),c=p(e);var F={};p.Callbacks=function(a){a=typeof a=="string"?F[a]||G(a):p.extend({},a);var c,d,e,f,g,h,i=[],j=!a.once&&[],k=function(b){c=a.memory&&b,d=!0,h=f||0,f=0,g=i.length,e=!0;for(;i&&h<g;h++)if(i[h].apply(b[0],b[1])===!1&&a.stopOnFalse){c=!1;break}e=!1,i&&(j?j.length&&k(j.shift()):c?i=[]:l.disable())},l={add:function(){if(i){var b=i.length;(function d(b){p.each(b,function(b,c){var e=p.type(c);e==="function"&&(!a.unique||!l.has(c))?i.push(c):c&&c.length&&e!=="string"&&d(c)})})(arguments),e?g=i.length:c&&(f=b,k(c))}return this},remove:function(){return i&&p.each(arguments,function(a,b){var c;while((c=p.inArray(b,i,c))>-1)i.splice(c,1),e&&(c<=g&&g--,c<=h&&h--)}),this},has:function(a){return p.inArray(a,i)>-1},empty:function(){return i=[],this},disable:function(){return i=j=c=b,this},disabled:function(){return!i},lock:function(){return j=b,c||l.disable(),this},locked:function(){return!j},fireWith:function(a,b){return b=b||[],b=[a,b.slice?b.slice():b],i&&(!d||j)&&(e?j.push(b):k(b)),this},fire:function(){return l.fireWith(this,arguments),this},fired:function(){return!!d}};return l},p.extend({Deferred:function(a){var b=[["resolve","done",p.Callbacks("once memory"),"resolved"],["reject","fail",p.Callbacks("once memory"),"rejected"],["notify","progress",p.Callbacks("memory")]],c="pending",d={state:function(){return c},always:function(){return e.done(arguments).fail(arguments),this},then:function(){var a=arguments;return p.Deferred(function(c){p.each(b,function(b,d){var f=d[0],g=a[b];e[d[1]](p.isFunction(g)?function(){var a=g.apply(this,arguments);a&&p.isFunction(a.promise)?a.promise().done(c.resolve).fail(c.reject).progress(c.notify):c[f+"With"](this===e?c:this,[a])}:c[f])}),a=null}).promise()},promise:function(a){return a!=null?p.extend(a,d):d}},e={};return d.pipe=d.then,p.each(b,function(a,f){var g=f[2],h=f[3];d[f[1]]=g.add,h&&g.add(function(){c=h},b[a^1][2].disable,b[2][2].lock),e[f[0]]=g.fire,e[f[0]+"With"]=g.fireWith}),d.promise(e),a&&a.call(e,e),e},when:function(a){var b=0,c=k.call(arguments),d=c.length,e=d!==1||a&&p.isFunction(a.promise)?d:0,f=e===1?a:p.Deferred(),g=function(a,b,c){return function(d){b[a]=this,c[a]=arguments.length>1?k.call(arguments):d,c===h?f.notifyWith(b,c):--e||f.resolveWith(b,c)}},h,i,j;if(d>1){h=new Array(d),i=new Array(d),j=new Array(d);for(;b<d;b++)c[b]&&p.isFunction(c[b].promise)?c[b].promise().done(g(b,j,c)).fail(f.reject).progress(g(b,i,h)):--e}return e||f.resolveWith(j,c),f.promise()}}),p.support=function(){var b,c,d,f,g,h,i,j,k,l,m,n=e.createElement("div");n.setAttribute("className","t"),n.innerHTML="  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>",c=n.getElementsByTagName("*"),d=n.getElementsByTagName("a")[0],d.style.cssText="top:1px;float:left;opacity:.5";if(!c||!c.length)return{};f=e.createElement("select"),g=f.appendChild(e.createElement("option")),h=n.getElementsByTagName("input")[0],b={leadingWhitespace:n.firstChild.nodeType===3,tbody:!n.getElementsByTagName("tbody").length,htmlSerialize:!!n.getElementsByTagName("link").length,style:/top/.test(d.getAttribute("style")),hrefNormalized:d.getAttribute("href")==="/a",opacity:/^0.5/.test(d.style.opacity),cssFloat:!!d.style.cssFloat,checkOn:h.value==="on",optSelected:g.selected,getSetAttribute:n.className!=="t",enctype:!!e.createElement("form").enctype,html5Clone:e.createElement("nav").cloneNode(!0).outerHTML!=="<:nav></:nav>",boxModel:e.compatMode==="CSS1Compat",submitBubbles:!0,changeBubbles:!0,focusinBubbles:!1,deleteExpando:!0,noCloneEvent:!0,inlineBlockNeedsLayout:!1,shrinkWrapBlocks:!1,reliableMarginRight:!0,boxSizingReliable:!0,pixelPosition:!1},h.checked=!0,b.noCloneChecked=h.cloneNode(!0).checked,f.disabled=!0,b.optDisabled=!g.disabled;try{delete n.test}catch(o){b.deleteExpando=!1}!n.addEventListener&&n.attachEvent&&n.fireEvent&&(n.attachEvent("onclick",m=function(){b.noCloneEvent=!1}),n.cloneNode(!0).fireEvent("onclick"),n.detachEvent("onclick",m)),h=e.createElement("input"),h.value="t",h.setAttribute("type","radio"),b.radioValue=h.value==="t",h.setAttribute("checked","checked"),h.setAttribute("name","t"),n.appendChild(h),i=e.createDocumentFragment(),i.appendChild(n.lastChild),b.checkClone=i.cloneNode(!0).cloneNode(!0).lastChild.checked,b.appendChecked=h.checked,i.removeChild(h),i.appendChild(n);if(n.attachEvent)for(k in{submit:!0,change:!0,focusin:!0})j="on"+k,l=j in n,l||(n.setAttribute(j,"return;"),l=typeof n[j]=="function"),b[k+"Bubbles"]=l;return p(function(){var c,d,f,g,h="padding:0;margin:0;border:0;display:block;overflow:hidden;",i=e.getElementsByTagName("body")[0];if(!i)return;c=e.createElement("div"),c.style.cssText="visibility:hidden;border:0;width:0;height:0;position:static;top:0;margin-top:1px",i.insertBefore(c,i.firstChild),d=e.createElement("div"),c.appendChild(d),d.innerHTML="<table><tr><td></td><td>t</td></tr></table>",f=d.getElementsByTagName("td"),f[0].style.cssText="padding:0;margin:0;border:0;display:none",l=f[0].offsetHeight===0,f[0].style.display="",f[1].style.display="none",b.reliableHiddenOffsets=l&&f[0].offsetHeight===0,d.innerHTML="",d.style.cssText="box-sizing:border-box;-moz-box-sizing:border-box;-webkit-box-sizing:border-box;padding:1px;border:1px;display:block;width:4px;margin-top:1%;position:absolute;top:1%;",b.boxSizing=d.offsetWidth===4,b.doesNotIncludeMarginInBodyOffset=i.offsetTop!==1,a.getComputedStyle&&(b.pixelPosition=(a.getComputedStyle(d,null)||{}).top!=="1%",b.boxSizingReliable=(a.getComputedStyle(d,null)||{width:"4px"}).width==="4px",g=e.createElement("div"),g.style.cssText=d.style.cssText=h,g.style.marginRight=g.style.width="0",d.style.width="1px",d.appendChild(g),b.reliableMarginRight=!parseFloat((a.getComputedStyle(g,null)||{}).marginRight)),typeof d.style.zoom!="undefined"&&(d.innerHTML="",d.style.cssText=h+"width:1px;padding:1px;display:inline;zoom:1",b.inlineBlockNeedsLayout=d.offsetWidth===3,d.style.display="block",d.style.overflow="visible",d.innerHTML="<div></div>",d.firstChild.style.width="5px",b.shrinkWrapBlocks=d.offsetWidth!==3,c.style.zoom=1),i.removeChild(c),c=d=f=g=null}),i.removeChild(n),c=d=f=g=h=i=n=null,b}();var H=/(?:\{[\s\S]*\}|\[[\s\S]*\])$/,I=/([A-Z])/g;p.extend({cache:{},deletedIds:[],uuid:0,expando:"jQuery"+(p.fn.jquery+Math.random()).replace(/\D/g,""),noData:{embed:!0,object:"clsid:D27CDB6E-AE6D-11cf-96B8-444553540000",applet:!0},hasData:function(a){return a=a.nodeType?p.cache[a[p.expando]]:a[p.expando],!!a&&!K(a)},data:function(a,c,d,e){if(!p.acceptData(a))return;var f,g,h=p.expando,i=typeof c=="string",j=a.nodeType,k=j?p.cache:a,l=j?a[h]:a[h]&&h;if((!l||!k[l]||!e&&!k[l].data)&&i&&d===b)return;l||(j?a[h]=l=p.deletedIds.pop()||p.guid++:l=h),k[l]||(k[l]={},j||(k[l].toJSON=p.noop));if(typeof c=="object"||typeof c=="function")e?k[l]=p.extend(k[l],c):k[l].data=p.extend(k[l].data,c);return f=k[l],e||(f.data||(f.data={}),f=f.data),d!==b&&(f[p.camelCase(c)]=d),i?(g=f[c],g==null&&(g=f[p.camelCase(c)])):g=f,g},removeData:function(a,b,c){if(!p.acceptData(a))return;var d,e,f,g=a.nodeType,h=g?p.cache:a,i=g?a[p.expando]:p.expando;if(!h[i])return;if(b){d=c?h[i]:h[i].data;if(d){p.isArray(b)||(b in d?b=[b]:(b=p.camelCase(b),b in d?b=[b]:b=b.split(" ")));for(e=0,f=b.length;e<f;e++)delete d[b[e]];if(!(c?K:p.isEmptyObject)(d))return}}if(!c){delete h[i].data;if(!K(h[i]))return}g?p.cleanData([a],!0):p.support.deleteExpando||h!=h.window?delete h[i]:h[i]=null},_data:function(a,b,c){return p.data(a,b,c,!0)},acceptData:function(a){var b=a.nodeName&&p.noData[a.nodeName.toLowerCase()];return!b||b!==!0&&a.getAttribute("classid")===b}}),p.fn.extend({data:function(a,c){var d,e,f,g,h,i=this[0],j=0,k=null;if(a===b){if(this.length){k=p.data(i);if(i.nodeType===1&&!p._data(i,"parsedAttrs")){f=i.attributes;for(h=f.length;j<h;j++)g=f[j].name,g.indexOf("data-")||(g=p.camelCase(g.substring(5)),J(i,g,k[g]));p._data(i,"parsedAttrs",!0)}}return k}return typeof a=="object"?this.each(function(){p.data(this,a)}):(d=a.split(".",2),d[1]=d[1]?"."+d[1]:"",e=d[1]+"!",p.access(this,function(c){if(c===b)return k=this.triggerHandler("getData"+e,[d[0]]),k===b&&i&&(k=p.data(i,a),k=J(i,a,k)),k===b&&d[1]?this.data(d[0]):k;d[1]=c,this.each(function(){var b=p(this);b.triggerHandler("setData"+e,d),p.data(this,a,c),b.triggerHandler("changeData"+e,d)})},null,c,arguments.length>1,null,!1))},removeData:function(a){return this.each(function(){p.removeData(this,a)})}}),p.extend({queue:function(a,b,c){var d;if(a)return b=(b||"fx")+"queue",d=p._data(a,b),c&&(!d||p.isArray(c)?d=p._data(a,b,p.makeArray(c)):d.push(c)),d||[]},dequeue:function(a,b){b=b||"fx";var c=p.queue(a,b),d=c.length,e=c.shift(),f=p._queueHooks(a,b),g=function(){p.dequeue(a,b)};e==="inprogress"&&(e=c.shift(),d--),e&&(b==="fx"&&c.unshift("inprogress"),delete f.stop,e.call(a,g,f)),!d&&f&&f.empty.fire()},_queueHooks:function(a,b){var c=b+"queueHooks";return p._data(a,c)||p._data(a,c,{empty:p.Callbacks("once memory").add(function(){p.removeData(a,b+"queue",!0),p.removeData(a,c,!0)})})}}),p.fn.extend({queue:function(a,c){var d=2;return typeof a!="string"&&(c=a,a="fx",d--),arguments.length<d?p.queue(this[0],a):c===b?this:this.each(function(){var b=p.queue(this,a,c);p._queueHooks(this,a),a==="fx"&&b[0]!=="inprogress"&&p.dequeue(this,a)})},dequeue:function(a){return this.each(function(){p.dequeue(this,a)})},delay:function(a,b){return a=p.fx?p.fx.speeds[a]||a:a,b=b||"fx",this.queue(b,function(b,c){var d=setTimeout(b,a);c.stop=function(){clearTimeout(d)}})},clearQueue:function(a){return this.queue(a||"fx",[])},promise:function(a,c){var d,e=1,f=p.Deferred(),g=this,h=this.length,i=function(){--e||f.resolveWith(g,[g])};typeof a!="string"&&(c=a,a=b),a=a||"fx";while(h--)d=p._data(g[h],a+"queueHooks"),d&&d.empty&&(e++,d.empty.add(i));return i(),f.promise(c)}});var L,M,N,O=/[\t\r\n]/g,P=/\r/g,Q=/^(?:button|input)$/i,R=/^(?:button|input|object|select|textarea)$/i,S=/^a(?:rea|)$/i,T=/^(?:autofocus|autoplay|async|checked|controls|defer|disabled|hidden|loop|multiple|open|readonly|required|scoped|selected)$/i,U=p.support.getSetAttribute;p.fn.extend({attr:function(a,b){return p.access(this,p.attr,a,b,arguments.length>1)},removeAttr:function(a){return this.each(function(){p.removeAttr(this,a)})},prop:function(a,b){return p.access(this,p.prop,a,b,arguments.length>1)},removeProp:function(a){return a=p.propFix[a]||a,this.each(function(){try{this[a]=b,delete this[a]}catch(c){}})},addClass:function(a){var b,c,d,e,f,g,h;if(p.isFunction(a))return this.each(function(b){p(this).addClass(a.call(this,b,this.className))});if(a&&typeof a=="string"){b=a.split(s);for(c=0,d=this.length;c<d;c++){e=this[c];if(e.nodeType===1)if(!e.className&&b.length===1)e.className=a;else{f=" "+e.className+" ";for(g=0,h=b.length;g<h;g++)f.indexOf(" "+b[g]+" ")<0&&(f+=b[g]+" ");e.className=p.trim(f)}}}return this},removeClass:function(a){var c,d,e,f,g,h,i;if(p.isFunction(a))return this.each(function(b){p(this).removeClass(a.call(this,b,this.className))});if(a&&typeof a=="string"||a===b){c=(a||"").split(s);for(h=0,i=this.length;h<i;h++){e=this[h];if(e.nodeType===1&&e.className){d=(" "+e.className+" ").replace(O," ");for(f=0,g=c.length;f<g;f++)while(d.indexOf(" "+c[f]+" ")>=0)d=d.replace(" "+c[f]+" "," ");e.className=a?p.trim(d):""}}}return this},toggleClass:function(a,b){var c=typeof a,d=typeof b=="boolean";return p.isFunction(a)?this.each(function(c){p(this).toggleClass(a.call(this,c,this.className,b),b)}):this.each(function(){if(c==="string"){var e,f=0,g=p(this),h=b,i=a.split(s);while(e=i[f++])h=d?h:!g.hasClass(e),g[h?"addClass":"removeClass"](e)}else if(c==="undefined"||c==="boolean")this.className&&p._data(this,"__className__",this.className),this.className=this.className||a===!1?"":p._data(this,"__className__")||""})},hasClass:function(a){var b=" "+a+" ",c=0,d=this.length;for(;c<d;c++)if(this[c].nodeType===1&&(" "+this[c].className+" ").replace(O," ").indexOf(b)>=0)return!0;return!1},val:function(a){var c,d,e,f=this[0];if(!arguments.length){if(f)return c=p.valHooks[f.type]||p.valHooks[f.nodeName.toLowerCase()],c&&"get"in c&&(d=c.get(f,"value"))!==b?d:(d=f.value,typeof d=="string"?d.replace(P,""):d==null?"":d);return}return e=p.isFunction(a),this.each(function(d){var f,g=p(this);if(this.nodeType!==1)return;e?f=a.call(this,d,g.val()):f=a,f==null?f="":typeof f=="number"?f+="":p.isArray(f)&&(f=p.map(f,function(a){return a==null?"":a+""})),c=p.valHooks[this.type]||p.valHooks[this.nodeName.toLowerCase()];if(!c||!("set"in c)||c.set(this,f,"value")===b)this.value=f})}}),p.extend({valHooks:{option:{get:function(a){var b=a.attributes.value;return!b||b.specified?a.value:a.text}},select:{get:function(a){var b,c,d,e,f=a.selectedIndex,g=[],h=a.options,i=a.type==="select-one";if(f<0)return null;c=i?f:0,d=i?f+1:h.length;for(;c<d;c++){e=h[c];if(e.selected&&(p.support.optDisabled?!e.disabled:e.getAttribute("disabled")===null)&&(!e.parentNode.disabled||!p.nodeName(e.parentNode,"optgroup"))){b=p(e).val();if(i)return b;g.push(b)}}return i&&!g.length&&h.length?p(h[f]).val():g},set:function(a,b){var c=p.makeArray(b);return p(a).find("option").each(function(){this.selected=p.inArray(p(this).val(),c)>=0}),c.length||(a.selectedIndex=-1),c}}},attrFn:{},attr:function(a,c,d,e){var f,g,h,i=a.nodeType;if(!a||i===3||i===8||i===2)return;if(e&&p.isFunction(p.fn[c]))return p(a)[c](d);if(typeof a.getAttribute=="undefined")return p.prop(a,c,d);h=i!==1||!p.isXMLDoc(a),h&&(c=c.toLowerCase(),g=p.attrHooks[c]||(T.test(c)?M:L));if(d!==b){if(d===null){p.removeAttr(a,c);return}return g&&"set"in g&&h&&(f=g.set(a,d,c))!==b?f:(a.setAttribute(c,d+""),d)}return g&&"get"in g&&h&&(f=g.get(a,c))!==null?f:(f=a.getAttribute(c),f===null?b:f)},removeAttr:function(a,b){var c,d,e,f,g=0;if(b&&a.nodeType===1){d=b.split(s);for(;g<d.length;g++)e=d[g],e&&(c=p.propFix[e]||e,f=T.test(e),f||p.attr(a,e,""),a.removeAttribute(U?e:c),f&&c in a&&(a[c]=!1))}},attrHooks:{type:{set:function(a,b){if(Q.test(a.nodeName)&&a.parentNode)p.error("type property can't be changed");else if(!p.support.radioValue&&b==="radio"&&p.nodeName(a,"input")){var c=a.value;return a.setAttribute("type",b),c&&(a.value=c),b}}},value:{get:function(a,b){return L&&p.nodeName(a,"button")?L.get(a,b):b in a?a.value:null},set:function(a,b,c){if(L&&p.nodeName(a,"button"))return L.set(a,b,c);a.value=b}}},propFix:{tabindex:"tabIndex",readonly:"readOnly","for":"htmlFor","class":"className",maxlength:"maxLength",cellspacing:"cellSpacing",cellpadding:"cellPadding",rowspan:"rowSpan",colspan:"colSpan",usemap:"useMap",frameborder:"frameBorder",contenteditable:"contentEditable"},prop:function(a,c,d){var e,f,g,h=a.nodeType;if(!a||h===3||h===8||h===2)return;return g=h!==1||!p.isXMLDoc(a),g&&(c=p.propFix[c]||c,f=p.propHooks[c]),d!==b?f&&"set"in f&&(e=f.set(a,d,c))!==b?e:a[c]=d:f&&"get"in f&&(e=f.get(a,c))!==null?e:a[c]},propHooks:{tabIndex:{get:function(a){var c=a.getAttributeNode("tabindex");return c&&c.specified?parseInt(c.value,10):R.test(a.nodeName)||S.test(a.nodeName)&&a.href?0:b}}}}),M={get:function(a,c){var d,e=p.prop(a,c);return e===!0||typeof e!="boolean"&&(d=a.getAttributeNode(c))&&d.nodeValue!==!1?c.toLowerCase():b},set:function(a,b,c){var d;return b===!1?p.removeAttr(a,c):(d=p.propFix[c]||c,d in a&&(a[d]=!0),a.setAttribute(c,c.toLowerCase())),c}},U||(N={name:!0,id:!0,coords:!0},L=p.valHooks.button={get:function(a,c){var d;return d=a.getAttributeNode(c),d&&(N[c]?d.value!=="":d.specified)?d.value:b},set:function(a,b,c){var d=a.getAttributeNode(c);return d||(d=e.createAttribute(c),a.setAttributeNode(d)),d.value=b+""}},p.each(["width","height"],function(a,b){p.attrHooks[b]=p.extend(p.attrHooks[b],{set:function(a,c){if(c==="")return a.setAttribute(b,"auto"),c}})}),p.attrHooks.contenteditable={get:L.get,set:function(a,b,c){b===""&&(b="false"),L.set(a,b,c)}}),p.support.hrefNormalized||p.each(["href","src","width","height"],function(a,c){p.attrHooks[c]=p.extend(p.attrHooks[c],{get:function(a){var d=a.getAttribute(c,2);return d===null?b:d}})}),p.support.style||(p.attrHooks.style={get:function(a){return a.style.cssText.toLowerCase()||b},set:function(a,b){return a.style.cssText=b+""}}),p.support.optSelected||(p.propHooks.selected=p.extend(p.propHooks.selected,{get:function(a){var b=a.parentNode;return b&&(b.selectedIndex,b.parentNode&&b.parentNode.selectedIndex),null}})),p.support.enctype||(p.propFix.enctype="encoding"),p.support.checkOn||p.each(["radio","checkbox"],function(){p.valHooks[this]={get:function(a){return a.getAttribute("value")===null?"on":a.value}}}),p.each(["radio","checkbox"],function(){p.valHooks[this]=p.extend(p.valHooks[this],{set:function(a,b){if(p.isArray(b))return a.checked=p.inArray(p(a).val(),b)>=0}})});var V=/^(?:textarea|input|select)$/i,W=/^([^\.]*|)(?:\.(.+)|)$/,X=/(?:^|\s)hover(\.\S+|)\b/,Y=/^key/,Z=/^(?:mouse|contextmenu)|click/,$=/^(?:focusinfocus|focusoutblur)$/,_=function(a){return p.event.special.hover?a:a.replace(X,"mouseenter$1 mouseleave$1")};p.event={add:function(a,c,d,e,f){var g,h,i,j,k,l,m,n,o,q,r;if(a.nodeType===3||a.nodeType===8||!c||!d||!(g=p._data(a)))return;d.handler&&(o=d,d=o.handler,f=o.selector),d.guid||(d.guid=p.guid++),i=g.events,i||(g.events=i={}),h=g.handle,h||(g.handle=h=function(a){return typeof p!="undefined"&&(!a||p.event.triggered!==a.type)?p.event.dispatch.apply(h.elem,arguments):b},h.elem=a),c=p.trim(_(c)).split(" ");for(j=0;j<c.length;j++){k=W.exec(c[j])||[],l=k[1],m=(k[2]||"").split(".").sort(),r=p.event.special[l]||{},l=(f?r.delegateType:r.bindType)||l,r=p.event.special[l]||{},n=p.extend({type:l,origType:k[1],data:e,handler:d,guid:d.guid,selector:f,needsContext:f&&p.expr.match.needsContext.test(f),namespace:m.join(".")},o),q=i[l];if(!q){q=i[l]=[],q.delegateCount=0;if(!r.setup||r.setup.call(a,e,m,h)===!1)a.addEventListener?a.addEventListener(l,h,!1):a.attachEvent&&a.attachEvent("on"+l,h)}r.add&&(r.add.call(a,n),n.handler.guid||(n.handler.guid=d.guid)),f?q.splice(q.delegateCount++,0,n):q.push(n),p.event.global[l]=!0}a=null},global:{},remove:function(a,b,c,d,e){var f,g,h,i,j,k,l,m,n,o,q,r=p.hasData(a)&&p._data(a);if(!r||!(m=r.events))return;b=p.trim(_(b||"")).split(" ");for(f=0;f<b.length;f++){g=W.exec(b[f])||[],h=i=g[1],j=g[2];if(!h){for(h in m)p.event.remove(a,h+b[f],c,d,!0);continue}n=p.event.special[h]||{},h=(d?n.delegateType:n.bindType)||h,o=m[h]||[],k=o.length,j=j?new RegExp("(^|\\.)"+j.split(".").sort().join("\\.(?:.*\\.|)")+"(\\.|$)"):null;for(l=0;l<o.length;l++)q=o[l],(e||i===q.origType)&&(!c||c.guid===q.guid)&&(!j||j.test(q.namespace))&&(!d||d===q.selector||d==="**"&&q.selector)&&(o.splice(l--,1),q.selector&&o.delegateCount--,n.remove&&n.remove.call(a,q));o.length===0&&k!==o.length&&((!n.teardown||n.teardown.call(a,j,r.handle)===!1)&&p.removeEvent(a,h,r.handle),delete m[h])}p.isEmptyObject(m)&&(delete r.handle,p.removeData(a,"events",!0))},customEvent:{getData:!0,setData:!0,changeData:!0},trigger:function(c,d,f,g){if(!f||f.nodeType!==3&&f.nodeType!==8){var h,i,j,k,l,m,n,o,q,r,s=c.type||c,t=[];if($.test(s+p.event.triggered))return;s.indexOf("!")>=0&&(s=s.slice(0,-1),i=!0),s.indexOf(".")>=0&&(t=s.split("."),s=t.shift(),t.sort());if((!f||p.event.customEvent[s])&&!p.event.global[s])return;c=typeof c=="object"?c[p.expando]?c:new p.Event(s,c):new p.Event(s),c.type=s,c.isTrigger=!0,c.exclusive=i,c.namespace=t.join("."),c.namespace_re=c.namespace?new RegExp("(^|\\.)"+t.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,m=s.indexOf(":")<0?"on"+s:"";if(!f){h=p.cache;for(j in h)h[j].events&&h[j].events[s]&&p.event.trigger(c,d,h[j].handle.elem,!0);return}c.result=b,c.target||(c.target=f),d=d!=null?p.makeArray(d):[],d.unshift(c),n=p.event.special[s]||{};if(n.trigger&&n.trigger.apply(f,d)===!1)return;q=[[f,n.bindType||s]];if(!g&&!n.noBubble&&!p.isWindow(f)){r=n.delegateType||s,k=$.test(r+s)?f:f.parentNode;for(l=f;k;k=k.parentNode)q.push([k,r]),l=k;l===(f.ownerDocument||e)&&q.push([l.defaultView||l.parentWindow||a,r])}for(j=0;j<q.length&&!c.isPropagationStopped();j++)k=q[j][0],c.type=q[j][1],o=(p._data(k,"events")||{})[c.type]&&p._data(k,"handle"),o&&o.apply(k,d),o=m&&k[m],o&&p.acceptData(k)&&o.apply&&o.apply(k,d)===!1&&c.preventDefault();return c.type=s,!g&&!c.isDefaultPrevented()&&(!n._default||n._default.apply(f.ownerDocument,d)===!1)&&(s!=="click"||!p.nodeName(f,"a"))&&p.acceptData(f)&&m&&f[s]&&(s!=="focus"&&s!=="blur"||c.target.offsetWidth!==0)&&!p.isWindow(f)&&(l=f[m],l&&(f[m]=null),p.event.triggered=s,f[s](),p.event.triggered=b,l&&(f[m]=l)),c.result}return},dispatch:function(c){c=p.event.fix(c||a.event);var d,e,f,g,h,i,j,l,m,n,o=(p._data(this,"events")||{})[c.type]||[],q=o.delegateCount,r=k.call(arguments),s=!c.exclusive&&!c.namespace,t=p.event.special[c.type]||{},u=[];r[0]=c,c.delegateTarget=this;if(t.preDispatch&&t.preDispatch.call(this,c)===!1)return;if(q&&(!c.button||c.type!=="click"))for(f=c.target;f!=this;f=f.parentNode||this)if(f.disabled!==!0||c.type!=="click"){h={},j=[];for(d=0;d<q;d++)l=o[d],m=l.selector,h[m]===b&&(h[m]=l.needsContext?p(m,this).index(f)>=0:p.find(m,this,null,[f]).length),h[m]&&j.push(l);j.length&&u.push({elem:f,matches:j})}o.length>q&&u.push({elem:this,matches:o.slice(q)});for(d=0;d<u.length&&!c.isPropagationStopped();d++){i=u[d],c.currentTarget=i.elem;for(e=0;e<i.matches.length&&!c.isImmediatePropagationStopped();e++){l=i.matches[e];if(s||!c.namespace&&!l.namespace||c.namespace_re&&c.namespace_re.test(l.namespace))c.data=l.data,c.handleObj=l,g=((p.event.special[l.origType]||{}).handle||l.handler).apply(i.elem,r),g!==b&&(c.result=g,g===!1&&(c.preventDefault(),c.stopPropagation()))}}return t.postDispatch&&t.postDispatch.call(this,c),c.result},props:"attrChange attrName relatedNode srcElement altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),fixHooks:{},keyHooks:{props:"char charCode key keyCode".split(" "),filter:function(a,b){return a.which==null&&(a.which=b.charCode!=null?b.charCode:b.keyCode),a}},mouseHooks:{props:"button buttons clientX clientY fromElement offsetX offsetY pageX pageY screenX screenY toElement".split(" "),filter:function(a,c){var d,f,g,h=c.button,i=c.fromElement;return a.pageX==null&&c.clientX!=null&&(d=a.target.ownerDocument||e,f=d.documentElement,g=d.body,a.pageX=c.clientX+(f&&f.scrollLeft||g&&g.scrollLeft||0)-(f&&f.clientLeft||g&&g.clientLeft||0),a.pageY=c.clientY+(f&&f.scrollTop||g&&g.scrollTop||0)-(f&&f.clientTop||g&&g.clientTop||0)),!a.relatedTarget&&i&&(a.relatedTarget=i===a.target?c.toElement:i),!a.which&&h!==b&&(a.which=h&1?1:h&2?3:h&4?2:0),a}},fix:function(a){if(a[p.expando])return a;var b,c,d=a,f=p.event.fixHooks[a.type]||{},g=f.props?this.props.concat(f.props):this.props;a=p.Event(d);for(b=g.length;b;)c=g[--b],a[c]=d[c];return a.target||(a.target=d.srcElement||e),a.target.nodeType===3&&(a.target=a.target.parentNode),a.metaKey=!!a.metaKey,f.filter?f.filter(a,d):a},special:{load:{noBubble:!0},focus:{delegateType:"focusin"},blur:{delegateType:"focusout"},beforeunload:{setup:function(a,b,c){p.isWindow(this)&&(this.onbeforeunload=c)},teardown:function(a,b){this.onbeforeunload===b&&(this.onbeforeunload=null)}}},simulate:function(a,b,c,d){var e=p.extend(new p.Event,c,{type:a,isSimulated:!0,originalEvent:{}});d?p.event.trigger(e,null,b):p.event.dispatch.call(b,e),e.isDefaultPrevented()&&c.preventDefault()}},p.event.handle=p.event.dispatch,p.removeEvent=e.removeEventListener?function(a,b,c){a.removeEventListener&&a.removeEventListener(b,c,!1)}:function(a,b,c){var d="on"+b;a.detachEvent&&(typeof a[d]=="undefined"&&(a[d]=null),a.detachEvent(d,c))},p.Event=function(a,b){if(this instanceof p.Event)a&&a.type?(this.originalEvent=a,this.type=a.type,this.isDefaultPrevented=a.defaultPrevented||a.returnValue===!1||a.getPreventDefault&&a.getPreventDefault()?bb:ba):this.type=a,b&&p.extend(this,b),this.timeStamp=a&&a.timeStamp||p.now(),this[p.expando]=!0;else return new p.Event(a,b)},p.Event.prototype={preventDefault:function(){this.isDefaultPrevented=bb;var a=this.originalEvent;if(!a)return;a.preventDefault?a.preventDefault():a.returnValue=!1},stopPropagation:function(){this.isPropagationStopped=bb;var a=this.originalEvent;if(!a)return;a.stopPropagation&&a.stopPropagation(),a.cancelBubble=!0},stopImmediatePropagation:function(){this.isImmediatePropagationStopped=bb,this.stopPropagation()},isDefaultPrevented:ba,isPropagationStopped:ba,isImmediatePropagationStopped:ba},p.each({mouseenter:"mouseover",mouseleave:"mouseout"},function(a,b){p.event.special[a]={delegateType:b,bindType:b,handle:function(a){var c,d=this,e=a.relatedTarget,f=a.handleObj,g=f.selector;if(!e||e!==d&&!p.contains(d,e))a.type=f.origType,c=f.handler.apply(this,arguments),a.type=b;return c}}}),p.support.submitBubbles||(p.event.special.submit={setup:function(){if(p.nodeName(this,"form"))return!1;p.event.add(this,"click._submit keypress._submit",function(a){var c=a.target,d=p.nodeName(c,"input")||p.nodeName(c,"button")?c.form:b;d&&!p._data(d,"_submit_attached")&&(p.event.add(d,"submit._submit",function(a){a._submit_bubble=!0}),p._data(d,"_submit_attached",!0))})},postDispatch:function(a){a._submit_bubble&&(delete a._submit_bubble,this.parentNode&&!a.isTrigger&&p.event.simulate("submit",this.parentNode,a,!0))},teardown:function(){if(p.nodeName(this,"form"))return!1;p.event.remove(this,"._submit")}}),p.support.changeBubbles||(p.event.special.change={setup:function(){if(V.test(this.nodeName)){if(this.type==="checkbox"||this.type==="radio")p.event.add(this,"propertychange._change",function(a){a.originalEvent.propertyName==="checked"&&(this._just_changed=!0)}),p.event.add(this,"click._change",function(a){this._just_changed&&!a.isTrigger&&(this._just_changed=!1),p.event.simulate("change",this,a,!0)});return!1}p.event.add(this,"beforeactivate._change",function(a){var b=a.target;V.test(b.nodeName)&&!p._data(b,"_change_attached")&&(p.event.add(b,"change._change",function(a){this.parentNode&&!a.isSimulated&&!a.isTrigger&&p.event.simulate("change",this.parentNode,a,!0)}),p._data(b,"_change_attached",!0))})},handle:function(a){var b=a.target;if(this!==b||a.isSimulated||a.isTrigger||b.type!=="radio"&&b.type!=="checkbox")return a.handleObj.handler.apply(this,arguments)},teardown:function(){return p.event.remove(this,"._change"),!V.test(this.nodeName)}}),p.support.focusinBubbles||p.each({focus:"focusin",blur:"focusout"},function(a,b){var c=0,d=function(a){p.event.simulate(b,a.target,p.event.fix(a),!0)};p.event.special[b]={setup:function(){c++===0&&e.addEventListener(a,d,!0)},teardown:function(){--c===0&&e.removeEventListener(a,d,!0)}}}),p.fn.extend({on:function(a,c,d,e,f){var g,h;if(typeof a=="object"){typeof c!="string"&&(d=d||c,c=b);for(h in a)this.on(h,c,d,a[h],f);return this}d==null&&e==null?(e=c,d=c=b):e==null&&(typeof c=="string"?(e=d,d=b):(e=d,d=c,c=b));if(e===!1)e=ba;else if(!e)return this;return f===1&&(g=e,e=function(a){return p().off(a),g.apply(this,arguments)},e.guid=g.guid||(g.guid=p.guid++)),this.each(function(){p.event.add(this,a,e,d,c)})},one:function(a,b,c,d){return this.on(a,b,c,d,1)},off:function(a,c,d){var e,f;if(a&&a.preventDefault&&a.handleObj)return e=a.handleObj,p(a.delegateTarget).off(e.namespace?e.origType+"."+e.namespace:e.origType,e.selector,e.handler),this;if(typeof a=="object"){for(f in a)this.off(f,c,a[f]);return this}if(c===!1||typeof c=="function")d=c,c=b;return d===!1&&(d=ba),this.each(function(){p.event.remove(this,a,d,c)})},bind:function(a,b,c){return this.on(a,null,b,c)},unbind:function(a,b){return this.off(a,null,b)},live:function(a,b,c){return p(this.context).on(a,this.selector,b,c),this},die:function(a,b){return p(this.context).off(a,this.selector||"**",b),this},delegate:function(a,b,c,d){return this.on(b,a,c,d)},undelegate:function(a,b,c){return arguments.length===1?this.off(a,"**"):this.off(b,a||"**",c)},trigger:function(a,b){return this.each(function(){p.event.trigger(a,b,this)})},triggerHandler:function(a,b){if(this[0])return p.event.trigger(a,b,this[0],!0)},toggle:function(a){var b=arguments,c=a.guid||p.guid++,d=0,e=function(c){var e=(p._data(this,"lastToggle"+a.guid)||0)%d;return p._data(this,"lastToggle"+a.guid,e+1),c.preventDefault(),b[e].apply(this,arguments)||!1};e.guid=c;while(d<b.length)b[d++].guid=c;return this.click(e)},hover:function(a,b){return this.mouseenter(a).mouseleave(b||a)}}),p.each("blur focus focusin focusout load resize scroll unload click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup error contextmenu".split(" "),function(a,b){p.fn[b]=function(a,c){return c==null&&(c=a,a=null),arguments.length>0?this.on(b,null,a,c):this.trigger(b)},Y.test(b)&&(p.event.fixHooks[b]=p.event.keyHooks),Z.test(b)&&(p.event.fixHooks[b]=p.event.mouseHooks)}),function(a,b){function bc(a,b,c,d){c=c||[],b=b||r;var e,f,i,j,k=b.nodeType;if(!a||typeof a!="string")return c;if(k!==1&&k!==9)return[];i=g(b);if(!i&&!d)if(e=P.exec(a))if(j=e[1]){if(k===9){f=b.getElementById(j);if(!f||!f.parentNode)return c;if(f.id===j)return c.push(f),c}else if(b.ownerDocument&&(f=b.ownerDocument.getElementById(j))&&h(b,f)&&f.id===j)return c.push(f),c}else{if(e[2])return w.apply(c,x.call(b.getElementsByTagName(a),0)),c;if((j=e[3])&&_&&b.getElementsByClassName)return w.apply(c,x.call(b.getElementsByClassName(j),0)),c}return bp(a.replace(L,"$1"),b,c,d,i)}function bd(a){return function(b){var c=b.nodeName.toLowerCase();return c==="input"&&b.type===a}}function be(a){return function(b){var c=b.nodeName.toLowerCase();return(c==="input"||c==="button")&&b.type===a}}function bf(a){return z(function(b){return b=+b,z(function(c,d){var e,f=a([],c.length,b),g=f.length;while(g--)c[e=f[g]]&&(c[e]=!(d[e]=c[e]))})})}function bg(a,b,c){if(a===b)return c;var d=a.nextSibling;while(d){if(d===b)return-1;d=d.nextSibling}return 1}function bh(a,b){var c,d,f,g,h,i,j,k=C[o][a];if(k)return b?0:k.slice(0);h=a,i=[],j=e.preFilter;while(h){if(!c||(d=M.exec(h)))d&&(h=h.slice(d[0].length)),i.push(f=[]);c=!1;if(d=N.exec(h))f.push(c=new q(d.shift())),h=h.slice(c.length),c.type=d[0].replace(L," ");for(g in e.filter)(d=W[g].exec(h))&&(!j[g]||(d=j[g](d,r,!0)))&&(f.push(c=new q(d.shift())),h=h.slice(c.length),c.type=g,c.matches=d);if(!c)break}return b?h.length:h?bc.error(a):C(a,i).slice(0)}function bi(a,b,d){var e=b.dir,f=d&&b.dir==="parentNode",g=u++;return b.first?function(b,c,d){while(b=b[e])if(f||b.nodeType===1)return a(b,c,d)}:function(b,d,h){if(!h){var i,j=t+" "+g+" ",k=j+c;while(b=b[e])if(f||b.nodeType===1){if((i=b[o])===k)return b.sizset;if(typeof i=="string"&&i.indexOf(j)===0){if(b.sizset)return b}else{b[o]=k;if(a(b,d,h))return b.sizset=!0,b;b.sizset=!1}}}else while(b=b[e])if(f||b.nodeType===1)if(a(b,d,h))return b}}function bj(a){return a.length>1?function(b,c,d){var e=a.length;while(e--)if(!a[e](b,c,d))return!1;return!0}:a[0]}function bk(a,b,c,d,e){var f,g=[],h=0,i=a.length,j=b!=null;for(;h<i;h++)if(f=a[h])if(!c||c(f,d,e))g.push(f),j&&b.push(h);return g}function bl(a,b,c,d,e,f){return d&&!d[o]&&(d=bl(d)),e&&!e[o]&&(e=bl(e,f)),z(function(f,g,h,i){if(f&&e)return;var j,k,l,m=[],n=[],o=g.length,p=f||bo(b||"*",h.nodeType?[h]:h,[],f),q=a&&(f||!b)?bk(p,m,a,h,i):p,r=c?e||(f?a:o||d)?[]:g:q;c&&c(q,r,h,i);if(d){l=bk(r,n),d(l,[],h,i),j=l.length;while(j--)if(k=l[j])r[n[j]]=!(q[n[j]]=k)}if(f){j=a&&r.length;while(j--)if(k=r[j])f[m[j]]=!(g[m[j]]=k)}else r=bk(r===g?r.splice(o,r.length):r),e?e(null,g,r,i):w.apply(g,r)})}function bm(a){var b,c,d,f=a.length,g=e.relative[a[0].type],h=g||e.relative[" "],i=g?1:0,j=bi(function(a){return a===b},h,!0),k=bi(function(a){return y.call(b,a)>-1},h,!0),m=[function(a,c,d){return!g&&(d||c!==l)||((b=c).nodeType?j(a,c,d):k(a,c,d))}];for(;i<f;i++)if(c=e.relative[a[i].type])m=[bi(bj(m),c)];else{c=e.filter[a[i].type].apply(null,a[i].matches);if(c[o]){d=++i;for(;d<f;d++)if(e.relative[a[d].type])break;return bl(i>1&&bj(m),i>1&&a.slice(0,i-1).join("").replace(L,"$1"),c,i<d&&bm(a.slice(i,d)),d<f&&bm(a=a.slice(d)),d<f&&a.join(""))}m.push(c)}return bj(m)}function bn(a,b){var d=b.length>0,f=a.length>0,g=function(h,i,j,k,m){var n,o,p,q=[],s=0,u="0",x=h&&[],y=m!=null,z=l,A=h||f&&e.find.TAG("*",m&&i.parentNode||i),B=t+=z==null?1:Math.E;y&&(l=i!==r&&i,c=g.el);for(;(n=A[u])!=null;u++){if(f&&n){for(o=0;p=a[o];o++)if(p(n,i,j)){k.push(n);break}y&&(t=B,c=++g.el)}d&&((n=!p&&n)&&s--,h&&x.push(n))}s+=u;if(d&&u!==s){for(o=0;p=b[o];o++)p(x,q,i,j);if(h){if(s>0)while(u--)!x[u]&&!q[u]&&(q[u]=v.call(k));q=bk(q)}w.apply(k,q),y&&!h&&q.length>0&&s+b.length>1&&bc.uniqueSort(k)}return y&&(t=B,l=z),x};return g.el=0,d?z(g):g}function bo(a,b,c,d){var e=0,f=b.length;for(;e<f;e++)bc(a,b[e],c,d);return c}function bp(a,b,c,d,f){var g,h,j,k,l,m=bh(a),n=m.length;if(!d&&m.length===1){h=m[0]=m[0].slice(0);if(h.length>2&&(j=h[0]).type==="ID"&&b.nodeType===9&&!f&&e.relative[h[1].type]){b=e.find.ID(j.matches[0].replace(V,""),b,f)[0];if(!b)return c;a=a.slice(h.shift().length)}for(g=W.POS.test(a)?-1:h.length-1;g>=0;g--){j=h[g];if(e.relative[k=j.type])break;if(l=e.find[k])if(d=l(j.matches[0].replace(V,""),R.test(h[0].type)&&b.parentNode||b,f)){h.splice(g,1),a=d.length&&h.join("");if(!a)return w.apply(c,x.call(d,0)),c;break}}}return i(a,m)(d,b,f,c,R.test(a)),c}function bq(){}var c,d,e,f,g,h,i,j,k,l,m=!0,n="undefined",o=("sizcache"+Math.random()).replace(".",""),q=String,r=a.document,s=r.documentElement,t=0,u=0,v=[].pop,w=[].push,x=[].slice,y=[].indexOf||function(a){var b=0,c=this.length;for(;b<c;b++)if(this[b]===a)return b;return-1},z=function(a,b){return a[o]=b==null||b,a},A=function(){var a={},b=[];return z(function(c,d){return b.push(c)>e.cacheLength&&delete a[b.shift()],a[c]=d},a)},B=A(),C=A(),D=A(),E="[\\x20\\t\\r\\n\\f]",F="(?:\\\\.|[-\\w]|[^\\x00-\\xa0])+",G=F.replace("w","w#"),H="([*^$|!~]?=)",I="\\["+E+"*("+F+")"+E+"*(?:"+H+E+"*(?:(['\"])((?:\\\\.|[^\\\\])*?)\\3|("+G+")|)|)"+E+"*\\]",J=":("+F+")(?:\\((?:(['\"])((?:\\\\.|[^\\\\])*?)\\2|([^()[\\]]*|(?:(?:"+I+")|[^:]|\\\\.)*|.*))\\)|)",K=":(even|odd|eq|gt|lt|nth|first|last)(?:\\("+E+"*((?:-\\d)?\\d*)"+E+"*\\)|)(?=[^-]|$)",L=new RegExp("^"+E+"+|((?:^|[^\\\\])(?:\\\\.)*)"+E+"+$","g"),M=new RegExp("^"+E+"*,"+E+"*"),N=new RegExp("^"+E+"*([\\x20\\t\\r\\n\\f>+~])"+E+"*"),O=new RegExp(J),P=/^(?:#([\w\-]+)|(\w+)|\.([\w\-]+))$/,Q=/^:not/,R=/[\x20\t\r\n\f]*[+~]/,S=/:not\($/,T=/h\d/i,U=/input|select|textarea|button/i,V=/\\(?!\\)/g,W={ID:new RegExp("^#("+F+")"),CLASS:new RegExp("^\\.("+F+")"),NAME:new RegExp("^\\[name=['\"]?("+F+")['\"]?\\]"),TAG:new RegExp("^("+F.replace("w","w*")+")"),ATTR:new RegExp("^"+I),PSEUDO:new RegExp("^"+J),POS:new RegExp(K,"i"),CHILD:new RegExp("^:(only|nth|first|last)-child(?:\\("+E+"*(even|odd|(([+-]|)(\\d*)n|)"+E+"*(?:([+-]|)"+E+"*(\\d+)|))"+E+"*\\)|)","i"),needsContext:new RegExp("^"+E+"*[>+~]|"+K,"i")},X=function(a){var b=r.createElement("div");try{return a(b)}catch(c){return!1}finally{b=null}},Y=X(function(a){return a.appendChild(r.createComment("")),!a.getElementsByTagName("*").length}),Z=X(function(a){return a.innerHTML="<a href='#'></a>",a.firstChild&&typeof a.firstChild.getAttribute!==n&&a.firstChild.getAttribute("href")==="#"}),$=X(function(a){a.innerHTML="<select></select>";var b=typeof a.lastChild.getAttribute("multiple");return b!=="boolean"&&b!=="string"}),_=X(function(a){return a.innerHTML="<div class='hidden e'></div><div class='hidden'></div>",!a.getElementsByClassName||!a.getElementsByClassName("e").length?!1:(a.lastChild.className="e",a.getElementsByClassName("e").length===2)}),ba=X(function(a){a.id=o+0,a.innerHTML="<a name='"+o+"'></a><div name='"+o+"'></div>",s.insertBefore(a,s.firstChild);var b=r.getElementsByName&&r.getElementsByName(o).length===2+r.getElementsByName(o+0).length;return d=!r.getElementById(o),s.removeChild(a),b});try{x.call(s.childNodes,0)[0].nodeType}catch(bb){x=function(a){var b,c=[];for(;b=this[a];a++)c.push(b);return c}}bc.matches=function(a,b){return bc(a,null,null,b)},bc.matchesSelector=function(a,b){return bc(b,null,null,[a]).length>0},f=bc.getText=function(a){var b,c="",d=0,e=a.nodeType;if(e){if(e===1||e===9||e===11){if(typeof a.textContent=="string")return a.textContent;for(a=a.firstChild;a;a=a.nextSibling)c+=f(a)}else if(e===3||e===4)return a.nodeValue}else for(;b=a[d];d++)c+=f(b);return c},g=bc.isXML=function(a){var b=a&&(a.ownerDocument||a).documentElement;return b?b.nodeName!=="HTML":!1},h=bc.contains=s.contains?function(a,b){var c=a.nodeType===9?a.documentElement:a,d=b&&b.parentNode;return a===d||!!(d&&d.nodeType===1&&c.contains&&c.contains(d))}:s.compareDocumentPosition?function(a,b){return b&&!!(a.compareDocumentPosition(b)&16)}:function(a,b){while(b=b.parentNode)if(b===a)return!0;return!1},bc.attr=function(a,b){var c,d=g(a);return d||(b=b.toLowerCase()),(c=e.attrHandle[b])?c(a):d||$?a.getAttribute(b):(c=a.getAttributeNode(b),c?typeof a[b]=="boolean"?a[b]?b:null:c.specified?c.value:null:null)},e=bc.selectors={cacheLength:50,createPseudo:z,match:W,attrHandle:Z?{}:{href:function(a){return a.getAttribute("href",2)},type:function(a){return a.getAttribute("type")}},find:{ID:d?function(a,b,c){if(typeof b.getElementById!==n&&!c){var d=b.getElementById(a);return d&&d.parentNode?[d]:[]}}:function(a,c,d){if(typeof c.getElementById!==n&&!d){var e=c.getElementById(a);return e?e.id===a||typeof e.getAttributeNode!==n&&e.getAttributeNode("id").value===a?[e]:b:[]}},TAG:Y?function(a,b){if(typeof b.getElementsByTagName!==n)return b.getElementsByTagName(a)}:function(a,b){var c=b.getElementsByTagName(a);if(a==="*"){var d,e=[],f=0;for(;d=c[f];f++)d.nodeType===1&&e.push(d);return e}return c},NAME:ba&&function(a,b){if(typeof b.getElementsByName!==n)return b.getElementsByName(name)},CLASS:_&&function(a,b,c){if(typeof b.getElementsByClassName!==n&&!c)return b.getElementsByClassName(a)}},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(a){return a[1]=a[1].replace(V,""),a[3]=(a[4]||a[5]||"").replace(V,""),a[2]==="~="&&(a[3]=" "+a[3]+" "),a.slice(0,4)},CHILD:function(a){return a[1]=a[1].toLowerCase(),a[1]==="nth"?(a[2]||bc.error(a[0]),a[3]=+(a[3]?a[4]+(a[5]||1):2*(a[2]==="even"||a[2]==="odd")),a[4]=+(a[6]+a[7]||a[2]==="odd")):a[2]&&bc.error(a[0]),a},PSEUDO:function(a){var b,c;if(W.CHILD.test(a[0]))return null;if(a[3])a[2]=a[3];else if(b=a[4])O.test(b)&&(c=bh(b,!0))&&(c=b.indexOf(")",b.length-c)-b.length)&&(b=b.slice(0,c),a[0]=a[0].slice(0,c)),a[2]=b;return a.slice(0,3)}},filter:{ID:d?function(a){return a=a.replace(V,""),function(b){return b.getAttribute("id")===a}}:function(a){return a=a.replace(V,""),function(b){var c=typeof b.getAttributeNode!==n&&b.getAttributeNode("id");return c&&c.value===a}},TAG:function(a){return a==="*"?function(){return!0}:(a=a.replace(V,"").toLowerCase(),function(b){return b.nodeName&&b.nodeName.toLowerCase()===a})},CLASS:function(a){var b=B[o][a];return b||(b=B(a,new RegExp("(^|"+E+")"+a+"("+E+"|$)"))),function(a){return b.test(a.className||typeof a.getAttribute!==n&&a.getAttribute("class")||"")}},ATTR:function(a,b,c){return function(d,e){var f=bc.attr(d,a);return f==null?b==="!=":b?(f+="",b==="="?f===c:b==="!="?f!==c:b==="^="?c&&f.indexOf(c)===0:b==="*="?c&&f.indexOf(c)>-1:b==="$="?c&&f.substr(f.length-c.length)===c:b==="~="?(" "+f+" ").indexOf(c)>-1:b==="|="?f===c||f.substr(0,c.length+1)===c+"-":!1):!0}},CHILD:function(a,b,c,d){return a==="nth"?function(a){var b,e,f=a.parentNode;if(c===1&&d===0)return!0;if(f){e=0;for(b=f.firstChild;b;b=b.nextSibling)if(b.nodeType===1){e++;if(a===b)break}}return e-=d,e===c||e%c===0&&e/c>=0}:function(b){var c=b;switch(a){case"only":case"first":while(c=c.previousSibling)if(c.nodeType===1)return!1;if(a==="first")return!0;c=b;case"last":while(c=c.nextSibling)if(c.nodeType===1)return!1;return!0}}},PSEUDO:function(a,b){var c,d=e.pseudos[a]||e.setFilters[a.toLowerCase()]||bc.error("unsupported pseudo: "+a);return d[o]?d(b):d.length>1?(c=[a,a,"",b],e.setFilters.hasOwnProperty(a.toLowerCase())?z(function(a,c){var e,f=d(a,b),g=f.length;while(g--)e=y.call(a,f[g]),a[e]=!(c[e]=f[g])}):function(a){return d(a,0,c)}):d}},pseudos:{not:z(function(a){var b=[],c=[],d=i(a.replace(L,"$1"));return d[o]?z(function(a,b,c,e){var f,g=d(a,null,e,[]),h=a.length;while(h--)if(f=g[h])a[h]=!(b[h]=f)}):function(a,e,f){return b[0]=a,d(b,null,f,c),!c.pop()}}),has:z(function(a){return function(b){return bc(a,b).length>0}}),contains:z(function(a){return function(b){return(b.textContent||b.innerText||f(b)).indexOf(a)>-1}}),enabled:function(a){return a.disabled===!1},disabled:function(a){return a.disabled===!0},checked:function(a){var b=a.nodeName.toLowerCase();return b==="input"&&!!a.checked||b==="option"&&!!a.selected},selected:function(a){return a.parentNode&&a.parentNode.selectedIndex,a.selected===!0},parent:function(a){return!e.pseudos.empty(a)},empty:function(a){var b;a=a.firstChild;while(a){if(a.nodeName>"@"||(b=a.nodeType)===3||b===4)return!1;a=a.nextSibling}return!0},header:function(a){return T.test(a.nodeName)},text:function(a){var b,c;return a.nodeName.toLowerCase()==="input"&&(b=a.type)==="text"&&((c=a.getAttribute("type"))==null||c.toLowerCase()===b)},radio:bd("radio"),checkbox:bd("checkbox"),file:bd("file"),password:bd("password"),image:bd("image"),submit:be("submit"),reset:be("reset"),button:function(a){var b=a.nodeName.toLowerCase();return b==="input"&&a.type==="button"||b==="button"},input:function(a){return U.test(a.nodeName)},focus:function(a){var b=a.ownerDocument;return a===b.activeElement&&(!b.hasFocus||b.hasFocus())&&(!!a.type||!!a.href)},active:function(a){return a===a.ownerDocument.activeElement},first:bf(function(a,b,c){return[0]}),last:bf(function(a,b,c){return[b-1]}),eq:bf(function(a,b,c){return[c<0?c+b:c]}),even:bf(function(a,b,c){for(var d=0;d<b;d+=2)a.push(d);return a}),odd:bf(function(a,b,c){for(var d=1;d<b;d+=2)a.push(d);return a}),lt:bf(function(a,b,c){for(var d=c<0?c+b:c;--d>=0;)a.push(d);return a}),gt:bf(function(a,b,c){for(var d=c<0?c+b:c;++d<b;)a.push(d);return a})}},j=s.compareDocumentPosition?function(a,b){return a===b?(k=!0,0):(!a.compareDocumentPosition||!b.compareDocumentPosition?a.compareDocumentPosition:a.compareDocumentPosition(b)&4)?-1:1}:function(a,b){if(a===b)return k=!0,0;if(a.sourceIndex&&b.sourceIndex)return a.sourceIndex-b.sourceIndex;var c,d,e=[],f=[],g=a.parentNode,h=b.parentNode,i=g;if(g===h)return bg(a,b);if(!g)return-1;if(!h)return 1;while(i)e.unshift(i),i=i.parentNode;i=h;while(i)f.unshift(i),i=i.parentNode;c=e.length,d=f.length;for(var j=0;j<c&&j<d;j++)if(e[j]!==f[j])return bg(e[j],f[j]);return j===c?bg(a,f[j],-1):bg(e[j],b,1)},[0,0].sort(j),m=!k,bc.uniqueSort=function(a){var b,c=1;k=m,a.sort(j);if(k)for(;b=a[c];c++)b===a[c-1]&&a.splice(c--,1);return a},bc.error=function(a){throw new Error("Syntax error, unrecognized expression: "+a)},i=bc.compile=function(a,b){var c,d=[],e=[],f=D[o][a];if(!f){b||(b=bh(a)),c=b.length;while(c--)f=bm(b[c]),f[o]?d.push(f):e.push(f);f=D(a,bn(e,d))}return f},r.querySelectorAll&&function(){var a,b=bp,c=/'|\\/g,d=/\=[\x20\t\r\n\f]*([^'"\]]*)[\x20\t\r\n\f]*\]/g,e=[":focus"],f=[":active",":focus"],h=s.matchesSelector||s.mozMatchesSelector||s.webkitMatchesSelector||s.oMatchesSelector||s.msMatchesSelector;X(function(a){a.innerHTML="<select><option selected=''></option></select>",a.querySelectorAll("[selected]").length||e.push("\\["+E+"*(?:checked|disabled|ismap|multiple|readonly|selected|value)"),a.querySelectorAll(":checked").length||e.push(":checked")}),X(function(a){a.innerHTML="<p test=''></p>",a.querySelectorAll("[test^='']").length&&e.push("[*^$]="+E+"*(?:\"\"|'')"),a.innerHTML="<input type='hidden'/>",a.querySelectorAll(":enabled").length||e.push(":enabled",":disabled")}),e=new RegExp(e.join("|")),bp=function(a,d,f,g,h){if(!g&&!h&&(!e||!e.test(a))){var i,j,k=!0,l=o,m=d,n=d.nodeType===9&&a;if(d.nodeType===1&&d.nodeName.toLowerCase()!=="object"){i=bh(a),(k=d.getAttribute("id"))?l=k.replace(c,"\\$&"):d.setAttribute("id",l),l="[id='"+l+"'] ",j=i.length;while(j--)i[j]=l+i[j].join("");m=R.test(a)&&d.parentNode||d,n=i.join(",")}if(n)try{return w.apply(f,x.call(m.querySelectorAll(n),0)),f}catch(p){}finally{k||d.removeAttribute("id")}}return b(a,d,f,g,h)},h&&(X(function(b){a=h.call(b,"div");try{h.call(b,"[test!='']:sizzle"),f.push("!=",J)}catch(c){}}),f=new RegExp(f.join("|")),bc.matchesSelector=function(b,c){c=c.replace(d,"='$1']");if(!g(b)&&!f.test(c)&&(!e||!e.test(c)))try{var i=h.call(b,c);if(i||a||b.document&&b.document.nodeType!==11)return i}catch(j){}return bc(c,null,null,[b]).length>0})}(),e.pseudos.nth=e.pseudos.eq,e.filters=bq.prototype=e.pseudos,e.setFilters=new bq,bc.attr=p.attr,p.find=bc,p.expr=bc.selectors,p.expr[":"]=p.expr.pseudos,p.unique=bc.uniqueSort,p.text=bc.getText,p.isXMLDoc=bc.isXML,p.contains=bc.contains}(a);var bc=/Until$/,bd=/^(?:parents|prev(?:Until|All))/,be=/^.[^:#\[\.,]*$/,bf=p.expr.match.needsContext,bg={children:!0,contents:!0,next:!0,prev:!0};p.fn.extend({find:function(a){var b,c,d,e,f,g,h=this;if(typeof a!="string")return p(a).filter(function(){for(b=0,c=h.length;b<c;b++)if(p.contains(h[b],this))return!0});g=this.pushStack("","find",a);for(b=0,c=this.length;b<c;b++){d=g.length,p.find(a,this[b],g);if(b>0)for(e=d;e<g.length;e++)for(f=0;f<d;f++)if(g[f]===g[e]){g.splice(e--,1);break}}return g},has:function(a){var b,c=p(a,this),d=c.length;return this.filter(function(){for(b=0;b<d;b++)if(p.contains(this,c[b]))return!0})},not:function(a){return this.pushStack(bj(this,a,!1),"not",a)},filter:function(a){return this.pushStack(bj(this,a,!0),"filter",a)},is:function(a){return!!a&&(typeof a=="string"?bf.test(a)?p(a,this.context).index(this[0])>=0:p.filter(a,this).length>0:this.filter(a).length>0)},closest:function(a,b){var c,d=0,e=this.length,f=[],g=bf.test(a)||typeof a!="string"?p(a,b||this.context):0;for(;d<e;d++){c=this[d];while(c&&c.ownerDocument&&c!==b&&c.nodeType!==11){if(g?g.index(c)>-1:p.find.matchesSelector(c,a)){f.push(c);break}c=c.parentNode}}return f=f.length>1?p.unique(f):f,this.pushStack(f,"closest",a)},index:function(a){return a?typeof a=="string"?p.inArray(this[0],p(a)):p.inArray(a.jquery?a[0]:a,this):this[0]&&this[0].parentNode?this.prevAll().length:-1},add:function(a,b){var c=typeof a=="string"?p(a,b):p.makeArray(a&&a.nodeType?[a]:a),d=p.merge(this.get(),c);return this.pushStack(bh(c[0])||bh(d[0])?d:p.unique(d))},addBack:function(a){return this.add(a==null?this.prevObject:this.prevObject.filter(a))}}),p.fn.andSelf=p.fn.addBack,p.each({parent:function(a){var b=a.parentNode;return b&&b.nodeType!==11?b:null},parents:function(a){return p.dir(a,"parentNode")},parentsUntil:function(a,b,c){return p.dir(a,"parentNode",c)},next:function(a){return bi(a,"nextSibling")},prev:function(a){return bi(a,"previousSibling")},nextAll:function(a){return p.dir(a,"nextSibling")},prevAll:function(a){return p.dir(a,"previousSibling")},nextUntil:function(a,b,c){return p.dir(a,"nextSibling",c)},prevUntil:function(a,b,c){return p.dir(a,"previousSibling",c)},siblings:function(a){return p.sibling((a.parentNode||{}).firstChild,a)},children:function(a){return p.sibling(a.firstChild)},contents:function(a){return p.nodeName(a,"iframe")?a.contentDocument||a.contentWindow.document:p.merge([],a.childNodes)}},function(a,b){p.fn[a]=function(c,d){var e=p.map(this,b,c);return bc.test(a)||(d=c),d&&typeof d=="string"&&(e=p.filter(d,e)),e=this.length>1&&!bg[a]?p.unique(e):e,this.length>1&&bd.test(a)&&(e=e.reverse()),this.pushStack(e,a,k.call(arguments).join(","))}}),p.extend({filter:function(a,b,c){return c&&(a=":not("+a+")"),b.length===1?p.find.matchesSelector(b[0],a)?[b[0]]:[]:p.find.matches(a,b)},dir:function(a,c,d){var e=[],f=a[c];while(f&&f.nodeType!==9&&(d===b||f.nodeType!==1||!p(f).is(d)))f.nodeType===1&&e.push(f),f=f[c];return e},sibling:function(a,b){var c=[];for(;a;a=a.nextSibling)a.nodeType===1&&a!==b&&c.push(a);return c}});var bl="abbr|article|aside|audio|bdi|canvas|data|datalist|details|figcaption|figure|footer|header|hgroup|mark|meter|nav|output|progress|section|summary|time|video",bm=/ jQuery\d+="(?:null|\d+)"/g,bn=/^\s+/,bo=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi,bp=/<([\w:]+)/,bq=/<tbody/i,br=/<|&#?\w+;/,bs=/<(?:script|style|link)/i,bt=/<(?:script|object|embed|option|style)/i,bu=new RegExp("<(?:"+bl+")[\\s/>]","i"),bv=/^(?:checkbox|radio)$/,bw=/checked\s*(?:[^=]|=\s*.checked.)/i,bx=/\/(java|ecma)script/i,by=/^\s*<!(?:\[CDATA\[|\-\-)|[\]\-]{2}>\s*$/g,bz={option:[1,"<select multiple='multiple'>","</select>"],legend:[1,"<fieldset>","</fieldset>"],thead:[1,"<table>","</table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],col:[2,"<table><tbody></tbody><colgroup>","</colgroup></table>"],area:[1,"<map>","</map>"],_default:[0,"",""]},bA=bk(e),bB=bA.appendChild(e.createElement("div"));bz.optgroup=bz.option,bz.tbody=bz.tfoot=bz.colgroup=bz.caption=bz.thead,bz.th=bz.td,p.support.htmlSerialize||(bz._default=[1,"X<div>","</div>"]),p.fn.extend({text:function(a){return p.access(this,function(a){return a===b?p.text(this):this.empty().append((this[0]&&this[0].ownerDocument||e).createTextNode(a))},null,a,arguments.length)},wrapAll:function(a){if(p.isFunction(a))return this.each(function(b){p(this).wrapAll(a.call(this,b))});if(this[0]){var b=p(a,this[0].ownerDocument).eq(0).clone(!0);this[0].parentNode&&b.insertBefore(this[0]),b.map(function(){var a=this;while(a.firstChild&&a.firstChild.nodeType===1)a=a.firstChild;return a}).append(this)}return this},wrapInner:function(a){return p.isFunction(a)?this.each(function(b){p(this).wrapInner(a.call(this,b))}):this.each(function(){var b=p(this),c=b.contents();c.length?c.wrapAll(a):b.append(a)})},wrap:function(a){var b=p.isFunction(a);return this.each(function(c){p(this).wrapAll(b?a.call(this,c):a)})},unwrap:function(){return this.parent().each(function(){p.nodeName(this,"body")||p(this).replaceWith(this.childNodes)}).end()},append:function(){return this.domManip(arguments,!0,function(a){(this.nodeType===1||this.nodeType===11)&&this.appendChild(a)})},prepend:function(){return this.domManip(arguments,!0,function(a){(this.nodeType===1||this.nodeType===11)&&this.insertBefore(a,this.firstChild)})},before:function(){if(!bh(this[0]))return this.domManip(arguments,!1,function(a){this.parentNode.insertBefore(a,this)});if(arguments.length){var a=p.clean(arguments);return this.pushStack(p.merge(a,this),"before",this.selector)}},after:function(){if(!bh(this[0]))return this.domManip(arguments,!1,function(a){this.parentNode.insertBefore(a,this.nextSibling)});if(arguments.length){var a=p.clean(arguments);return this.pushStack(p.merge(this,a),"after",this.selector)}},remove:function(a,b){var c,d=0;for(;(c=this[d])!=null;d++)if(!a||p.filter(a,[c]).length)!b&&c.nodeType===1&&(p.cleanData(c.getElementsByTagName("*")),p.cleanData([c])),c.parentNode&&c.parentNode.removeChild(c);return this},empty:function(){var a,b=0;for(;(a=this[b])!=null;b++){a.nodeType===1&&p.cleanData(a.getElementsByTagName("*"));while(a.firstChild)a.removeChild(a.firstChild)}return this},clone:function(a,b){return a=a==null?!1:a,b=b==null?a:b,this.map(function(){return p.clone(this,a,b)})},html:function(a){return p.access(this,function(a){var c=this[0]||{},d=0,e=this.length;if(a===b)return c.nodeType===1?c.innerHTML.replace(bm,""):b;if(typeof a=="string"&&!bs.test(a)&&(p.support.htmlSerialize||!bu.test(a))&&(p.support.leadingWhitespace||!bn.test(a))&&!bz[(bp.exec(a)||["",""])[1].toLowerCase()]){a=a.replace(bo,"<$1></$2>");try{for(;d<e;d++)c=this[d]||{},c.nodeType===1&&(p.cleanData(c.getElementsByTagName("*")),c.innerHTML=a);c=0}catch(f){}}c&&this.empty().append(a)},null,a,arguments.length)},replaceWith:function(a){return bh(this[0])?this.length?this.pushStack(p(p.isFunction(a)?a():a),"replaceWith",a):this:p.isFunction(a)?this.each(function(b){var c=p(this),d=c.html();c.replaceWith(a.call(this,b,d))}):(typeof a!="string"&&(a=p(a).detach()),this.each(function(){var b=this.nextSibling,c=this.parentNode;p(this).remove(),b?p(b).before(a):p(c).append(a)}))},detach:function(a){return this.remove(a,!0)},domManip:function(a,c,d){a=[].concat.apply([],a);var e,f,g,h,i=0,j=a[0],k=[],l=this.length;if(!p.support.checkClone&&l>1&&typeof j=="string"&&bw.test(j))return this.each(function(){p(this).domManip(a,c,d)});if(p.isFunction(j))return this.each(function(e){var f=p(this);a[0]=j.call(this,e,c?f.html():b),f.domManip(a,c,d)});if(this[0]){e=p.buildFragment(a,this,k),g=e.fragment,f=g.firstChild,g.childNodes.length===1&&(g=f);if(f){c=c&&p.nodeName(f,"tr");for(h=e.cacheable||l-1;i<l;i++)d.call(c&&p.nodeName(this[i],"table")?bC(this[i],"tbody"):this[i],i===h?g:p.clone(g,!0,!0))}g=f=null,k.length&&p.each(k,function(a,b){b.src?p.ajax?p.ajax({url:b.src,type:"GET",dataType:"script",async:!1,global:!1,"throws":!0}):p.error("no ajax"):p.globalEval((b.text||b.textContent||b.innerHTML||"").replace(by,"")),b.parentNode&&b.parentNode.removeChild(b)})}return this}}),p.buildFragment=function(a,c,d){var f,g,h,i=a[0];return c=c||e,c=!c.nodeType&&c[0]||c,c=c.ownerDocument||c,a.length===1&&typeof i=="string"&&i.length<512&&c===e&&i.charAt(0)==="<"&&!bt.test(i)&&(p.support.checkClone||!bw.test(i))&&(p.support.html5Clone||!bu.test(i))&&(g=!0,f=p.fragments[i],h=f!==b),f||(f=c.createDocumentFragment(),p.clean(a,c,f,d),g&&(p.fragments[i]=h&&f)),{fragment:f,cacheable:g}},p.fragments={},p.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(a,b){p.fn[a]=function(c){var d,e=0,f=[],g=p(c),h=g.length,i=this.length===1&&this[0].parentNode;if((i==null||i&&i.nodeType===11&&i.childNodes.length===1)&&h===1)return g[b](this[0]),this;for(;e<h;e++)d=(e>0?this.clone(!0):this).get(),p(g[e])[b](d),f=f.concat(d);return this.pushStack(f,a,g.selector)}}),p.extend({clone:function(a,b,c){var d,e,f,g;p.support.html5Clone||p.isXMLDoc(a)||!bu.test("<"+a.nodeName+">")?g=a.cloneNode(!0):(bB.innerHTML=a.outerHTML,bB.removeChild(g=bB.firstChild));if((!p.support.noCloneEvent||!p.support.noCloneChecked)&&(a.nodeType===1||a.nodeType===11)&&!p.isXMLDoc(a)){bE(a,g),d=bF(a),e=bF(g);for(f=0;d[f];++f)e[f]&&bE(d[f],e[f])}if(b){bD(a,g);if(c){d=bF(a),e=bF(g);for(f=0;d[f];++f)bD(d[f],e[f])}}return d=e=null,g},clean:function(a,b,c,d){var f,g,h,i,j,k,l,m,n,o,q,r,s=b===e&&bA,t=[];if(!b||typeof b.createDocumentFragment=="undefined")b=e;for(f=0;(h=a[f])!=null;f++){typeof h=="number"&&(h+="");if(!h)continue;if(typeof h=="string")if(!br.test(h))h=b.createTextNode(h);else{s=s||bk(b),l=b.createElement("div"),s.appendChild(l),h=h.replace(bo,"<$1></$2>"),i=(bp.exec(h)||["",""])[1].toLowerCase(),j=bz[i]||bz._default,k=j[0],l.innerHTML=j[1]+h+j[2];while(k--)l=l.lastChild;if(!p.support.tbody){m=bq.test(h),n=i==="table"&&!m?l.firstChild&&l.firstChild.childNodes:j[1]==="<table>"&&!m?l.childNodes:[];for(g=n.length-1;g>=0;--g)p.nodeName(n[g],"tbody")&&!n[g].childNodes.length&&n[g].parentNode.removeChild(n[g])}!p.support.leadingWhitespace&&bn.test(h)&&l.insertBefore(b.createTextNode(bn.exec(h)[0]),l.firstChild),h=l.childNodes,l.parentNode.removeChild(l)}h.nodeType?t.push(h):p.merge(t,h)}l&&(h=l=s=null);if(!p.support.appendChecked)for(f=0;(h=t[f])!=null;f++)p.nodeName(h,"input")?bG(h):typeof h.getElementsByTagName!="undefined"&&p.grep(h.getElementsByTagName("input"),bG);if(c){q=function(a){if(!a.type||bx.test(a.type))return d?d.push(a.parentNode?a.parentNode.removeChild(a):a):c.appendChild(a)};for(f=0;(h=t[f])!=null;f++)if(!p.nodeName(h,"script")||!q(h))c.appendChild(h),typeof h.getElementsByTagName!="undefined"&&(r=p.grep(p.merge([],h.getElementsByTagName("script")),q),t.splice.apply(t,[f+1,0].concat(r)),f+=r.length)}return t},cleanData:function(a,b){var c,d,e,f,g=0,h=p.expando,i=p.cache,j=p.support.deleteExpando,k=p.event.special;for(;(e=a[g])!=null;g++)if(b||p.acceptData(e)){d=e[h],c=d&&i[d];if(c){if(c.events)for(f in c.events)k[f]?p.event.remove(e,f):p.removeEvent(e,f,c.handle);i[d]&&(delete i[d],j?delete e[h]:e.removeAttribute?e.removeAttribute(h):e[h]=null,p.deletedIds.push(d))}}}}),function(){var a,b;p.uaMatch=function(a){a=a.toLowerCase();var b=/(chrome)[ \/]([\w.]+)/.exec(a)||/(webkit)[ \/]([\w.]+)/.exec(a)||/(opera)(?:.*version|)[ \/]([\w.]+)/.exec(a)||/(msie) ([\w.]+)/.exec(a)||a.indexOf("compatible")<0&&/(mozilla)(?:.*? rv:([\w.]+)|)/.exec(a)||[];return{browser:b[1]||"",version:b[2]||"0"}},a=p.uaMatch(g.userAgent),b={},a.browser&&(b[a.browser]=!0,b.version=a.version),b.chrome?b.webkit=!0:b.webkit&&(b.safari=!0),p.browser=b,p.sub=function(){function a(b,c){return new a.fn.init(b,c)}p.extend(!0,a,this),a.superclass=this,a.fn=a.prototype=this(),a.fn.constructor=a,a.sub=this.sub,a.fn.init=function c(c,d){return d&&d instanceof p&&!(d instanceof a)&&(d=a(d)),p.fn.init.call(this,c,d,b)},a.fn.init.prototype=a.fn;var b=a(e);return a}}();var bH,bI,bJ,bK=/alpha\([^)]*\)/i,bL=/opacity=([^)]*)/,bM=/^(top|right|bottom|left)$/,bN=/^(none|table(?!-c[ea]).+)/,bO=/^margin/,bP=new RegExp("^("+q+")(.*)$","i"),bQ=new RegExp("^("+q+")(?!px)[a-z%]+$","i"),bR=new RegExp("^([-+])=("+q+")","i"),bS={},bT={position:"absolute",visibility:"hidden",display:"block"},bU={letterSpacing:0,fontWeight:400},bV=["Top","Right","Bottom","Left"],bW=["Webkit","O","Moz","ms"],bX=p.fn.toggle;p.fn.extend({css:function(a,c){return p.access(this,function(a,c,d){return d!==b?p.style(a,c,d):p.css(a,c)},a,c,arguments.length>1)},show:function(){return b$(this,!0)},hide:function(){return b$(this)},toggle:function(a,b){var c=typeof a=="boolean";return p.isFunction(a)&&p.isFunction(b)?bX.apply(this,arguments):this.each(function(){(c?a:bZ(this))?p(this).show():p(this).hide()})}}),p.extend({cssHooks:{opacity:{get:function(a,b){if(b){var c=bH(a,"opacity");return c===""?"1":c}}}},cssNumber:{fillOpacity:!0,fontWeight:!0,lineHeight:!0,opacity:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{"float":p.support.cssFloat?"cssFloat":"styleFloat"},style:function(a,c,d,e){if(!a||a.nodeType===3||a.nodeType===8||!a.style)return;var f,g,h,i=p.camelCase(c),j=a.style;c=p.cssProps[i]||(p.cssProps[i]=bY(j,i)),h=p.cssHooks[c]||p.cssHooks[i];if(d===b)return h&&"get"in h&&(f=h.get(a,!1,e))!==b?f:j[c];g=typeof d,g==="string"&&(f=bR.exec(d))&&(d=(f[1]+1)*f[2]+parseFloat(p.css(a,c)),g="number");if(d==null||g==="number"&&isNaN(d))return;g==="number"&&!p.cssNumber[i]&&(d+="px");if(!h||!("set"in h)||(d=h.set(a,d,e))!==b)try{j[c]=d}catch(k){}},css:function(a,c,d,e){var f,g,h,i=p.camelCase(c);return c=p.cssProps[i]||(p.cssProps[i]=bY(a.style,i)),h=p.cssHooks[c]||p.cssHooks[i],h&&"get"in h&&(f=h.get(a,!0,e)),f===b&&(f=bH(a,c)),f==="normal"&&c in bU&&(f=bU[c]),d||e!==b?(g=parseFloat(f),d||p.isNumeric(g)?g||0:f):f},swap:function(a,b,c){var d,e,f={};for(e in b)f[e]=a.style[e],a.style[e]=b[e];d=c.call(a);for(e in b)a.style[e]=f[e];return d}}),a.getComputedStyle?bH=function(b,c){var d,e,f,g,h=a.getComputedStyle(b,null),i=b.style;return h&&(d=h[c],d===""&&!p.contains(b.ownerDocument,b)&&(d=p.style(b,c)),bQ.test(d)&&bO.test(c)&&(e=i.width,f=i.minWidth,g=i.maxWidth,i.minWidth=i.maxWidth=i.width=d,d=h.width,i.width=e,i.minWidth=f,i.maxWidth=g)),d}:e.documentElement.currentStyle&&(bH=function(a,b){var c,d,e=a.currentStyle&&a.currentStyle[b],f=a.style;return e==null&&f&&f[b]&&(e=f[b]),bQ.test(e)&&!bM.test(b)&&(c=f.left,d=a.runtimeStyle&&a.runtimeStyle.left,d&&(a.runtimeStyle.left=a.currentStyle.left),f.left=b==="fontSize"?"1em":e,e=f.pixelLeft+"px",f.left=c,d&&(a.runtimeStyle.left=d)),e===""?"auto":e}),p.each(["height","width"],function(a,b){p.cssHooks[b]={get:function(a,c,d){if(c)return a.offsetWidth===0&&bN.test(bH(a,"display"))?p.swap(a,bT,function(){return cb(a,b,d)}):cb(a,b,d)},set:function(a,c,d){return b_(a,c,d?ca(a,b,d,p.support.boxSizing&&p.css(a,"boxSizing")==="border-box"):0)}}}),p.support.opacity||(p.cssHooks.opacity={get:function(a,b){return bL.test((b&&a.currentStyle?a.currentStyle.filter:a.style.filter)||"")?.01*parseFloat(RegExp.$1)+"":b?"1":""},set:function(a,b){var c=a.style,d=a.currentStyle,e=p.isNumeric(b)?"alpha(opacity="+b*100+")":"",f=d&&d.filter||c.filter||"";c.zoom=1;if(b>=1&&p.trim(f.replace(bK,""))===""&&c.removeAttribute){c.removeAttribute("filter");if(d&&!d.filter)return}c.filter=bK.test(f)?f.replace(bK,e):f+" "+e}}),p(function(){p.support.reliableMarginRight||(p.cssHooks.marginRight={get:function(a,b){return p.swap(a,{display:"inline-block"},function(){if(b)return bH(a,"marginRight")})}}),!p.support.pixelPosition&&p.fn.position&&p.each(["top","left"],function(a,b){p.cssHooks[b]={get:function(a,c){if(c){var d=bH(a,b);return bQ.test(d)?p(a).position()[b]+"px":d}}}})}),p.expr&&p.expr.filters&&(p.expr.filters.hidden=function(a){return a.offsetWidth===0&&a.offsetHeight===0||!p.support.reliableHiddenOffsets&&(a.style&&a.style.display||bH(a,"display"))==="none"},p.expr.filters.visible=function(a){return!p.expr.filters.hidden(a)}),p.each({margin:"",padding:"",border:"Width"},function(a,b){p.cssHooks[a+b]={expand:function(c){var d,e=typeof c=="string"?c.split(" "):[c],f={};for(d=0;d<4;d++)f[a+bV[d]+b]=e[d]||e[d-2]||e[0];return f}},bO.test(a)||(p.cssHooks[a+b].set=b_)});var cd=/%20/g,ce=/\[\]$/,cf=/\r?\n/g,cg=/^(?:color|date|datetime|datetime-local|email|hidden|month|number|password|range|search|tel|text|time|url|week)$/i,ch=/^(?:select|textarea)/i;p.fn.extend({serialize:function(){return p.param(this.serializeArray())},serializeArray:function(){return this.map(function(){return this.elements?p.makeArray(this.elements):this}).filter(function(){return this.name&&!this.disabled&&(this.checked||ch.test(this.nodeName)||cg.test(this.type))}).map(function(a,b){var c=p(this).val();return c==null?null:p.isArray(c)?p.map(c,function(a,c){return{name:b.name,value:a.replace(cf,"\r\n")}}):{name:b.name,value:c.replace(cf,"\r\n")}}).get()}}),p.param=function(a,c){var d,e=[],f=function(a,b){b=p.isFunction(b)?b():b==null?"":b,e[e.length]=encodeURIComponent(a)+"="+encodeURIComponent(b)};c===b&&(c=p.ajaxSettings&&p.ajaxSettings.traditional);if(p.isArray(a)||a.jquery&&!p.isPlainObject(a))p.each(a,function(){f(this.name,this.value)});else for(d in a)ci(d,a[d],c,f);return e.join("&").replace(cd,"+")};var cj,ck,cl=/#.*$/,cm=/^(.*?):[ \t]*([^\r\n]*)\r?$/mg,cn=/^(?:about|app|app\-storage|.+\-extension|file|res|widget):$/,co=/^(?:GET|HEAD)$/,cp=/^\/\//,cq=/\?/,cr=/<script\b[^<]*(?:(?!<\/script>)<[^<]*)*<\/script>/gi,cs=/([?&])_=[^&]*/,ct=/^([\w\+\.\-]+:)(?:\/\/([^\/?#:]*)(?::(\d+)|)|)/,cu=p.fn.load,cv={},cw={},cx=["*/"]+["*"];try{ck=f.href}catch(cy){ck=e.createElement("a"),ck.href="",ck=ck.href}cj=ct.exec(ck.toLowerCase())||[],p.fn.load=function(a,c,d){if(typeof a!="string"&&cu)return cu.apply(this,arguments);if(!this.length)return this;var e,f,g,h=this,i=a.indexOf(" ");return i>=0&&(e=a.slice(i,a.length),a=a.slice(0,i)),p.isFunction(c)?(d=c,c=b):c&&typeof c=="object"&&(f="POST"),p.ajax({url:a,type:f,dataType:"html",data:c,complete:function(a,b){d&&h.each(d,g||[a.responseText,b,a])}}).done(function(a){g=arguments,h.html(e?p("<div>").append(a.replace(cr,"")).find(e):a)}),this},p.each("ajaxStart ajaxStop ajaxComplete ajaxError ajaxSuccess ajaxSend".split(" "),function(a,b){p.fn[b]=function(a){return this.on(b,a)}}),p.each(["get","post"],function(a,c){p[c]=function(a,d,e,f){return p.isFunction(d)&&(f=f||e,e=d,d=b),p.ajax({type:c,url:a,data:d,success:e,dataType:f})}}),p.extend({getScript:function(a,c){return p.get(a,b,c,"script")},getJSON:function(a,b,c){return p.get(a,b,c,"json")},ajaxSetup:function(a,b){return b?cB(a,p.ajaxSettings):(b=a,a=p.ajaxSettings),cB(a,b),a},ajaxSettings:{url:ck,isLocal:cn.test(cj[1]),global:!0,type:"GET",contentType:"application/x-www-form-urlencoded; charset=UTF-8",processData:!0,async:!0,accepts:{xml:"application/xml, text/xml",html:"text/html",text:"text/plain",json:"application/json, text/javascript","*":cx},contents:{xml:/xml/,html:/html/,json:/json/},responseFields:{xml:"responseXML",text:"responseText"},converters:{"* text":a.String,"text html":!0,"text json":p.parseJSON,"text xml":p.parseXML},flatOptions:{context:!0,url:!0}},ajaxPrefilter:cz(cv),ajaxTransport:cz(cw),ajax:function(a,c){function y(a,c,f,i){var k,s,t,u,w,y=c;if(v===2)return;v=2,h&&clearTimeout(h),g=b,e=i||"",x.readyState=a>0?4:0,f&&(u=cC(l,x,f));if(a>=200&&a<300||a===304)l.ifModified&&(w=x.getResponseHeader("Last-Modified"),w&&(p.lastModified[d]=w),w=x.getResponseHeader("Etag"),w&&(p.etag[d]=w)),a===304?(y="notmodified",k=!0):(k=cD(l,u),y=k.state,s=k.data,t=k.error,k=!t);else{t=y;if(!y||a)y="error",a<0&&(a=0)}x.status=a,x.statusText=(c||y)+"",k?o.resolveWith(m,[s,y,x]):o.rejectWith(m,[x,y,t]),x.statusCode(r),r=b,j&&n.trigger("ajax"+(k?"Success":"Error"),[x,l,k?s:t]),q.fireWith(m,[x,y]),j&&(n.trigger("ajaxComplete",[x,l]),--p.active||p.event.trigger("ajaxStop"))}typeof a=="object"&&(c=a,a=b),c=c||{};var d,e,f,g,h,i,j,k,l=p.ajaxSetup({},c),m=l.context||l,n=m!==l&&(m.nodeType||m instanceof p)?p(m):p.event,o=p.Deferred(),q=p.Callbacks("once memory"),r=l.statusCode||{},t={},u={},v=0,w="canceled",x={readyState:0,setRequestHeader:function(a,b){if(!v){var c=a.toLowerCase();a=u[c]=u[c]||a,t[a]=b}return this},getAllResponseHeaders:function(){return v===2?e:null},getResponseHeader:function(a){var c;if(v===2){if(!f){f={};while(c=cm.exec(e))f[c[1].toLowerCase()]=c[2]}c=f[a.toLowerCase()]}return c===b?null:c},overrideMimeType:function(a){return v||(l.mimeType=a),this},abort:function(a){return a=a||w,g&&g.abort(a),y(0,a),this}};o.promise(x),x.success=x.done,x.error=x.fail,x.complete=q.add,x.statusCode=function(a){if(a){var b;if(v<2)for(b in a)r[b]=[r[b],a[b]];else b=a[x.status],x.always(b)}return this},l.url=((a||l.url)+"").replace(cl,"").replace(cp,cj[1]+"//"),l.dataTypes=p.trim(l.dataType||"*").toLowerCase().split(s),l.crossDomain==null&&(i=ct.exec(l.url.toLowerCase())||!1,l.crossDomain=i&&i.join(":")+(i[3]?"":i[1]==="http:"?80:443)!==cj.join(":")+(cj[3]?"":cj[1]==="http:"?80:443)),l.data&&l.processData&&typeof l.data!="string"&&(l.data=p.param(l.data,l.traditional)),cA(cv,l,c,x);if(v===2)return x;j=l.global,l.type=l.type.toUpperCase(),l.hasContent=!co.test(l.type),j&&p.active++===0&&p.event.trigger("ajaxStart");if(!l.hasContent){l.data&&(l.url+=(cq.test(l.url)?"&":"?")+l.data,delete l.data),d=l.url;if(l.cache===!1){var z=p.now(),A=l.url.replace(cs,"$1_="+z);l.url=A+(A===l.url?(cq.test(l.url)?"&":"?")+"_="+z:"")}}(l.data&&l.hasContent&&l.contentType!==!1||c.contentType)&&x.setRequestHeader("Content-Type",l.contentType),l.ifModified&&(d=d||l.url,p.lastModified[d]&&x.setRequestHeader("If-Modified-Since",p.lastModified[d]),p.etag[d]&&x.setRequestHeader("If-None-Match",p.etag[d])),x.setRequestHeader("Accept",l.dataTypes[0]&&l.accepts[l.dataTypes[0]]?l.accepts[l.dataTypes[0]]+(l.dataTypes[0]!=="*"?", "+cx+"; q=0.01":""):l.accepts["*"]);for(k in l.headers)x.setRequestHeader(k,l.headers[k]);if(!l.beforeSend||l.beforeSend.call(m,x,l)!==!1&&v!==2){w="abort";for(k in{success:1,error:1,complete:1})x[k](l[k]);g=cA(cw,l,c,x);if(!g)y(-1,"No Transport");else{x.readyState=1,j&&n.trigger("ajaxSend",[x,l]),l.async&&l.timeout>0&&(h=setTimeout(function(){x.abort("timeout")},l.timeout));try{v=1,g.send(t,y)}catch(B){if(v<2)y(-1,B);else throw B}}return x}return x.abort()},active:0,lastModified:{},etag:{}});var cE=[],cF=/\?/,cG=/(=)\?(?=&|$)|\?\?/,cH=p.now();p.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var a=cE.pop()||p.expando+"_"+cH++;return this[a]=!0,a}}),p.ajaxPrefilter("json jsonp",function(c,d,e){var f,g,h,i=c.data,j=c.url,k=c.jsonp!==!1,l=k&&cG.test(j),m=k&&!l&&typeof i=="string"&&!(c.contentType||"").indexOf("application/x-www-form-urlencoded")&&cG.test(i);if(c.dataTypes[0]==="jsonp"||l||m)return f=c.jsonpCallback=p.isFunction(c.jsonpCallback)?c.jsonpCallback():c.jsonpCallback,g=a[f],l?c.url=j.replace(cG,"$1"+f):m?c.data=i.replace(cG,"$1"+f):k&&(c.url+=(cF.test(j)?"&":"?")+c.jsonp+"="+f),c.converters["script json"]=function(){return h||p.error(f+" was not called"),h[0]},c.dataTypes[0]="json",a[f]=function(){h=arguments},e.always(function(){a[f]=g,c[f]&&(c.jsonpCallback=d.jsonpCallback,cE.push(f)),h&&p.isFunction(g)&&g(h[0]),h=g=b}),"script"}),p.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/javascript|ecmascript/},converters:{"text script":function(a){return p.globalEval(a),a}}}),p.ajaxPrefilter("script",function(a){a.cache===b&&(a.cache=!1),a.crossDomain&&(a.type="GET",a.global=!1)}),p.ajaxTransport("script",function(a){if(a.crossDomain){var c,d=e.head||e.getElementsByTagName("head")[0]||e.documentElement;return{send:function(f,g){c=e.createElement("script"),c.async="async",a.scriptCharset&&(c.charset=a.scriptCharset),c.src=a.url,c.onload=c.onreadystatechange=function(a,e){if(e||!c.readyState||/loaded|complete/.test(c.readyState))c.onload=c.onreadystatechange=null,d&&c.parentNode&&d.removeChild(c),c=b,e||g(200,"success")},d.insertBefore(c,d.firstChild)},abort:function(){c&&c.onload(0,1)}}}});var cI,cJ=a.ActiveXObject?function(){for(var a in cI)cI[a](0,1)}:!1,cK=0;p.ajaxSettings.xhr=a.ActiveXObject?function(){return!this.isLocal&&cL()||cM()}:cL,function(a){p.extend(p.support,{ajax:!!a,cors:!!a&&"withCredentials"in a})}(p.ajaxSettings.xhr()),p.support.ajax&&p.ajaxTransport(function(c){if(!c.crossDomain||p.support.cors){var d;return{send:function(e,f){var g,h,i=c.xhr();c.username?i.open(c.type,c.url,c.async,c.username,c.password):i.open(c.type,c.url,c.async);if(c.xhrFields)for(h in c.xhrFields)i[h]=c.xhrFields[h];c.mimeType&&i.overrideMimeType&&i.overrideMimeType(c.mimeType),!c.crossDomain&&!e["X-Requested-With"]&&(e["X-Requested-With"]="XMLHttpRequest");try{for(h in e)i.setRequestHeader(h,e[h])}catch(j){}i.send(c.hasContent&&c.data||null),d=function(a,e){var h,j,k,l,m;try{if(d&&(e||i.readyState===4)){d=b,g&&(i.onreadystatechange=p.noop,cJ&&delete cI[g]);if(e)i.readyState!==4&&i.abort();else{h=i.status,k=i.getAllResponseHeaders(),l={},m=i.responseXML,m&&m.documentElement&&(l.xml=m);try{l.text=i.responseText}catch(a){}try{j=i.statusText}catch(n){j=""}!h&&c.isLocal&&!c.crossDomain?h=l.text?200:404:h===1223&&(h=204)}}}catch(o){e||f(-1,o)}l&&f(h,j,l,k)},c.async?i.readyState===4?setTimeout(d,0):(g=++cK,cJ&&(cI||(cI={},p(a).unload(cJ)),cI[g]=d),i.onreadystatechange=d):d()},abort:function(){d&&d(0,1)}}}});var cN,cO,cP=/^(?:toggle|show|hide)$/,cQ=new RegExp("^(?:([-+])=|)("+q+")([a-z%]*)$","i"),cR=/queueHooks$/,cS=[cY],cT={"*":[function(a,b){var c,d,e=this.createTween(a,b),f=cQ.exec(b),g=e.cur(),h=+g||0,i=1,j=20;if(f){c=+f[2],d=f[3]||(p.cssNumber[a]?"":"px");if(d!=="px"&&h){h=p.css(e.elem,a,!0)||c||1;do i=i||".5",h=h/i,p.style(e.elem,a,h+d);while(i!==(i=e.cur()/g)&&i!==1&&--j)}e.unit=d,e.start=h,e.end=f[1]?h+(f[1]+1)*c:c}return e}]};p.Animation=p.extend(cW,{tweener:function(a,b){p.isFunction(a)?(b=a,a=["*"]):a=a.split(" ");var c,d=0,e=a.length;for(;d<e;d++)c=a[d],cT[c]=cT[c]||[],cT[c].unshift(b)},prefilter:function(a,b){b?cS.unshift(a):cS.push(a)}}),p.Tween=cZ,cZ.prototype={constructor:cZ,init:function(a,b,c,d,e,f){this.elem=a,this.prop=c,this.easing=e||"swing",this.options=b,this.start=this.now=this.cur(),this.end=d,this.unit=f||(p.cssNumber[c]?"":"px")},cur:function(){var a=cZ.propHooks[this.prop];return a&&a.get?a.get(this):cZ.propHooks._default.get(this)},run:function(a){var b,c=cZ.propHooks[this.prop];return this.options.duration?this.pos=b=p.easing[this.easing](a,this.options.duration*a,0,1,this.options.duration):this.pos=b=a,this.now=(this.end-this.start)*b+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),c&&c.set?c.set(this):cZ.propHooks._default.set(this),this}},cZ.prototype.init.prototype=cZ.prototype,cZ.propHooks={_default:{get:function(a){var b;return a.elem[a.prop]==null||!!a.elem.style&&a.elem.style[a.prop]!=null?(b=p.css(a.elem,a.prop,!1,""),!b||b==="auto"?0:b):a.elem[a.prop]},set:function(a){p.fx.step[a.prop]?p.fx.step[a.prop](a):a.elem.style&&(a.elem.style[p.cssProps[a.prop]]!=null||p.cssHooks[a.prop])?p.style(a.elem,a.prop,a.now+a.unit):a.elem[a.prop]=a.now}}},cZ.propHooks.scrollTop=cZ.propHooks.scrollLeft={set:function(a){a.elem.nodeType&&a.elem.parentNode&&(a.elem[a.prop]=a.now)}},p.each(["toggle","show","hide"],function(a,b){var c=p.fn[b];p.fn[b]=function(d,e,f){return d==null||typeof d=="boolean"||!a&&p.isFunction(d)&&p.isFunction(e)?c.apply(this,arguments):this.animate(c$(b,!0),d,e,f)}}),p.fn.extend({fadeTo:function(a,b,c,d){return this.filter(bZ).css("opacity",0).show().end().animate({opacity:b},a,c,d)},animate:function(a,b,c,d){var e=p.isEmptyObject(a),f=p.speed(b,c,d),g=function(){var b=cW(this,p.extend({},a),f);e&&b.stop(!0)};return e||f.queue===!1?this.each(g):this.queue(f.queue,g)},stop:function(a,c,d){var e=function(a){var b=a.stop;delete a.stop,b(d)};return typeof a!="string"&&(d=c,c=a,a=b),c&&a!==!1&&this.queue(a||"fx",[]),this.each(function(){var b=!0,c=a!=null&&a+"queueHooks",f=p.timers,g=p._data(this);if(c)g[c]&&g[c].stop&&e(g[c]);else for(c in g)g[c]&&g[c].stop&&cR.test(c)&&e(g[c]);for(c=f.length;c--;)f[c].elem===this&&(a==null||f[c].queue===a)&&(f[c].anim.stop(d),b=!1,f.splice(c,1));(b||!d)&&p.dequeue(this,a)})}}),p.each({slideDown:c$("show"),slideUp:c$("hide"),slideToggle:c$("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(a,b){p.fn[a]=function(a,c,d){return this.animate(b,a,c,d)}}),p.speed=function(a,b,c){var d=a&&typeof a=="object"?p.extend({},a):{complete:c||!c&&b||p.isFunction(a)&&a,duration:a,easing:c&&b||b&&!p.isFunction(b)&&b};d.duration=p.fx.off?0:typeof d.duration=="number"?d.duration:d.duration in p.fx.speeds?p.fx.speeds[d.duration]:p.fx.speeds._default;if(d.queue==null||d.queue===!0)d.queue="fx";return d.old=d.complete,d.complete=function(){p.isFunction(d.old)&&d.old.call(this),d.queue&&p.dequeue(this,d.queue)},d},p.easing={linear:function(a){return a},swing:function(a){return.5-Math.cos(a*Math.PI)/2}},p.timers=[],p.fx=cZ.prototype.init,p.fx.tick=function(){var a,b=p.timers,c=0;for(;c<b.length;c++)a=b[c],!a()&&b[c]===a&&b.splice(c--,1);b.length||p.fx.stop()},p.fx.timer=function(a){a()&&p.timers.push(a)&&!cO&&(cO=setInterval(p.fx.tick,p.fx.interval))},p.fx.interval=13,p.fx.stop=function(){clearInterval(cO),cO=null},p.fx.speeds={slow:600,fast:200,_default:400},p.fx.step={},p.expr&&p.expr.filters&&(p.expr.filters.animated=function(a){return p.grep(p.timers,function(b){return a===b.elem}).length});var c_=/^(?:body|html)$/i;p.fn.offset=function(a){if(arguments.length)return a===b?this:this.each(function(b){p.offset.setOffset(this,a,b)});var c,d,e,f,g,h,i,j={top:0,left:0},k=this[0],l=k&&k.ownerDocument;if(!l)return;return(d=l.body)===k?p.offset.bodyOffset(k):(c=l.documentElement,p.contains(c,k)?(typeof k.getBoundingClientRect!="undefined"&&(j=k.getBoundingClientRect()),e=da(l),f=c.clientTop||d.clientTop||0,g=c.clientLeft||d.clientLeft||0,h=e.pageYOffset||c.scrollTop,i=e.pageXOffset||c.scrollLeft,{top:j.top+h-f,left:j.left+i-g}):j)},p.offset={bodyOffset:function(a){var b=a.offsetTop,c=a.offsetLeft;return p.support.doesNotIncludeMarginInBodyOffset&&(b+=parseFloat(p.css(a,"marginTop"))||0,c+=parseFloat(p.css(a,"marginLeft"))||0),{top:b,left:c}},setOffset:function(a,b,c){var d=p.css(a,"position");d==="static"&&(a.style.position="relative");var e=p(a),f=e.offset(),g=p.css(a,"top"),h=p.css(a,"left"),i=(d==="absolute"||d==="fixed")&&p.inArray("auto",[g,h])>-1,j={},k={},l,m;i?(k=e.position(),l=k.top,m=k.left):(l=parseFloat(g)||0,m=parseFloat(h)||0),p.isFunction(b)&&(b=b.call(a,c,f)),b.top!=null&&(j.top=b.top-f.top+l),b.left!=null&&(j.left=b.left-f.left+m),"using"in b?b.using.call(a,j):e.css(j)}},p.fn.extend({position:function(){if(!this[0])return;var a=this[0],b=this.offsetParent(),c=this.offset(),d=c_.test(b[0].nodeName)?{top:0,left:0}:b.offset();return c.top-=parseFloat(p.css(a,"marginTop"))||0,c.left-=parseFloat(p.css(a,"marginLeft"))||0,d.top+=parseFloat(p.css(b[0],"borderTopWidth"))||0,d.left+=parseFloat(p.css(b[0],"borderLeftWidth"))||0,{top:c.top-d.top,left:c.left-d.left}},offsetParent:function(){return this.map(function(){var a=this.offsetParent||e.body;while(a&&!c_.test(a.nodeName)&&p.css(a,"position")==="static")a=a.offsetParent;return a||e.body})}}),p.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(a,c){var d=/Y/.test(c);p.fn[a]=function(e){return p.access(this,function(a,e,f){var g=da(a);if(f===b)return g?c in g?g[c]:g.document.documentElement[e]:a[e];g?g.scrollTo(d?p(g).scrollLeft():f,d?f:p(g).scrollTop()):a[e]=f},a,e,arguments.length,null)}}),p.each({Height:"height",Width:"width"},function(a,c){p.each({padding:"inner"+a,content:c,"":"outer"+a},function(d,e){p.fn[e]=function(e,f){var g=arguments.length&&(d||typeof e!="boolean"),h=d||(e===!0||f===!0?"margin":"border");return p.access(this,function(c,d,e){var f;return p.isWindow(c)?c.document.documentElement["client"+a]:c.nodeType===9?(f=c.documentElement,Math.max(c.body["scroll"+a],f["scroll"+a],c.body["offset"+a],f["offset"+a],f["client"+a])):e===b?p.css(c,d,e,h):p.style(c,d,e,h)},c,g?e:b,g,null)}})}),a.jQuery=a.$=p,typeof define=="function"&&define.amd&&define.amd.jQuery&&define("jquery",[],function(){return p})})(window); 
 $.fn.bounce = function()
{
    var n = 4;
    var intence = 2;
    var height = $(this).height();
    $(this).stop(true, true);
    for(var i = 0; i <= n; i++) {
        $(this).animate({
            'line-height':((i%2===0 ? height + (n-i)*intence : height - (n-i)*intence)+'px')
        },(80+i*5))
    }
};



/*! jQuery Color v@2.1.2 http://github.com/jquery/jquery-color | jquery.org/license */
(function(a,b){function m(a,b,c){var d=h[b.type]||{};return a==null?c||!b.def?null:b.def:(a=d.floor?~~a:parseFloat(a),isNaN(a)?b.def:d.mod?(a+d.mod)%d.mod:0>a?0:d.max<a?d.max:a)}function n(b){var c=f(),d=c._rgba=[];return b=b.toLowerCase(),l(e,function(a,e){var f,h=e.re.exec(b),i=h&&e.parse(h),j=e.space||"rgba";if(i)return f=c[j](i),c[g[j].cache]=f[g[j].cache],d=c._rgba=f._rgba,!1}),d.length?(d.join()==="0,0,0,0"&&a.extend(d,k.transparent),c):k[b]}function o(a,b,c){return c=(c+1)%1,c*6<1?a+(b-a)*c*6:c*2<1?b:c*3<2?a+(b-a)*(2/3-c)*6:a}var c="backgroundColor borderBottomColor borderLeftColor borderRightColor borderTopColor color columnRuleColor outlineColor textDecorationColor textEmphasisColor",d=/^([\-+])=\s*(\d+\.?\d*)/,e=[{re:/rgba?\(\s*(\d{1,3})\s*,\s*(\d{1,3})\s*,\s*(\d{1,3})\s*(?:,\s*(\d?(?:\.\d+)?)\s*)?\)/,parse:function(a){return[a[1],a[2],a[3],a[4]]}},{re:/rgba?\(\s*(\d+(?:\.\d+)?)\%\s*,\s*(\d+(?:\.\d+)?)\%\s*,\s*(\d+(?:\.\d+)?)\%\s*(?:,\s*(\d?(?:\.\d+)?)\s*)?\)/,parse:function(a){return[a[1]*2.55,a[2]*2.55,a[3]*2.55,a[4]]}},{re:/#([a-f0-9]{2})([a-f0-9]{2})([a-f0-9]{2})/,parse:function(a){return[parseInt(a[1],16),parseInt(a[2],16),parseInt(a[3],16)]}},{re:/#([a-f0-9])([a-f0-9])([a-f0-9])/,parse:function(a){return[parseInt(a[1]+a[1],16),parseInt(a[2]+a[2],16),parseInt(a[3]+a[3],16)]}},{re:/hsla?\(\s*(\d+(?:\.\d+)?)\s*,\s*(\d+(?:\.\d+)?)\%\s*,\s*(\d+(?:\.\d+)?)\%\s*(?:,\s*(\d?(?:\.\d+)?)\s*)?\)/,space:"hsla",parse:function(a){return[a[1],a[2]/100,a[3]/100,a[4]]}}],f=a.Color=function(b,c,d,e){return new a.Color.fn.parse(b,c,d,e)},g={rgba:{props:{red:{idx:0,type:"byte"},green:{idx:1,type:"byte"},blue:{idx:2,type:"byte"}}},hsla:{props:{hue:{idx:0,type:"degrees"},saturation:{idx:1,type:"percent"},lightness:{idx:2,type:"percent"}}}},h={"byte":{floor:!0,max:255},percent:{max:1},degrees:{mod:360,floor:!0}},i=f.support={},j=a("<p>")[0],k,l=a.each;j.style.cssText="background-color:rgba(1,1,1,.5)",i.rgba=j.style.backgroundColor.indexOf("rgba")>-1,l(g,function(a,b){b.cache="_"+a,b.props.alpha={idx:3,type:"percent",def:1}}),f.fn=a.extend(f.prototype,{parse:function(c,d,e,h){if(c===b)return this._rgba=[null,null,null,null],this;if(c.jquery||c.nodeType)c=a(c).css(d),d=b;var i=this,j=a.type(c),o=this._rgba=[];d!==b&&(c=[c,d,e,h],j="array");if(j==="string")return this.parse(n(c)||k._default);if(j==="array")return l(g.rgba.props,function(a,b){o[b.idx]=m(c[b.idx],b)}),this;if(j==="object")return c instanceof f?l(g,function(a,b){c[b.cache]&&(i[b.cache]=c[b.cache].slice())}):l(g,function(b,d){var e=d.cache;l(d.props,function(a,b){if(!i[e]&&d.to){if(a==="alpha"||c[a]==null)return;i[e]=d.to(i._rgba)}i[e][b.idx]=m(c[a],b,!0)}),i[e]&&a.inArray(null,i[e].slice(0,3))<0&&(i[e][3]=1,d.from&&(i._rgba=d.from(i[e])))}),this},is:function(a){var b=f(a),c=!0,d=this;return l(g,function(a,e){var f,g=b[e.cache];return g&&(f=d[e.cache]||e.to&&e.to(d._rgba)||[],l(e.props,function(a,b){if(g[b.idx]!=null)return c=g[b.idx]===f[b.idx],c})),c}),c},_space:function(){var a=[],b=this;return l(g,function(c,d){b[d.cache]&&a.push(c)}),a.pop()},transition:function(a,b){var c=f(a),d=c._space(),e=g[d],i=this.alpha()===0?f("transparent"):this,j=i[e.cache]||e.to(i._rgba),k=j.slice();return c=c[e.cache],l(e.props,function(a,d){var e=d.idx,f=j[e],g=c[e],i=h[d.type]||{};if(g===null)return;f===null?k[e]=g:(i.mod&&(g-f>i.mod/2?f+=i.mod:f-g>i.mod/2&&(f-=i.mod)),k[e]=m((g-f)*b+f,d))}),this[d](k)},blend:function(b){if(this._rgba[3]===1)return this;var c=this._rgba.slice(),d=c.pop(),e=f(b)._rgba;return f(a.map(c,function(a,b){return(1-d)*e[b]+d*a}))},toRgbaString:function(){var b="rgba(",c=a.map(this._rgba,function(a,b){return a==null?b>2?1:0:a});return c[3]===1&&(c.pop(),b="rgb("),b+c.join()+")"},toHslaString:function(){var b="hsla(",c=a.map(this.hsla(),function(a,b){return a==null&&(a=b>2?1:0),b&&b<3&&(a=Math.round(a*100)+"%"),a});return c[3]===1&&(c.pop(),b="hsl("),b+c.join()+")"},toHexString:function(b){var c=this._rgba.slice(),d=c.pop();return b&&c.push(~~(d*255)),"#"+a.map(c,function(a){return a=(a||0).toString(16),a.length===1?"0"+a:a}).join("")},toString:function(){return this._rgba[3]===0?"transparent":this.toRgbaString()}}),f.fn.parse.prototype=f.fn,g.hsla.to=function(a){if(a[0]==null||a[1]==null||a[2]==null)return[null,null,null,a[3]];var b=a[0]/255,c=a[1]/255,d=a[2]/255,e=a[3],f=Math.max(b,c,d),g=Math.min(b,c,d),h=f-g,i=f+g,j=i*.5,k,l;return g===f?k=0:b===f?k=60*(c-d)/h+360:c===f?k=60*(d-b)/h+120:k=60*(b-c)/h+240,h===0?l=0:j<=.5?l=h/i:l=h/(2-i),[Math.round(k)%360,l,j,e==null?1:e]},g.hsla.from=function(a){if(a[0]==null||a[1]==null||a[2]==null)return[null,null,null,a[3]];var b=a[0]/360,c=a[1],d=a[2],e=a[3],f=d<=.5?d*(1+c):d+c-d*c,g=2*d-f;return[Math.round(o(g,f,b+1/3)*255),Math.round(o(g,f,b)*255),Math.round(o(g,f,b-1/3)*255),e]},l(g,function(c,e){var g=e.props,h=e.cache,i=e.to,j=e.from;f.fn[c]=function(c){i&&!this[h]&&(this[h]=i(this._rgba));if(c===b)return this[h].slice();var d,e=a.type(c),k=e==="array"||e==="object"?c:arguments,n=this[h].slice();return l(g,function(a,b){var c=k[e==="object"?a:b.idx];c==null&&(c=n[b.idx]),n[b.idx]=m(c,b)}),j?(d=f(j(n)),d[h]=n,d):f(n)},l(g,function(b,e){if(f.fn[b])return;f.fn[b]=function(f){var g=a.type(f),h=b==="alpha"?this._hsla?"hsla":"rgba":c,i=this[h](),j=i[e.idx],k;return g==="undefined"?j:(g==="function"&&(f=f.call(this,j),g=a.type(f)),f==null&&e.empty?this:(g==="string"&&(k=d.exec(f),k&&(f=j+parseFloat(k[2])*(k[1]==="+"?1:-1))),i[e.idx]=f,this[h](i)))}})}),f.hook=function(b){var c=b.split(" ");l(c,function(b,c){a.cssHooks[c]={set:function(b,d){var e,g,h="";if(d!=="transparent"&&(a.type(d)!=="string"||(e=n(d)))){d=f(e||d);if(!i.rgba&&d._rgba[3]!==1){g=c==="backgroundColor"?b.parentNode:b;while((h===""||h==="transparent")&&g&&g.style)try{h=a.css(g,"backgroundColor"),g=g.parentNode}catch(j){}d=d.blend(h&&h!=="transparent"?h:"_default")}d=d.toRgbaString()}try{b.style[c]=d}catch(j){}}},a.fx.step[c]=function(b){b.colorInit||(b.start=f(b.elem,c),b.end=f(b.end),b.colorInit=!0),a.cssHooks[c].set(b.elem,b.start.transition(b.end,b.pos))}})},f.hook(c),a.cssHooks.borderColor={expand:function(a){var b={};return l(["Top","Right","Bottom","Left"],function(c,d){b["border"+d+"Color"]=a}),b}},k=a.Color.names={aqua:"#00ffff",black:"#000000",blue:"#0000ff",fuchsia:"#ff00ff",gray:"#808080",green:"#008000",lime:"#00ff00",maroon:"#800000",navy:"#000080",olive:"#808000",purple:"#800080",red:"#ff0000",silver:"#c0c0c0",teal:"#008080",white:"#ffffff",yellow:"#ffff00",transparent:[null,null,null,0],_default:"#ffffff"}})(jQuery); 
 /*
 * jQuery Easing v1.3 - http://gsgd.co.uk/sandbox/jquery/easing/
 *
 * Uses the built in easing capabilities added In jQuery 1.1
 * to offer multiple easing options
 *
 * TERMS OF USE - jQuery Easing
 * 
 * Open source under the BSD License. 
 * 
 * Copyright © 2008 George McGinley Smith
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without modification, 
 * are permitted provided that the following conditions are met:
 * 
 * Redistributions of source code must retain the above copyright notice, this list of 
 * conditions and the following disclaimer.
 * Redistributions in binary form must reproduce the above copyright notice, this list 
 * of conditions and the following disclaimer in the documentation and/or other materials 
 * provided with the distribution.
 * 
 * Neither the name of the author nor the names of contributors may be used to endorse 
 * or promote products derived from this software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
 *  COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 *  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
 *  GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED 
 * AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 *  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED 
 * OF THE POSSIBILITY OF SUCH DAMAGE. 
 *
*/

// t: current time, b: begInnIng value, c: change In value, d: duration
jQuery.easing['jswing'] = jQuery.easing['swing'];

jQuery.extend( jQuery.easing,
{
	def: 'easeOutQuad',
	swing: function (x, t, b, c, d) {
		//alert(jQuery.easing.default);
		return jQuery.easing[jQuery.easing.def](x, t, b, c, d);
	},
	easeInQuad: function (x, t, b, c, d) {
		return c*(t/=d)*t + b;
	},
	easeOutQuad: function (x, t, b, c, d) {
		return -c *(t/=d)*(t-2) + b;
	},
	easeInOutQuad: function (x, t, b, c, d) {
		if ((t/=d/2) < 1) return c/2*t*t + b;
		return -c/2 * ((--t)*(t-2) - 1) + b;
	},
	easeInCubic: function (x, t, b, c, d) {
		return c*(t/=d)*t*t + b;
	},
	easeOutCubic: function (x, t, b, c, d) {
		return c*((t=t/d-1)*t*t + 1) + b;
	},
	easeInOutCubic: function (x, t, b, c, d) {
		if ((t/=d/2) < 1) return c/2*t*t*t + b;
		return c/2*((t-=2)*t*t + 2) + b;
	},
	easeInQuart: function (x, t, b, c, d) {
		return c*(t/=d)*t*t*t + b;
	},
	easeOutQuart: function (x, t, b, c, d) {
		return -c * ((t=t/d-1)*t*t*t - 1) + b;
	},
	easeInOutQuart: function (x, t, b, c, d) {
		if ((t/=d/2) < 1) return c/2*t*t*t*t + b;
		return -c/2 * ((t-=2)*t*t*t - 2) + b;
	},
	easeInQuint: function (x, t, b, c, d) {
		return c*(t/=d)*t*t*t*t + b;
	},
	easeOutQuint: function (x, t, b, c, d) {
		return c*((t=t/d-1)*t*t*t*t + 1) + b;
	},
	easeInOutQuint: function (x, t, b, c, d) {
		if ((t/=d/2) < 1) return c/2*t*t*t*t*t + b;
		return c/2*((t-=2)*t*t*t*t + 2) + b;
	},
	easeInSine: function (x, t, b, c, d) {
		return -c * Math.cos(t/d * (Math.PI/2)) + c + b;
	},
	easeOutSine: function (x, t, b, c, d) {
		return c * Math.sin(t/d * (Math.PI/2)) + b;
	},
	easeInOutSine: function (x, t, b, c, d) {
		return -c/2 * (Math.cos(Math.PI*t/d) - 1) + b;
	},
	easeInExpo: function (x, t, b, c, d) {
		return (t==0) ? b : c * Math.pow(2, 10 * (t/d - 1)) + b;
	},
	easeOutExpo: function (x, t, b, c, d) {
		return (t==d) ? b+c : c * (-Math.pow(2, -10 * t/d) + 1) + b;
	},
	easeInOutExpo: function (x, t, b, c, d) {
		if (t==0) return b;
		if (t==d) return b+c;
		if ((t/=d/2) < 1) return c/2 * Math.pow(2, 10 * (t - 1)) + b;
		return c/2 * (-Math.pow(2, -10 * --t) + 2) + b;
	},
	easeInCirc: function (x, t, b, c, d) {
		return -c * (Math.sqrt(1 - (t/=d)*t) - 1) + b;
	},
	easeOutCirc: function (x, t, b, c, d) {
		return c * Math.sqrt(1 - (t=t/d-1)*t) + b;
	},
	easeInOutCirc: function (x, t, b, c, d) {
		if ((t/=d/2) < 1) return -c/2 * (Math.sqrt(1 - t*t) - 1) + b;
		return c/2 * (Math.sqrt(1 - (t-=2)*t) + 1) + b;
	},
	easeInElastic: function (x, t, b, c, d) {
		var s=1.70158;var p=0;var a=c;
		if (t==0) return b;  if ((t/=d)==1) return b+c;  if (!p) p=d*.3;
		if (a < Math.abs(c)) { a=c; var s=p/4; }
		else var s = p/(2*Math.PI) * Math.asin (c/a);
		return -(a*Math.pow(2,10*(t-=1)) * Math.sin( (t*d-s)*(2*Math.PI)/p )) + b;
	},
	easeOutElastic: function (x, t, b, c, d) {
		var s=1.70158;var p=0;var a=c;
		if (t==0) return b;  if ((t/=d)==1) return b+c;  if (!p) p=d*.3;
		if (a < Math.abs(c)) { a=c; var s=p/4; }
		else var s = p/(2*Math.PI) * Math.asin (c/a);
		return a*Math.pow(2,-10*t) * Math.sin( (t*d-s)*(2*Math.PI)/p ) + c + b;
	},
	easeInOutElastic: function (x, t, b, c, d) {
		var s=1.70158;var p=0;var a=c;
		if (t==0) return b;  if ((t/=d/2)==2) return b+c;  if (!p) p=d*(.3*1.5);
		if (a < Math.abs(c)) { a=c; var s=p/4; }
		else var s = p/(2*Math.PI) * Math.asin (c/a);
		if (t < 1) return -.5*(a*Math.pow(2,10*(t-=1)) * Math.sin( (t*d-s)*(2*Math.PI)/p )) + b;
		return a*Math.pow(2,-10*(t-=1)) * Math.sin( (t*d-s)*(2*Math.PI)/p )*.5 + c + b;
	},
	easeInBack: function (x, t, b, c, d, s) {
		if (s == undefined) s = 1.70158;
		return c*(t/=d)*t*((s+1)*t - s) + b;
	},
	easeOutBack: function (x, t, b, c, d, s) {
		if (s == undefined) s = 1.70158;
		return c*((t=t/d-1)*t*((s+1)*t + s) + 1) + b;
	},
	easeInOutBack: function (x, t, b, c, d, s) {
		if (s == undefined) s = 1.70158; 
		if ((t/=d/2) < 1) return c/2*(t*t*(((s*=(1.525))+1)*t - s)) + b;
		return c/2*((t-=2)*t*(((s*=(1.525))+1)*t + s) + 2) + b;
	},
	easeInBounce: function (x, t, b, c, d) {
		return c - jQuery.easing.easeOutBounce (x, d-t, 0, c, d) + b;
	},
	easeOutBounce: function (x, t, b, c, d) {
		if ((t/=d) < (1/2.75)) {
			return c*(7.5625*t*t) + b;
		} else if (t < (2/2.75)) {
			return c*(7.5625*(t-=(1.5/2.75))*t + .75) + b;
		} else if (t < (2.5/2.75)) {
			return c*(7.5625*(t-=(2.25/2.75))*t + .9375) + b;
		} else {
			return c*(7.5625*(t-=(2.625/2.75))*t + .984375) + b;
		}
	},
	easeInOutBounce: function (x, t, b, c, d) {
		if (t < d/2) return jQuery.easing.easeInBounce (x, t*2, 0, c, d) * .5 + b;
		return jQuery.easing.easeOutBounce (x, t*2-d, 0, c, d) * .5 + c*.5 + b;
	}
});

/*
 *
 * TERMS OF USE - EASING EQUATIONS
 * 
 * Open source under the BSD License. 
 * 
 * Copyright © 2001 Robert Penner
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without modification, 
 * are permitted provided that the following conditions are met:
 * 
 * Redistributions of source code must retain the above copyright notice, this list of 
 * conditions and the following disclaimer.
 * Redistributions in binary form must reproduce the above copyright notice, this list 
 * of conditions and the following disclaimer in the documentation and/or other materials 
 * provided with the distribution.
 * 
 * Neither the name of the author nor the names of contributors may be used to endorse 
 * or promote products derived from this software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
 *  COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 *  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
 *  GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED 
 * AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 *  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED 
 * OF THE POSSIBILITY OF SUCH DAMAGE. 
 *
 */ 
 /*! Hammer.JS - v2.0.6 - 2016-01-06
 * http://hammerjs.github.io/
 *
 * Copyright (c) 2016 Jorik Tangelder;
 * Licensed under the  license */
!function(a,b,c,d){"use strict";function e(a,b,c){return setTimeout(j(a,c),b)}function f(a,b,c){return Array.isArray(a)?(g(a,c[b],c),!0):!1}function g(a,b,c){var e;if(a)if(a.forEach)a.forEach(b,c);else if(a.length!==d)for(e=0;e<a.length;)b.call(c,a[e],e,a),e++;else for(e in a)a.hasOwnProperty(e)&&b.call(c,a[e],e,a)}function h(b,c,d){var e="DEPRECATED METHOD: "+c+"\n"+d+" AT \n";return function(){var c=new Error("get-stack-trace"),d=c&&c.stack?c.stack.replace(/^[^\(]+?[\n$]/gm,"").replace(/^\s+at\s+/gm,"").replace(/^Object.<anonymous>\s*\(/gm,"{anonymous}()@"):"Unknown Stack Trace",f=a.console&&(a.console.warn||a.console.log);return f&&f.call(a.console,e,d),b.apply(this,arguments)}}function i(a,b,c){var d,e=b.prototype;d=a.prototype=Object.create(e),d.constructor=a,d._super=e,c&&ha(d,c)}function j(a,b){return function(){return a.apply(b,arguments)}}function k(a,b){return typeof a==ka?a.apply(b?b[0]||d:d,b):a}function l(a,b){return a===d?b:a}function m(a,b,c){g(q(b),function(b){a.addEventListener(b,c,!1)})}function n(a,b,c){g(q(b),function(b){a.removeEventListener(b,c,!1)})}function o(a,b){for(;a;){if(a==b)return!0;a=a.parentNode}return!1}function p(a,b){return a.indexOf(b)>-1}function q(a){return a.trim().split(/\s+/g)}function r(a,b,c){if(a.indexOf&&!c)return a.indexOf(b);for(var d=0;d<a.length;){if(c&&a[d][c]==b||!c&&a[d]===b)return d;d++}return-1}function s(a){return Array.prototype.slice.call(a,0)}function t(a,b,c){for(var d=[],e=[],f=0;f<a.length;){var g=b?a[f][b]:a[f];r(e,g)<0&&d.push(a[f]),e[f]=g,f++}return c&&(d=b?d.sort(function(a,c){return a[b]>c[b]}):d.sort()),d}function u(a,b){for(var c,e,f=b[0].toUpperCase()+b.slice(1),g=0;g<ia.length;){if(c=ia[g],e=c?c+f:b,e in a)return e;g++}return d}function v(){return qa++}function w(b){var c=b.ownerDocument||b;return c.defaultView||c.parentWindow||a}function x(a,b){var c=this;this.manager=a,this.callback=b,this.element=a.element,this.target=a.options.inputTarget,this.domHandler=function(b){k(a.options.enable,[a])&&c.handler(b)},this.init()}function y(a){var b,c=a.options.inputClass;return new(b=c?c:ta?M:ua?P:sa?R:L)(a,z)}function z(a,b,c){var d=c.pointers.length,e=c.changedPointers.length,f=b&Aa&&d-e===0,g=b&(Ca|Da)&&d-e===0;c.isFirst=!!f,c.isFinal=!!g,f&&(a.session={}),c.eventType=b,A(a,c),a.emit("hammer.input",c),a.recognize(c),a.session.prevInput=c}function A(a,b){var c=a.session,d=b.pointers,e=d.length;c.firstInput||(c.firstInput=D(b)),e>1&&!c.firstMultiple?c.firstMultiple=D(b):1===e&&(c.firstMultiple=!1);var f=c.firstInput,g=c.firstMultiple,h=g?g.center:f.center,i=b.center=E(d);b.timeStamp=na(),b.deltaTime=b.timeStamp-f.timeStamp,b.angle=I(h,i),b.distance=H(h,i),B(c,b),b.offsetDirection=G(b.deltaX,b.deltaY);var j=F(b.deltaTime,b.deltaX,b.deltaY);b.overallVelocityX=j.x,b.overallVelocityY=j.y,b.overallVelocity=ma(j.x)>ma(j.y)?j.x:j.y,b.scale=g?K(g.pointers,d):1,b.rotation=g?J(g.pointers,d):0,b.maxPointers=c.prevInput?b.pointers.length>c.prevInput.maxPointers?b.pointers.length:c.prevInput.maxPointers:b.pointers.length,C(c,b);var k=a.element;o(b.srcEvent.target,k)&&(k=b.srcEvent.target),b.target=k}function B(a,b){var c=b.center,d=a.offsetDelta||{},e=a.prevDelta||{},f=a.prevInput||{};(b.eventType===Aa||f.eventType===Ca)&&(e=a.prevDelta={x:f.deltaX||0,y:f.deltaY||0},d=a.offsetDelta={x:c.x,y:c.y}),b.deltaX=e.x+(c.x-d.x),b.deltaY=e.y+(c.y-d.y)}function C(a,b){var c,e,f,g,h=a.lastInterval||b,i=b.timeStamp-h.timeStamp;if(b.eventType!=Da&&(i>za||h.velocity===d)){var j=b.deltaX-h.deltaX,k=b.deltaY-h.deltaY,l=F(i,j,k);e=l.x,f=l.y,c=ma(l.x)>ma(l.y)?l.x:l.y,g=G(j,k),a.lastInterval=b}else c=h.velocity,e=h.velocityX,f=h.velocityY,g=h.direction;b.velocity=c,b.velocityX=e,b.velocityY=f,b.direction=g}function D(a){for(var b=[],c=0;c<a.pointers.length;)b[c]={clientX:la(a.pointers[c].clientX),clientY:la(a.pointers[c].clientY)},c++;return{timeStamp:na(),pointers:b,center:E(b),deltaX:a.deltaX,deltaY:a.deltaY}}function E(a){var b=a.length;if(1===b)return{x:la(a[0].clientX),y:la(a[0].clientY)};for(var c=0,d=0,e=0;b>e;)c+=a[e].clientX,d+=a[e].clientY,e++;return{x:la(c/b),y:la(d/b)}}function F(a,b,c){return{x:b/a||0,y:c/a||0}}function G(a,b){return a===b?Ea:ma(a)>=ma(b)?0>a?Fa:Ga:0>b?Ha:Ia}function H(a,b,c){c||(c=Ma);var d=b[c[0]]-a[c[0]],e=b[c[1]]-a[c[1]];return Math.sqrt(d*d+e*e)}function I(a,b,c){c||(c=Ma);var d=b[c[0]]-a[c[0]],e=b[c[1]]-a[c[1]];return 180*Math.atan2(e,d)/Math.PI}function J(a,b){return I(b[1],b[0],Na)+I(a[1],a[0],Na)}function K(a,b){return H(b[0],b[1],Na)/H(a[0],a[1],Na)}function L(){this.evEl=Pa,this.evWin=Qa,this.allow=!0,this.pressed=!1,x.apply(this,arguments)}function M(){this.evEl=Ta,this.evWin=Ua,x.apply(this,arguments),this.store=this.manager.session.pointerEvents=[]}function N(){this.evTarget=Wa,this.evWin=Xa,this.started=!1,x.apply(this,arguments)}function O(a,b){var c=s(a.touches),d=s(a.changedTouches);return b&(Ca|Da)&&(c=t(c.concat(d),"identifier",!0)),[c,d]}function P(){this.evTarget=Za,this.targetIds={},x.apply(this,arguments)}function Q(a,b){var c=s(a.touches),d=this.targetIds;if(b&(Aa|Ba)&&1===c.length)return d[c[0].identifier]=!0,[c,c];var e,f,g=s(a.changedTouches),h=[],i=this.target;if(f=c.filter(function(a){return o(a.target,i)}),b===Aa)for(e=0;e<f.length;)d[f[e].identifier]=!0,e++;for(e=0;e<g.length;)d[g[e].identifier]&&h.push(g[e]),b&(Ca|Da)&&delete d[g[e].identifier],e++;return h.length?[t(f.concat(h),"identifier",!0),h]:void 0}function R(){x.apply(this,arguments);var a=j(this.handler,this);this.touch=new P(this.manager,a),this.mouse=new L(this.manager,a)}function S(a,b){this.manager=a,this.set(b)}function T(a){if(p(a,db))return db;var b=p(a,eb),c=p(a,fb);return b&&c?db:b||c?b?eb:fb:p(a,cb)?cb:bb}function U(a){this.options=ha({},this.defaults,a||{}),this.id=v(),this.manager=null,this.options.enable=l(this.options.enable,!0),this.state=gb,this.simultaneous={},this.requireFail=[]}function V(a){return a&lb?"cancel":a&jb?"end":a&ib?"move":a&hb?"start":""}function W(a){return a==Ia?"down":a==Ha?"up":a==Fa?"left":a==Ga?"right":""}function X(a,b){var c=b.manager;return c?c.get(a):a}function Y(){U.apply(this,arguments)}function Z(){Y.apply(this,arguments),this.pX=null,this.pY=null}function $(){Y.apply(this,arguments)}function _(){U.apply(this,arguments),this._timer=null,this._input=null}function aa(){Y.apply(this,arguments)}function ba(){Y.apply(this,arguments)}function ca(){U.apply(this,arguments),this.pTime=!1,this.pCenter=!1,this._timer=null,this._input=null,this.count=0}function da(a,b){return b=b||{},b.recognizers=l(b.recognizers,da.defaults.preset),new ea(a,b)}function ea(a,b){this.options=ha({},da.defaults,b||{}),this.options.inputTarget=this.options.inputTarget||a,this.handlers={},this.session={},this.recognizers=[],this.element=a,this.input=y(this),this.touchAction=new S(this,this.options.touchAction),fa(this,!0),g(this.options.recognizers,function(a){var b=this.add(new a[0](a[1]));a[2]&&b.recognizeWith(a[2]),a[3]&&b.requireFailure(a[3])},this)}function fa(a,b){var c=a.element;c.style&&g(a.options.cssProps,function(a,d){c.style[u(c.style,d)]=b?a:""})}function ga(a,c){var d=b.createEvent("Event");d.initEvent(a,!0,!0),d.gesture=c,c.target.dispatchEvent(d)}var ha,ia=["","webkit","Moz","MS","ms","o"],ja=b.createElement("div"),ka="function",la=Math.round,ma=Math.abs,na=Date.now;ha="function"!=typeof Object.assign?function(a){if(a===d||null===a)throw new TypeError("Cannot convert undefined or null to object");for(var b=Object(a),c=1;c<arguments.length;c++){var e=arguments[c];if(e!==d&&null!==e)for(var f in e)e.hasOwnProperty(f)&&(b[f]=e[f])}return b}:Object.assign;var oa=h(function(a,b,c){for(var e=Object.keys(b),f=0;f<e.length;)(!c||c&&a[e[f]]===d)&&(a[e[f]]=b[e[f]]),f++;return a},"extend","Use `assign`."),pa=h(function(a,b){return oa(a,b,!0)},"merge","Use `assign`."),qa=1,ra=/mobile|tablet|ip(ad|hone|od)|android/i,sa="ontouchstart"in a,ta=u(a,"PointerEvent")!==d,ua=sa&&ra.test(navigator.userAgent),va="touch",wa="pen",xa="mouse",ya="kinect",za=25,Aa=1,Ba=2,Ca=4,Da=8,Ea=1,Fa=2,Ga=4,Ha=8,Ia=16,Ja=Fa|Ga,Ka=Ha|Ia,La=Ja|Ka,Ma=["x","y"],Na=["clientX","clientY"];x.prototype={handler:function(){},init:function(){this.evEl&&m(this.element,this.evEl,this.domHandler),this.evTarget&&m(this.target,this.evTarget,this.domHandler),this.evWin&&m(w(this.element),this.evWin,this.domHandler)},destroy:function(){this.evEl&&n(this.element,this.evEl,this.domHandler),this.evTarget&&n(this.target,this.evTarget,this.domHandler),this.evWin&&n(w(this.element),this.evWin,this.domHandler)}};var Oa={mousedown:Aa,mousemove:Ba,mouseup:Ca},Pa="mousedown",Qa="mousemove mouseup";i(L,x,{handler:function(a){var b=Oa[a.type];b&Aa&&0===a.button&&(this.pressed=!0),b&Ba&&1!==a.which&&(b=Ca),this.pressed&&this.allow&&(b&Ca&&(this.pressed=!1),this.callback(this.manager,b,{pointers:[a],changedPointers:[a],pointerType:xa,srcEvent:a}))}});var Ra={pointerdown:Aa,pointermove:Ba,pointerup:Ca,pointercancel:Da,pointerout:Da},Sa={2:va,3:wa,4:xa,5:ya},Ta="pointerdown",Ua="pointermove pointerup pointercancel";a.MSPointerEvent&&!a.PointerEvent&&(Ta="MSPointerDown",Ua="MSPointerMove MSPointerUp MSPointerCancel"),i(M,x,{handler:function(a){var b=this.store,c=!1,d=a.type.toLowerCase().replace("ms",""),e=Ra[d],f=Sa[a.pointerType]||a.pointerType,g=f==va,h=r(b,a.pointerId,"pointerId");e&Aa&&(0===a.button||g)?0>h&&(b.push(a),h=b.length-1):e&(Ca|Da)&&(c=!0),0>h||(b[h]=a,this.callback(this.manager,e,{pointers:b,changedPointers:[a],pointerType:f,srcEvent:a}),c&&b.splice(h,1))}});var Va={touchstart:Aa,touchmove:Ba,touchend:Ca,touchcancel:Da},Wa="touchstart",Xa="touchstart touchmove touchend touchcancel";i(N,x,{handler:function(a){var b=Va[a.type];if(b===Aa&&(this.started=!0),this.started){var c=O.call(this,a,b);b&(Ca|Da)&&c[0].length-c[1].length===0&&(this.started=!1),this.callback(this.manager,b,{pointers:c[0],changedPointers:c[1],pointerType:va,srcEvent:a})}}});var Ya={touchstart:Aa,touchmove:Ba,touchend:Ca,touchcancel:Da},Za="touchstart touchmove touchend touchcancel";i(P,x,{handler:function(a){var b=Ya[a.type],c=Q.call(this,a,b);c&&this.callback(this.manager,b,{pointers:c[0],changedPointers:c[1],pointerType:va,srcEvent:a})}}),i(R,x,{handler:function(a,b,c){var d=c.pointerType==va,e=c.pointerType==xa;if(d)this.mouse.allow=!1;else if(e&&!this.mouse.allow)return;b&(Ca|Da)&&(this.mouse.allow=!0),this.callback(a,b,c)},destroy:function(){this.touch.destroy(),this.mouse.destroy()}});var $a=u(ja.style,"touchAction"),_a=$a!==d,ab="compute",bb="auto",cb="manipulation",db="none",eb="pan-x",fb="pan-y";S.prototype={set:function(a){a==ab&&(a=this.compute()),_a&&this.manager.element.style&&(this.manager.element.style[$a]=a),this.actions=a.toLowerCase().trim()},update:function(){this.set(this.manager.options.touchAction)},compute:function(){var a=[];return g(this.manager.recognizers,function(b){k(b.options.enable,[b])&&(a=a.concat(b.getTouchAction()))}),T(a.join(" "))},preventDefaults:function(a){if(!_a){var b=a.srcEvent,c=a.offsetDirection;if(this.manager.session.prevented)return void b.preventDefault();var d=this.actions,e=p(d,db),f=p(d,fb),g=p(d,eb);if(e){var h=1===a.pointers.length,i=a.distance<2,j=a.deltaTime<250;if(h&&i&&j)return}if(!g||!f)return e||f&&c&Ja||g&&c&Ka?this.preventSrc(b):void 0}},preventSrc:function(a){this.manager.session.prevented=!0,a.preventDefault()}};var gb=1,hb=2,ib=4,jb=8,kb=jb,lb=16,mb=32;U.prototype={defaults:{},set:function(a){return ha(this.options,a),this.manager&&this.manager.touchAction.update(),this},recognizeWith:function(a){if(f(a,"recognizeWith",this))return this;var b=this.simultaneous;return a=X(a,this),b[a.id]||(b[a.id]=a,a.recognizeWith(this)),this},dropRecognizeWith:function(a){return f(a,"dropRecognizeWith",this)?this:(a=X(a,this),delete this.simultaneous[a.id],this)},requireFailure:function(a){if(f(a,"requireFailure",this))return this;var b=this.requireFail;return a=X(a,this),-1===r(b,a)&&(b.push(a),a.requireFailure(this)),this},dropRequireFailure:function(a){if(f(a,"dropRequireFailure",this))return this;a=X(a,this);var b=r(this.requireFail,a);return b>-1&&this.requireFail.splice(b,1),this},hasRequireFailures:function(){return this.requireFail.length>0},canRecognizeWith:function(a){return!!this.simultaneous[a.id]},emit:function(a){function b(b){c.manager.emit(b,a)}var c=this,d=this.state;jb>d&&b(c.options.event+V(d)),b(c.options.event),a.additionalEvent&&b(a.additionalEvent),d>=jb&&b(c.options.event+V(d))},tryEmit:function(a){return this.canEmit()?this.emit(a):void(this.state=mb)},canEmit:function(){for(var a=0;a<this.requireFail.length;){if(!(this.requireFail[a].state&(mb|gb)))return!1;a++}return!0},recognize:function(a){var b=ha({},a);return k(this.options.enable,[this,b])?(this.state&(kb|lb|mb)&&(this.state=gb),this.state=this.process(b),void(this.state&(hb|ib|jb|lb)&&this.tryEmit(b))):(this.reset(),void(this.state=mb))},process:function(a){},getTouchAction:function(){},reset:function(){}},i(Y,U,{defaults:{pointers:1},attrTest:function(a){var b=this.options.pointers;return 0===b||a.pointers.length===b},process:function(a){var b=this.state,c=a.eventType,d=b&(hb|ib),e=this.attrTest(a);return d&&(c&Da||!e)?b|lb:d||e?c&Ca?b|jb:b&hb?b|ib:hb:mb}}),i(Z,Y,{defaults:{event:"pan",threshold:10,pointers:1,direction:La},getTouchAction:function(){var a=this.options.direction,b=[];return a&Ja&&b.push(fb),a&Ka&&b.push(eb),b},directionTest:function(a){var b=this.options,c=!0,d=a.distance,e=a.direction,f=a.deltaX,g=a.deltaY;return e&b.direction||(b.direction&Ja?(e=0===f?Ea:0>f?Fa:Ga,c=f!=this.pX,d=Math.abs(a.deltaX)):(e=0===g?Ea:0>g?Ha:Ia,c=g!=this.pY,d=Math.abs(a.deltaY))),a.direction=e,c&&d>b.threshold&&e&b.direction},attrTest:function(a){return Y.prototype.attrTest.call(this,a)&&(this.state&hb||!(this.state&hb)&&this.directionTest(a))},emit:function(a){this.pX=a.deltaX,this.pY=a.deltaY;var b=W(a.direction);b&&(a.additionalEvent=this.options.event+b),this._super.emit.call(this,a)}}),i($,Y,{defaults:{event:"pinch",threshold:0,pointers:2},getTouchAction:function(){return[db]},attrTest:function(a){return this._super.attrTest.call(this,a)&&(Math.abs(a.scale-1)>this.options.threshold||this.state&hb)},emit:function(a){if(1!==a.scale){var b=a.scale<1?"in":"out";a.additionalEvent=this.options.event+b}this._super.emit.call(this,a)}}),i(_,U,{defaults:{event:"press",pointers:1,time:251,threshold:9},getTouchAction:function(){return[bb]},process:function(a){var b=this.options,c=a.pointers.length===b.pointers,d=a.distance<b.threshold,f=a.deltaTime>b.time;if(this._input=a,!d||!c||a.eventType&(Ca|Da)&&!f)this.reset();else if(a.eventType&Aa)this.reset(),this._timer=e(function(){this.state=kb,this.tryEmit()},b.time,this);else if(a.eventType&Ca)return kb;return mb},reset:function(){clearTimeout(this._timer)},emit:function(a){this.state===kb&&(a&&a.eventType&Ca?this.manager.emit(this.options.event+"up",a):(this._input.timeStamp=na(),this.manager.emit(this.options.event,this._input)))}}),i(aa,Y,{defaults:{event:"rotate",threshold:0,pointers:2},getTouchAction:function(){return[db]},attrTest:function(a){return this._super.attrTest.call(this,a)&&(Math.abs(a.rotation)>this.options.threshold||this.state&hb)}}),i(ba,Y,{defaults:{event:"swipe",threshold:10,velocity:.3,direction:Ja|Ka,pointers:1},getTouchAction:function(){return Z.prototype.getTouchAction.call(this)},attrTest:function(a){var b,c=this.options.direction;return c&(Ja|Ka)?b=a.overallVelocity:c&Ja?b=a.overallVelocityX:c&Ka&&(b=a.overallVelocityY),this._super.attrTest.call(this,a)&&c&a.offsetDirection&&a.distance>this.options.threshold&&a.maxPointers==this.options.pointers&&ma(b)>this.options.velocity&&a.eventType&Ca},emit:function(a){var b=W(a.offsetDirection);b&&this.manager.emit(this.options.event+b,a),this.manager.emit(this.options.event,a)}}),i(ca,U,{defaults:{event:"tap",pointers:1,taps:1,interval:300,time:250,threshold:9,posThreshold:10},getTouchAction:function(){return[cb]},process:function(a){var b=this.options,c=a.pointers.length===b.pointers,d=a.distance<b.threshold,f=a.deltaTime<b.time;if(this.reset(),a.eventType&Aa&&0===this.count)return this.failTimeout();if(d&&f&&c){if(a.eventType!=Ca)return this.failTimeout();var g=this.pTime?a.timeStamp-this.pTime<b.interval:!0,h=!this.pCenter||H(this.pCenter,a.center)<b.posThreshold;this.pTime=a.timeStamp,this.pCenter=a.center,h&&g?this.count+=1:this.count=1,this._input=a;var i=this.count%b.taps;if(0===i)return this.hasRequireFailures()?(this._timer=e(function(){this.state=kb,this.tryEmit()},b.interval,this),hb):kb}return mb},failTimeout:function(){return this._timer=e(function(){this.state=mb},this.options.interval,this),mb},reset:function(){clearTimeout(this._timer)},emit:function(){this.state==kb&&(this._input.tapCount=this.count,this.manager.emit(this.options.event,this._input))}}),da.VERSION="2.0.6",da.defaults={domEvents:!1,touchAction:ab,enable:!0,inputTarget:null,inputClass:null,preset:[[aa,{enable:!1}],[$,{enable:!1},["rotate"]],[ba,{direction:Ja}],[Z,{direction:Ja},["swipe"]],[ca],[ca,{event:"doubletap",taps:2},["tap"]],[_]],cssProps:{userSelect:"none",touchSelect:"none",touchCallout:"none",contentZooming:"none",userDrag:"none",tapHighlightColor:"rgba(0,0,0,0)"}};var nb=1,ob=2;ea.prototype={set:function(a){return ha(this.options,a),a.touchAction&&this.touchAction.update(),a.inputTarget&&(this.input.destroy(),this.input.target=a.inputTarget,this.input.init()),this},stop:function(a){this.session.stopped=a?ob:nb},recognize:function(a){var b=this.session;if(!b.stopped){this.touchAction.preventDefaults(a);var c,d=this.recognizers,e=b.curRecognizer;(!e||e&&e.state&kb)&&(e=b.curRecognizer=null);for(var f=0;f<d.length;)c=d[f],b.stopped===ob||e&&c!=e&&!c.canRecognizeWith(e)?c.reset():c.recognize(a),!e&&c.state&(hb|ib|jb)&&(e=b.curRecognizer=c),f++}},get:function(a){if(a instanceof U)return a;for(var b=this.recognizers,c=0;c<b.length;c++)if(b[c].options.event==a)return b[c];return null},add:function(a){if(f(a,"add",this))return this;var b=this.get(a.options.event);return b&&this.remove(b),this.recognizers.push(a),a.manager=this,this.touchAction.update(),a},remove:function(a){if(f(a,"remove",this))return this;if(a=this.get(a)){var b=this.recognizers,c=r(b,a);-1!==c&&(b.splice(c,1),this.touchAction.update())}return this},on:function(a,b){var c=this.handlers;return g(q(a),function(a){c[a]=c[a]||[],c[a].push(b)}),this},off:function(a,b){var c=this.handlers;return g(q(a),function(a){b?c[a]&&c[a].splice(r(c[a],b),1):delete c[a]}),this},emit:function(a,b){this.options.domEvents&&ga(a,b);var c=this.handlers[a]&&this.handlers[a].slice();if(c&&c.length){b.type=a,b.preventDefault=function(){b.srcEvent.preventDefault()};for(var d=0;d<c.length;)c[d](b),d++}},destroy:function(){this.element&&fa(this,!1),this.handlers={},this.session={},this.input.destroy(),this.element=null}},ha(da,{INPUT_START:Aa,INPUT_MOVE:Ba,INPUT_END:Ca,INPUT_CANCEL:Da,STATE_POSSIBLE:gb,STATE_BEGAN:hb,STATE_CHANGED:ib,STATE_ENDED:jb,STATE_RECOGNIZED:kb,STATE_CANCELLED:lb,STATE_FAILED:mb,DIRECTION_NONE:Ea,DIRECTION_LEFT:Fa,DIRECTION_RIGHT:Ga,DIRECTION_UP:Ha,DIRECTION_DOWN:Ia,DIRECTION_HORIZONTAL:Ja,DIRECTION_VERTICAL:Ka,DIRECTION_ALL:La,Manager:ea,Input:x,TouchAction:S,TouchInput:P,MouseInput:L,PointerEventInput:M,TouchMouseInput:R,SingleTouchInput:N,Recognizer:U,AttrRecognizer:Y,Tap:ca,Pan:Z,Swipe:ba,Pinch:$,Rotate:aa,Press:_,on:m,off:n,each:g,merge:pa,extend:oa,assign:ha,inherit:i,bindFn:j,prefixed:u});var pb="undefined"!=typeof a?a:"undefined"!=typeof self?self:{};pb.Hammer=da,"function"==typeof define&&define.amd?define(function(){return da}):"undefined"!=typeof module&&module.exports?module.exports=da:a[c]=da}(window,document,"Hammer");
//# sourceMappingURL=hammer.min.map 
 !function(){var a=window.MutationObserver||window.WebKitMutationObserver,b="ontouchstart"in window||window.DocumentTouch&&document instanceof DocumentTouch,c=void 0!==document.documentElement.style["touch-action"]||document.documentElement.style["-ms-touch-action"];if(!c&&b&&a){window.Hammer=window.Hammer||{};var d=/touch-action[:][\s]*(none)[^;'"]*/,e=/touch-action[:][\s]*(manipulation)[^;'"]*/,f=/touch-action/,g=navigator.userAgent.match(/(iPad|iPhone|iPod)/g)?!0:!1,h=function(){try{var a=document.createElement("canvas");return!(!window.WebGLRenderingContext||!a.getContext("webgl")&&!a.getContext("experimental-webgl"))}catch(b){return!1}}(),i=h&&g;window.Hammer.time={getTouchAction:function(a){return this.checkStyleString(a.getAttribute("style"))},checkStyleString:function(a){return f.test(a)?d.test(a)?"none":e.test(a)?"manipulation":!0:void 0},shouldHammer:function(a){var b=this.hasParent(a.target);return b&&(!i||Date.now()-a.target.lastStart<125)?b:!1},touchHandler:function(a){var b=a.target.getBoundingClientRect(),c=b.top!==this.pos.top||b.left!==this.pos.left,d=this.shouldHammer(a);("none"===d||c===!1&&"manipulation"===d)&&("touchend"===a.type&&(a.target.focus(),setTimeout(function(){a.target.click()},0)),a.preventDefault()),this.scrolled=!1,delete a.target.lastStart},touchStart:function(a){this.pos=a.target.getBoundingClientRect(),i&&this.hasParent(a.target)&&(a.target.lastStart=Date.now())},styleWatcher:function(a){a.forEach(this.styleUpdater,this)},styleUpdater:function(a){if(a.target.updateNext)return void(a.target.updateNext=!1);var b=this.getTouchAction(a.target);return b?void("none"!==b&&(a.target.hadTouchNone=!1)):void(!b&&(a.oldValue&&this.checkStyleString(a.oldValue)||a.target.hadTouchNone)&&(a.target.hadTouchNone=!0,a.target.updateNext=!1,a.target.setAttribute("style",a.target.getAttribute("style")+" touch-action: none;")))},hasParent:function(a){for(var b,c=a;c&&c.parentNode;c=c.parentNode)if(b=this.getTouchAction(c))return b;return!1},installStartEvents:function(){document.addEventListener("touchstart",this.touchStart.bind(this)),document.addEventListener("mousedown",this.touchStart.bind(this))},installEndEvents:function(){document.addEventListener("touchend",this.touchHandler.bind(this),!0),document.addEventListener("mouseup",this.touchHandler.bind(this),!0)},installObserver:function(){this.observer=new a(this.styleWatcher.bind(this)).observe(document,{subtree:!0,attributes:!0,attributeOldValue:!0,attributeFilter:["style"]})},install:function(){this.installEndEvents(),this.installStartEvents(),this.installObserver()}},window.Hammer.time.install()}}(); 
 /**
* PreloadJS
* Visit http://createjs.com/ for documentation, updates and examples.
*
* Copyright (c) 2011 gskinner.com, inc.
* 
* Distributed under the terms of the MIT license.
* http://www.opensource.org/licenses/mit-license.html
*
* This notice shall be included in all copies or substantial portions of the Software.
**/this.createjs=this.createjs||{};
(function(){var d=function(){this.init()};d.prototype={};var a=d.prototype;a.loaded=false;a.canceled=false;a.progress=0;a._item=null;a.onProgress=null;a.onLoadStart=null;a.onFileLoad=null;a.onFileProgress=null;a.onComplete=null;a.onError=null;a.getItem=function(){return this._item};a.init=function(){};a.load=function(){};a.cancel=function(){};a._sendLoadStart=function(){if(!this._isCanceled()&&this.onLoadStart)this.onLoadStart({target:this})};a._sendProgress=function(a){if(!this._isCanceled()){var b;if(a instanceof
Number)this.progress=a,b={loaded:this.progress,total:1};else if(b=a,this.progress=a.loaded/a.total,isNaN(this.progress)||this.progress==Infinity)this.progress=0;b.target=this;if(this.onProgress)this.onProgress(b)}};a._sendFileProgress=function(a){if(this._isCanceled())this._cleanUp();else if(this.onFileProgress)a.target=this,this.onFileProgress(a)};a._sendComplete=function(){if(!this._isCanceled()&&this.onComplete)this.onComplete({target:this})};a._sendFileComplete=function(a){if(!this._isCanceled()&&
this.onFileLoad)a.target=this,this.onFileLoad(a)};a._sendError=function(a){if(!this._isCanceled()&&this.onError)a==null&&(a={}),a.target=this,this.onError(a)};a._isCanceled=function(){return window.createjs==null||this.canceled?true:false};a.toString=function(){return"[PreloadJS AbstractLoader]"};createjs.AbstractLoader=d})();this.createjs=this.createjs||{};
(function(){var d=function(b){this.initialize(b)},a=d.prototype=new createjs.AbstractLoader;d.IMAGE="image";d.SVG="svg";d.SOUND="sound";d.JSON="json";d.JAVASCRIPT="javascript";d.CSS="css";d.XML="xml";d.TEXT="text";d.TIMEOUT_TIME=8E3;a.useXHR=true;a.stopOnError=false;a.maintainScriptOrder=true;a.next=null;a.typeHandlers=null;a.extensionHandlers=null;a._loadStartWasDispatched=false;a._maxConnections=1;a._currentLoads=null;a._loadQueue=null;a._loadedItemsById=null;a._loadedItemsBySrc=null;a._targetProgress=
0;a._numItems=0;a._numItemsLoaded=null;a._scriptOrder=null;a._loadedScripts=null;a.TAG_LOAD_OGGS=true;a.initialize=function(b){this._targetProgress=this._numItemsLoaded=this._numItems=0;this._paused=false;this._currentLoads=[];this._loadQueue=[];this._scriptOrder=[];this._loadedScripts=[];this._loadedItemsById={};this._loadedItemsBySrc={};this.typeHandlers={};this.extensionHandlers={};this._loadStartWasDispatched=false;this.useXHR=b!=false&&window.XMLHttpRequest!=null;this.determineCapabilities()};
a.determineCapabilities=function(){var b=createjs.PreloadJS.BrowserDetect;if(b!=null)createjs.PreloadJS.TAG_LOAD_OGGS=b.isFirefox||b.isOpera};d.isBinary=function(b){switch(b){case createjs.PreloadJS.IMAGE:case createjs.PreloadJS.SOUND:return true;default:return false}};a.installPlugin=function(b){if(!(b==null||b.getPreloadHandlers==null)){b=b.getPreloadHandlers();if(b.types!=null)for(var a=0,c=b.types.length;a<c;a++)this.typeHandlers[b.types[a]]=b.callback;if(b.extensions!=null)for(a=0,c=b.extensions.length;a<
c;a++)this.extensionHandlers[b.extensions[a]]=b.callback}};a.setMaxConnections=function(b){this._maxConnections=b;this._paused||this._loadNext()};a.loadFile=function(b,a){b==null?this._sendError({text:"File is null."}):(this._addItem(b),a!==false&&this.setPaused(false))};a.loadManifest=function(b,a){var c;if(b instanceof Array){if(b.length==0){this._sendError({text:"Manifest is empty."});return}c=b}else{if(b==null){this._sendError({text:"Manifest is null."});return}c=[b]}for(var d=0,f=c.length;d<
f;d++)this._addItem(c[d],false);a!==false&&this._loadNext()};a.load=function(){this.setPaused(false)};a.getResult=function(b){return this._loadedItemsById[b]||this._loadedItemsBySrc[b]};a.setPaused=function(b){(this._paused=b)||this._loadNext()};a.close=function(){for(;this._currentLoads.length;)this._currentLoads.pop().cancel();this._scriptOrder.length=0;this._loadedScripts.length=0};a._addItem=function(b){b=this._createLoadItem(b);b!=null&&(this._loadQueue.push(b),this._numItems++,this._updateProgress(),
b.getItem().type==createjs.PreloadJS.JAVASCRIPT&&(this._scriptOrder.push(b.getItem()),this._loadedScripts.push(null)))};a._loadNext=function(){if(!this._paused){if(!this._loadStartWasDispatched)this._sendLoadStart(),this._loadStartWasDispatched=true;if(this._numItems==this._numItemsLoaded)this.loaded=true,this._sendComplete(),this.next&&this.next.load&&this.next.load.apply(this.next);for(;this._loadQueue.length&&this._currentLoads.length<this._maxConnections;)this._loadItem(this._loadQueue.shift())}};
a._loadItem=function(b){b.onProgress=createjs.PreloadJS.proxy(this._handleProgress,this);b.onComplete=createjs.PreloadJS.proxy(this._handleFileComplete,this);b.onError=createjs.PreloadJS.proxy(this._handleFileError,this);this._currentLoads.push(b);b.load()};a._handleFileError=function(b){var b=b.target,a=this._createResultData(b.getItem());this._numItemsLoaded++;this._updateProgress();this._sendError(a);this.stopOnError||(this._removeLoadItem(b),this._loadNext())};a._createResultData=function(b){var a=
{id:b.id,result:null,data:b.data,type:b.type,src:b.src};this._loadedItemsById[b.id]=a;return this._loadedItemsBySrc[b.src]=a};a._handleFileComplete=function(b){var b=b.target,a=b.getItem(),c=this._createResultData(a);this._removeLoadItem(b);c.result=b instanceof createjs.XHRLoader?this._createResult(a,b.getResult()):a.tag;switch(a.type){case createjs.PreloadJS.IMAGE:if(b instanceof createjs.XHRLoader){var d=this;c.result.onload=function(){d._handleFileTagComplete(a,c)};return}break;case createjs.PreloadJS.JAVASCRIPT:if(this.maintainScriptOrder){this._loadedScripts[this._scriptOrder.indexOf(a)]=
a;this._checkScriptLoadOrder(b);return}}this._handleFileTagComplete(a,c)};a._checkScriptLoadOrder=function(){for(var b=this._loadedScripts.length,a=0;a<b;a++){var c=this._loadedScripts[a];if(c===null)break;if(c!==true){var d=this.getResult(c.src),c=this.getResult(c.id);c.result=d.result;this._handleFileTagComplete(d,c);this._loadedScripts[a]=true;a--;b--}}};a._handleFileTagComplete=function(b,a){this._numItemsLoaded++;b.completeHandler&&b.completeHandler(a);this._updateProgress();this._sendFileComplete(a);
this._loadNext()};a._removeLoadItem=function(b){for(var a=this._currentLoads.length,c=0;c<a;c++)if(this._currentLoads[c]==b){this._currentLoads.splice(c,1);break}};a._createResult=function(b,a){var c=null,d;switch(b.type){case createjs.PreloadJS.IMAGE:c=this._createImage();break;case createjs.PreloadJS.SOUND:c=b.tag||this._createAudio();break;case createjs.PreloadJS.CSS:c=this._createLink();break;case createjs.PreloadJS.JAVASCRIPT:c=this._createScript();break;case createjs.PreloadJS.SVG:var c=this._createSVG(),
f=this._createXML(a,"image/svg+xml");c.appendChild(f);break;case createjs.PreloadJS.XML:d=this._createXML(a,"text/xml");break;case createjs.PreloadJS.JSON:case createjs.PreloadJS.TEXT:d=a}if(c){if(b.type==createjs.PreloadJS.CSS)c.href=b.src;else if(b.type!=createjs.PreloadJS.SVG)c.src=b.src;return c}else return d};a._createXML=function(b,a){var c;window.DOMParser?(c=new DOMParser,c=c.parseFromString(b,a)):(c=new ActiveXObject("Microsoft.XMLDOM"),c.async=false,c.loadXML(b));return c};a._handleProgress=
function(b){var b=b.target,a=this._createResultData(b.getItem());a.progress=b.progress;this._sendFileProgress(a);this._updateProgress()};a._updateProgress=function(){var b=this._numItemsLoaded/this._numItems,a=this._numItems-this._numItemsLoaded;if(a>0){for(var c=0,d=0,f=this._currentLoads.length;d<f;d++)c+=this._currentLoads[d].progress;b+=c/a*(a/this._numItems)}this._sendProgress({loaded:b,total:1})};a._createLoadItem=function(a){var c={};switch(typeof a){case "string":c.src=a;break;case "object":a instanceof
HTMLAudioElement?(c.tag=a,c.src=c.tag.src,c.type=createjs.PreloadJS.SOUND):c=a}c.ext=this._getNameAfter(c.src,".");if(!c.type)c.type=this.getType(c.ext);if(c.id==null||c.id=="")c.id=c.src;if(a=this.typeHandlers[c.type]||this.extensionHandlers[c.ext]){a=a(c.src,c.type,c.id,c.data);if(a===false)return null;else if(a!==true){if(a.src!=null)c.src=a.src;if(a.id!=null)c.id=a.id;if(a.tag!=null&&a.tag.load instanceof Function)c.tag=a.tag}c.ext=this._getNameAfter(c.src,".")}a=this.useXHR;switch(c.type){case createjs.PreloadJS.JSON:case createjs.PreloadJS.XML:case createjs.PreloadJS.TEXT:a=
true;break;case createjs.PreloadJS.SOUND:c.ext=="ogg"&&createjs.PreloadJS.TAG_LOAD_OGGS&&(a=false)}return this.useXHR==true&&(c.type==createjs.PreloadJS.IMAGE||c.type==createjs.PreloadJS.SVG)?(c=this._createTagItem(c),c.useXHR=true,c):a?new createjs.XHRLoader(c):c.tag?new createjs.TagLoader(c):this._createTagItem(c)};a._createTagItem=function(a){var c,d="src",e=false;switch(a.type){case createjs.PreloadJS.IMAGE:c=this._createImage();break;case createjs.PreloadJS.SOUND:c=this._createAudio();break;
case createjs.PreloadJS.CSS:d="href";e=true;c=this._createLink();break;case createjs.PreloadJS.JAVASCRIPT:e=true;c=this._createScript();break;case createjs.PreloadJS.SVG:d="data",c=this._createSVG()}a.tag=c;return new createjs.TagLoader(a,d,e)};a.getType=function(a){switch(a){case "jpeg":case "jpg":case "gif":case "png":return createjs.PreloadJS.IMAGE;case "ogg":case "mp3":case "wav":return createjs.PreloadJS.SOUND;case "json":return createjs.PreloadJS.JSON;case "xml":return createjs.PreloadJS.XML;
case "css":return createjs.PreloadJS.CSS;case "js":return createjs.PreloadJS.JAVASCRIPT;case "svg":return createjs.PreloadJS.SVG;default:return createjs.PreloadJS.TEXT}};a._getNameAfter=function(a,c){var d=a.lastIndexOf(c),d=a.substr(d+1),e=d.lastIndexOf(/[\b|\?|\#|\s]/);return e==-1?d:d.substr(0,e)};a._createImage=function(){return document.createElement("img")};a._createSVG=function(){var a=document.createElement("object");a.type="image/svg+xml";return a};a._createAudio=function(){var a=document.createElement("audio");
a.autoplay=false;a.type="audio/ogg";return a};a._createScript=function(){var a=document.createElement("script");a.type="text/javascript";return a};a._createLink=function(){var a=document.createElement("link");a.type="text/css";a.rel="stylesheet";return a};a.toString=function(){return"[PreloadJS]"};d.proxy=function(a,c){return function(d){return a.apply(c,arguments)}};createjs.PreloadJS=d;var c=function(){};c.init=function(){var a=navigator.userAgent;c.isFirefox=a.indexOf("Firefox")>-1;c.isOpera=window.opera!=
null;c.isIOS=a.indexOf("iPod")>-1||a.indexOf("iPhone")>-1||a.indexOf("iPad")>-1};c.init();createjs.PreloadJS.BrowserDetect=c})();this.createjs=this.createjs||{};
(function(){var d=function(a,b,d){this.init(a,b,d)},a=d.prototype=new createjs.AbstractLoader;a._srcAttr=null;a._loadTimeOutTimeout=null;a.tagCompleteProxy=null;a.init=function(a,b,d){this._item=a;this._srcAttr=b||"src";this.useXHR=d==true;this.isAudio=a.tag instanceof HTMLAudioElement;this.tagCompleteProxy=createjs.PreloadJS.proxy(this._handleTagLoad,this)};a.cancel=function(){this.canceled=true;this._clean();var a=this.getItem();if(a!=null)a.src=null};a.load=function(){this.useXHR?this.loadXHR():
this.loadTag()};a.loadXHR=function(){var a=this.getItem(),a=new createjs.XHRLoader(a);a.onProgress=createjs.PreloadJS.proxy(this._handleProgress,this);a.onFileLoad=createjs.PreloadJS.proxy(this._handleXHRComplete,this);a.onComplete=createjs.PreloadJS.proxy(this._handleXHRComplete,this);a.onError=createjs.PreloadJS.proxy(this._handleLoadError,this);a.load()};a._handleXHRComplete=function(a){if(!this._isCanceled()){this._clean();a.target.onFileLoad=null;a.target.onComplete=null;var b=a.target.getItem();
a.target.getResult();b.type==createjs.PreloadJS.IMAGE?(b.tag.onload=createjs.PreloadJS.proxy(this._sendComplete,this),b.tag.src=b.src):(b.tag[this._srcAttr]=b.src,this._sendComplete())}};a._handleLoadError=function(a){a.error&&a.error.code==101?this.loadTag():(this._clean(),this._sendError(a))};a.loadTag=function(){var a=this.getItem(),b=a.tag;clearTimeout(this._loadTimeOutTimeout);this._loadTimeOutTimeout=setTimeout(createjs.PreloadJS.proxy(this._handleLoadTimeOut,this),createjs.PreloadJS.TIMEOUT_TIME);
if(this.isAudio)b.src=null,b.preload="auto",b.setAttribute("data-temp","true");b.onerror=createjs.PreloadJS.proxy(this._handleLoadError,this);b.onprogress=createjs.PreloadJS.proxy(this._handleProgress,this);this.isAudio?(b.onstalled=createjs.PreloadJS.proxy(this._handleStalled,this),b.addEventListener("canplaythrough",this.tagCompleteProxy,false)):b.onload=createjs.PreloadJS.proxy(this._handleTagLoad,this);b[this._srcAttr]=a.src;a.type==createjs.PreloadJS.SVG&&document.getElementsByTagName("body")[0].appendChild(b);
a=a.type==createjs.PreloadJS.SOUND&&a.ext=="ogg"&&createjs.PreloadJS.BrowserDetect.isFirefox;b.load!=null&&!a&&b.load()};a._handleLoadTimeOut=function(){this._clean();this._sendError()};a._handleStalled=function(){};a._handleLoadError=function(){this._clean();this._sendError()};a._handleTagLoad=function(){if(!this._isCanceled()){var a=this.getItem().tag;clearTimeout(this._loadTimeOutTimeout);if(!(this.loaded||this.isAudio&&a.readyState!==4))this.getItem().type==createjs.PreloadJS.SVG&&document.getElementsByTagName("body")[0].removeChild(a),
this.loaded=true,this._clean(),this._sendComplete()}};a._clean=function(){clearTimeout(this._loadTimeOutTimeout);var a=this.getItem().tag;a.onload=null;a.removeEventListener&&a.removeEventListener("canplaythrough",this.tagCompleteProxy,false);a.onstalled=null;a.onprogress=null;a.onerror=null};a._handleProgress=function(a){clearTimeout(this._loadTimeOutTimeout);if(this.isAudio){a=this.getItem();if(a.buffered==null)return;a={loaded:a.buffered.length>0?a.buffered.end(0):0,total:a.duration}}this._sendProgress(a)};
a.toString=function(){return"[PreloadJS TagLoader]"};createjs.TagLoader=d})();this.createjs=this.createjs||{};
(function(){var d=function(a){this.init(a)},a=d.prototype=new createjs.AbstractLoader;a._wasLoaded=false;a._request=null;a._loadTimeOutTimeout=null;a._xhrLevel=null;a.init=function(a){this._item=a;this._createXHR(a)};a.getResult=function(){try{return this._request.responseText}catch(a){}return this._request.response};a.cancel=function(){this.canceled=true;this._clean();this._request.abort()};a.load=function(){if(this._request==null)this.handleError();else{if(this._xhrLevel==1)this._loadTimeOutTimeout=
setTimeout(createjs.PreloadJS.proxy(this.handleTimeout,this),createjs.PreloadJS.TIMEOUT_TIME);this._request.onloadstart=createjs.PreloadJS.proxy(this.handleLoadStart,this);this._request.onprogress=createjs.PreloadJS.proxy(this.handleProgress,this);this._request.onabort=createjs.PreloadJS.proxy(this.handleAbort,this);this._request.onerror=createjs.PreloadJS.proxy(this.handleError,this);this._request.ontimeout=createjs.PreloadJS.proxy(this.handleTimeout,this);this._request.onload=createjs.PreloadJS.proxy(this.handleLoad,
this);this._request.onreadystatechange=createjs.PreloadJS.proxy(this.handleReadyStateChange,this);try{this._request.send()}catch(a){this._sendError({source:a})}}};a.handleProgress=function(a){a.loaded>0&&a.total==0||this._sendProgress({loaded:a.loaded,total:a.total})};a.handleLoadStart=function(){clearTimeout(this._loadTimeOutTimeout);this._sendLoadStart()};a.handleAbort=function(){this._clean();this._sendError()};a.handleError=function(){this._clean();this._sendError()};a.handleReadyStateChange=
function(){this._request.readyState==4&&this.handleLoad()};a._checkError=function(){switch(parseInt(this._request.status)){case 404:case 0:return false}return this._hasResponse()||this._hasTextResponse()||this._hasXMLResponse()};a._hasResponse=function(){return this._request.response!=null};a._hasTextResponse=function(){try{return this._request.responseText!=null}catch(a){return false}};a._hasXMLResponse=function(){try{return this._request.responseXML!=null}catch(a){return false}};a.handleLoad=function(){if(!this.loaded)this.loaded=
true,this._checkError()?(this._clean(),this._sendComplete()):this.handleError()};a.handleTimeout=function(){this._clean();this._sendError()};a._createXHR=function(a){this._xhrLevel=1;if(window.ArrayBuffer)this._xhrLevel=2;if(window.XMLHttpRequest)this._request=new XMLHttpRequest;else try{this._request=new ActiveXObject("MSXML2.XMLHTTP.3.0")}catch(b){return null}a.type==createjs.PreloadJS.TEXT&&this._request.overrideMimeType&&this._request.overrideMimeType("text/plain; charset=x-user-defined");this._request.open("GET",
a.src,true);if(createjs.PreloadJS.isBinary(a.type))this._request.responseType="arraybuffer";return true};a._clean=function(){clearTimeout(this._loadTimeOutTimeout);var a=this._request;a.onloadstart=null;a.onprogress=null;a.onabort=null;a.onerror=null;a.onload=null;a.ontimeout=null;a.onloadend=null;a.onreadystatechange=null;clearInterval(this._checkLoadInterval)};a.toString=function(){return"[PreloadJS XHRLoader]"};createjs.XHRLoader=d})();
 
 /*
* EaselJS
* Visit http://createjs.com/ for documentation, updates and examples.
*
* Copyright (c) 2011 gskinner.com, inc.
* 
* Distributed under the terms of the MIT license.
* http://www.opensource.org/licenses/mit-license.html
*
* This notice shall be included in all copies or substantial portions of the Software.
*/
this.createjs=this.createjs||{};(function(){var c=function(){throw"UID cannot be instantiated";};c._nextID=0;c.get=function(){return c._nextID++};createjs.UID=c})();this.createjs=this.createjs||{};
(function(){var c=function(){throw"Ticker cannot be instantiated.";};c.useRAF=null;c._listeners=null;c._pauseable=null;c._paused=false;c._inited=false;c._startTime=0;c._pausedTime=0;c._ticks=0;c._pausedTicks=0;c._interval=50;c._lastTime=0;c._times=null;c._tickTimes=null;c._rafActive=false;c._timeoutID=null;c.addListener=function(a,l){a!=null&&(c._inited||c.init(),c.removeListener(a),c._pauseable[c._listeners.length]=l==null?true:l,c._listeners.push(a))};c.init=function(){c._inited=true;c._times=[];
c._tickTimes=[];c._pauseable=[];c._listeners=[];c._times.push(c._lastTime=c._startTime=c._getTime());c.setInterval(c._interval)};c.removeListener=function(a){var l=c._listeners;l&&(a=l.indexOf(a),a!=-1&&(l.splice(a,1),c._pauseable.splice(a,1)))};c.removeAllListeners=function(){c._listeners=[];c._pauseable=[]};c.setInterval=function(a){c._interval=a;c._inited&&c._setupTick()};c.getInterval=function(){return c._interval};c.setFPS=function(a){c.setInterval(1E3/a)};c.getFPS=function(){return 1E3/c._interval};
c.getMeasuredFPS=function(a){if(c._times.length<2)return-1;a==null&&(a=c.getFPS()|0);a=Math.min(c._times.length-1,a);return 1E3/((c._times[0]-c._times[a])/a)};c.setPaused=function(a){c._paused=a};c.getPaused=function(){return c._paused};c.getTime=function(a){return c._getTime()-c._startTime-(a?c._pausedTime:0)};c.getTicks=function(a){return c._ticks-(a?c._pausedTicks:0)};c._handleAF=function(){c._rafActive=false;c._setupTick();c._getTime()-c._lastTime>=(c._interval-1)*0.97&&c._tick()};c._handleTimeout=
function(){c.timeoutID=null;c._setupTick();c._tick()};c._setupTick=function(){if(!(c._rafActive||c.timeoutID!=null)){if(c.useRAF){var a=window.requestAnimationFrame||window.webkitRequestAnimationFrame||window.mozRequestAnimationFrame||window.oRequestAnimationFrame||window.msRequestAnimationFrame;if(a){a(c._handleAF);c._rafActive=true;return}}c.timeoutID=setTimeout(c._handleTimeout,c._interval)}};c._tick=function(){var a=c._getTime();c._ticks++;var l=a-c._lastTime,b=c._paused;b&&(c._pausedTicks++,
c._pausedTime+=l);c._lastTime=a;for(var d=c._pauseable,e=c._listeners.slice(),f=e?e.length:0,g=0;g<f;g++){var i=e[g];i==null||b&&d[g]||(i.tick?i.tick(l,b):i instanceof Function&&i(l,b))}for(c._tickTimes.unshift(c._getTime()-a);c._tickTimes.length>100;)c._tickTimes.pop();for(c._times.unshift(a);c._times.length>100;)c._times.pop()};var b=window.performance&&(performance.now||performance.mozNow||performance.msNow||performance.oNow||performance.webkitNow);c._getTime=function(){return b&&b.call(performance)||
(new Date).getTime()};createjs.Ticker=c})();this.createjs=this.createjs||{};
(function(){var c=function(a,l,b,d,e,c,g,i,j){this.initialize(a,l,b,d,e,c,g,i,j)},b=c.prototype;b.stageX=0;b.stageY=0;b.rawX=0;b.rawY=0;b.type=null;b.nativeEvent=null;b.onMouseMove=null;b.onMouseUp=null;b.target=null;b.pointerID=0;b.primary=false;b.initialize=function(a,l,b,d,e,c,g,i,j){this.type=a;this.stageX=l;this.stageY=b;this.target=d;this.nativeEvent=e;this.pointerID=c;this.primary=g;this.rawX=i==null?l:i;this.rawY=j==null?b:j};b.clone=function(){return new c(this.type,this.stageX,this.stageY,
this.target,this.nativeEvent,this.pointerID,this.primary,this.rawX,this.rawY)};b.toString=function(){return"[MouseEvent (type="+this.type+" stageX="+this.stageX+" stageY="+this.stageY+")]"};createjs.MouseEvent=c})();this.createjs=this.createjs||{};
(function(){var c=function(a,l,b,d,e,c){this.initialize(a,l,b,d,e,c)},b=c.prototype;c.identity=null;c.DEG_TO_RAD=Math.PI/180;b.a=1;b.b=0;b.c=0;b.d=1;b.tx=0;b.ty=0;b.alpha=1;b.shadow=null;b.compositeOperation=null;b.initialize=function(a,l,b,d,e,c){if(a!=null)this.a=a;this.b=l||0;this.c=b||0;if(d!=null)this.d=d;this.tx=e||0;this.ty=c||0;return this};b.prepend=function(a,l,b,d,e,c){var g=this.tx;if(a!=1||l!=0||b!=0||d!=1){var i=this.a,j=this.c;this.a=i*a+this.b*b;this.b=i*l+this.b*d;this.c=j*a+this.d*
b;this.d=j*l+this.d*d}this.tx=g*a+this.ty*b+e;this.ty=g*l+this.ty*d+c;return this};b.append=function(a,l,b,d,e,c){var g=this.a,i=this.b,j=this.c,k=this.d;this.a=a*g+l*j;this.b=a*i+l*k;this.c=b*g+d*j;this.d=b*i+d*k;this.tx=e*g+c*j+this.tx;this.ty=e*i+c*k+this.ty;return this};b.prependMatrix=function(a){this.prepend(a.a,a.b,a.c,a.d,a.tx,a.ty);this.prependProperties(a.alpha,a.shadow,a.compositeOperation);return this};b.appendMatrix=function(a){this.append(a.a,a.b,a.c,a.d,a.tx,a.ty);this.appendProperties(a.alpha,
a.shadow,a.compositeOperation);return this};b.prependTransform=function(a,l,b,d,e,f,g,i,j){if(e%360)var k=e*c.DEG_TO_RAD,e=Math.cos(k),k=Math.sin(k);else e=1,k=0;if(i||j)this.tx-=i,this.ty-=j;f||g?(f*=c.DEG_TO_RAD,g*=c.DEG_TO_RAD,this.prepend(e*b,k*b,-k*d,e*d,0,0),this.prepend(Math.cos(g),Math.sin(g),-Math.sin(f),Math.cos(f),a,l)):this.prepend(e*b,k*b,-k*d,e*d,a,l);return this};b.appendTransform=function(a,l,b,d,e,f,g,i,j){if(e%360)var k=e*c.DEG_TO_RAD,e=Math.cos(k),k=Math.sin(k);else e=1,k=0;f||
g?(f*=c.DEG_TO_RAD,g*=c.DEG_TO_RAD,this.append(Math.cos(g),Math.sin(g),-Math.sin(f),Math.cos(f),a,l),this.append(e*b,k*b,-k*d,e*d,0,0)):this.append(e*b,k*b,-k*d,e*d,a,l);if(i||j)this.tx-=i*this.a+j*this.c,this.ty-=i*this.b+j*this.d;return this};b.rotate=function(a){var l=Math.cos(a),a=Math.sin(a),b=this.a,d=this.c,c=this.tx;this.a=b*l-this.b*a;this.b=b*a+this.b*l;this.c=d*l-this.d*a;this.d=d*a+this.d*l;this.tx=c*l-this.ty*a;this.ty=c*a+this.ty*l;return this};b.skew=function(a,l){a*=c.DEG_TO_RAD;l*=
c.DEG_TO_RAD;this.append(Math.cos(l),Math.sin(l),-Math.sin(a),Math.cos(a),0,0);return this};b.scale=function(a,l){this.a*=a;this.d*=l;this.tx*=a;this.ty*=l;return this};b.translate=function(a,l){this.tx+=a;this.ty+=l;return this};b.identity=function(){this.alpha=this.a=this.d=1;this.b=this.c=this.tx=this.ty=0;this.shadow=this.compositeOperation=null;return this};b.invert=function(){var a=this.a,l=this.b,b=this.c,d=this.d,c=this.tx,f=a*d-l*b;this.a=d/f;this.b=-l/f;this.c=-b/f;this.d=a/f;this.tx=(b*
this.ty-d*c)/f;this.ty=-(a*this.ty-l*c)/f;return this};b.isIdentity=function(){return this.tx==0&&this.ty==0&&this.a==1&&this.b==0&&this.c==0&&this.d==1};b.decompose=function(a){a==null&&(a={});a.x=this.tx;a.y=this.ty;a.scaleX=Math.sqrt(this.a*this.a+this.b*this.b);a.scaleY=Math.sqrt(this.c*this.c+this.d*this.d);var b=Math.atan2(-this.c,this.d),h=Math.atan2(this.b,this.a);b==h?(a.rotation=h/c.DEG_TO_RAD,this.a<0&&this.d>=0&&(a.rotation+=a.rotation<=0?180:-180),a.skewX=a.skewY=0):(a.skewX=b/c.DEG_TO_RAD,
a.skewY=h/c.DEG_TO_RAD);return a};b.reinitialize=function(a,b,h,d,c,f,g,i,j){this.initialize(a,b,h,d,c,f);this.alpha=g||1;this.shadow=i;this.compositeOperation=j;return this};b.appendProperties=function(a,b,h){this.alpha*=a;this.shadow=b||this.shadow;this.compositeOperation=h||this.compositeOperation;return this};b.prependProperties=function(a,b,h){this.alpha*=a;this.shadow=this.shadow||b;this.compositeOperation=this.compositeOperation||h;return this};b.clone=function(){var a=new c(this.a,this.b,
this.c,this.d,this.tx,this.ty);a.shadow=this.shadow;a.alpha=this.alpha;a.compositeOperation=this.compositeOperation;return a};b.toString=function(){return"[Matrix2D (a="+this.a+" b="+this.b+" c="+this.c+" d="+this.d+" tx="+this.tx+" ty="+this.ty+")]"};c.identity=new c(1,0,0,1,0,0);createjs.Matrix2D=c})();this.createjs=this.createjs||{};(function(){var c=function(a,b){this.initialize(a,b)},b=c.prototype;b.x=0;b.y=0;b.initialize=function(a,b){this.x=a==null?0:a;this.y=b==null?0:b};b.clone=function(){return new c(this.x,this.y)};b.toString=function(){return"[Point (x="+this.x+" y="+this.y+")]"};createjs.Point=c})();this.createjs=this.createjs||{};(function(){var c=function(a,b,h,d){this.initialize(a,b,h,d)},b=c.prototype;b.x=0;b.y=0;b.width=0;b.height=0;b.initialize=function(a,b,h,d){this.x=a==null?0:a;this.y=b==null?0:b;this.width=h==null?0:h;this.height=d==null?0:d};b.clone=function(){return new c(this.x,this.y,this.width,this.height)};b.toString=function(){return"[Rectangle (x="+this.x+" y="+this.y+" width="+this.width+" height="+this.height+")]"};createjs.Rectangle=c})();this.createjs=this.createjs||{};(function(){var c=function(a,b,h,d){this.initialize(a,b,h,d)},b=c.prototype;c.identity=null;b.color=null;b.offsetX=0;b.offsetY=0;b.blur=0;b.initialize=function(a,b,h,d){this.color=a;this.offsetX=b;this.offsetY=h;this.blur=d};b.toString=function(){return"[Shadow]"};b.clone=function(){return new c(this.color,this.offsetX,this.offsetY,this.blur)};c.identity=new c("transparent",0,0,0);createjs.Shadow=c})();this.createjs=this.createjs||{};
(function(){var c=function(a){this.initialize(a)},b=c.prototype;b.complete=true;b.onComplete=null;b._animations=null;b._frames=null;b._images=null;b._data=null;b._loadCount=0;b._frameHeight=0;b._frameWidth=0;b._numFrames=0;b._regX=0;b._regY=0;b.initialize=function(a){var b,h,d;if(a!=null){if(a.images&&(h=a.images.length)>0){d=this._images=[];for(b=0;b<h;b++){var c=a.images[b];if(typeof c=="string"){var f=c,c=new Image;c.src=f}d.push(c);if(!c.getContext&&!c.complete)this._loadCount++,this.complete=
false,function(a){c.onload=function(){a._handleImageLoad()}}(this)}}if(a.frames!=null)if(a.frames instanceof Array){this._frames=[];d=a.frames;for(b=0,h=d.length;b<h;b++)f=d[b],this._frames.push({image:this._images[f[4]?f[4]:0],rect:new createjs.Rectangle(f[0],f[1],f[2],f[3]),regX:f[5]||0,regY:f[6]||0})}else h=a.frames,this._frameWidth=h.width,this._frameHeight=h.height,this._regX=h.regX||0,this._regY=h.regY||0,this._numFrames=h.count,this._loadCount==0&&this._calculateFrames();if((h=a.animations)!=
null){this._animations=[];this._data={};for(var g in h){a={name:g};f=h[g];if(isNaN(f))if(f instanceof Array){a.frequency=f[3];a.next=f[2];d=a.frames=[];for(b=f[0];b<=f[1];b++)d.push(b)}else a.frequency=f.frequency,a.next=f.next,b=f.frames,d=a.frames=!isNaN(b)?[b]:b.slice(0);else d=a.frames=[f];a.next=d.length<2||a.next==false?null:a.next==null||a.next==true?g:a.next;if(!a.frequency)a.frequency=1;this._animations.push(g);this._data[g]=a}}}};b.getNumFrames=function(a){return a==null?this._frames?this._frames.length:
this._numFrames:(a=this._data[a],a==null?0:a.frames.length)};b.getAnimations=function(){return this._animations.slice(0)};b.getAnimation=function(a){return this._data[a]};b.getFrame=function(a){return this.complete&&this._frames&&(frame=this._frames[a])?frame:null};b.toString=function(){return"[SpriteSheet]"};b.clone=function(){var a=new c;a.complete=this.complete;a._animations=this._animations;a._frames=this._frames;a._images=this._images;a._data=this._data;a._frameHeight=this._frameHeight;a._frameWidth=
this._frameWidth;a._numFrames=this._numFrames;a._loadCount=this._loadCount;return a};b._handleImageLoad=function(){if(--this._loadCount==0)this._calculateFrames(),this.complete=true,this.onComplete&&this.onComplete()};b._calculateFrames=function(){if(!(this._frames||this._frameWidth==0)){this._frames=[];for(var a=0,b=this._frameWidth,h=this._frameHeight,d=0,c=this._images;d<c.length;d++){for(var f=c[d],g=(f.width+1)/b|0,i=(f.height+1)/h|0,i=this._numFrames>0?Math.min(this._numFrames-a,g*i):g*i,j=
0;j<i;j++)this._frames.push({image:f,rect:new createjs.Rectangle(j%g*b,(j/g|0)*h,b,h),regX:this._regX,regY:this._regY});a+=i}this._numFrames=a}};createjs.SpriteSheet=c})();this.createjs=this.createjs||{};
(function(){function c(a,b,d){this.f=a;this.params=b;this.path=d==null?true:d}c.prototype.exec=function(a){this.f.apply(a,this.params)};var b=function(){this.initialize()},a=b.prototype;b.getRGB=function(a,b,d,c){a!=null&&d==null&&(c=b,d=a&255,b=a>>8&255,a=a>>16&255);return c==null?"rgb("+a+","+b+","+d+")":"rgba("+a+","+b+","+d+","+c+")"};b.getHSL=function(a,b,c,e){return e==null?"hsl("+a%360+","+b+"%,"+c+"%)":"hsla("+a%360+","+b+"%,"+c+"%,"+e+")"};b.BASE_64={A:0,B:1,C:2,D:3,E:4,F:5,G:6,H:7,I:8,J:9,
K:10,L:11,M:12,N:13,O:14,P:15,Q:16,R:17,S:18,T:19,U:20,V:21,W:22,X:23,Y:24,Z:25,a:26,b:27,c:28,d:29,e:30,f:31,g:32,h:33,i:34,j:35,k:36,l:37,m:38,n:39,o:40,p:41,q:42,r:43,s:44,t:45,u:46,v:47,w:48,x:49,y:50,z:51,0:52,1:53,2:54,3:55,4:56,5:57,6:58,7:59,8:60,9:61,"+":62,"/":63};b.STROKE_CAPS_MAP=["butt","round","square"];b.STROKE_JOINTS_MAP=["miter","round","bevel"];b._ctx=(createjs.createCanvas?createjs.createCanvas():document.createElement("canvas")).getContext("2d");b.beginCmd=new c(b._ctx.beginPath,
[],false);b.fillCmd=new c(b._ctx.fill,[],false);b.strokeCmd=new c(b._ctx.stroke,[],false);a._strokeInstructions=null;a._strokeStyleInstructions=null;a._fillInstructions=null;a._instructions=null;a._oldInstructions=null;a._activeInstructions=null;a._active=false;a._dirty=false;a.initialize=function(){this.clear();this._ctx=b._ctx};a.draw=function(a){this._dirty&&this._updateInstructions();for(var b=this._instructions,c=0,e=b.length;c<e;c++)b[c].exec(a)};a.drawAsPath=function(a){this._dirty&&this._updateInstructions();
for(var b,c=this._instructions,e=0,f=c.length;e<f;e++)((b=c[e]).path||e==0)&&b.exec(a)};a.moveTo=function(a,b){this._activeInstructions.push(new c(this._ctx.moveTo,[a,b]));return this};a.lineTo=function(a,b){this._dirty=this._active=true;this._activeInstructions.push(new c(this._ctx.lineTo,[a,b]));return this};a.arcTo=function(a,b,d,e,f){this._dirty=this._active=true;this._activeInstructions.push(new c(this._ctx.arcTo,[a,b,d,e,f]));return this};a.arc=function(a,b,d,e,f,g){this._dirty=this._active=
true;g==null&&(g=false);this._activeInstructions.push(new c(this._ctx.arc,[a,b,d,e,f,g]));return this};a.quadraticCurveTo=function(a,b,d,e){this._dirty=this._active=true;this._activeInstructions.push(new c(this._ctx.quadraticCurveTo,[a,b,d,e]));return this};a.bezierCurveTo=function(a,b,d,e,f,g){this._dirty=this._active=true;this._activeInstructions.push(new c(this._ctx.bezierCurveTo,[a,b,d,e,f,g]));return this};a.rect=function(a,b,d,e){this._dirty=this._active=true;this._activeInstructions.push(new c(this._ctx.rect,
[a,b,d,e]));return this};a.closePath=function(){if(this._active)this._dirty=true,this._activeInstructions.push(new c(this._ctx.closePath,[]));return this};a.clear=function(){this._instructions=[];this._oldInstructions=[];this._activeInstructions=[];this._strokeStyleInstructions=this._strokeInstructions=this._fillInstructions=null;this._active=this._dirty=false;return this};a.beginFill=function(a){this._active&&this._newPath();this._fillInstructions=a?[new c(this._setProp,["fillStyle",a],false)]:null;
return this};a.beginLinearGradientFill=function(a,b,d,e,f,g){this._active&&this._newPath();d=this._ctx.createLinearGradient(d,e,f,g);e=0;for(f=a.length;e<f;e++)d.addColorStop(b[e],a[e]);this._fillInstructions=[new c(this._setProp,["fillStyle",d],false)];return this};a.beginRadialGradientFill=function(a,b,d,e,f,g,i,j){this._active&&this._newPath();d=this._ctx.createRadialGradient(d,e,f,g,i,j);e=0;for(f=a.length;e<f;e++)d.addColorStop(b[e],a[e]);this._fillInstructions=[new c(this._setProp,["fillStyle",
d],false)];return this};a.beginBitmapFill=function(a,b){this._active&&this._newPath();var d=this._ctx.createPattern(a,b||"");this._fillInstructions=[new c(this._setProp,["fillStyle",d],false)];return this};a.endFill=function(){return this.beginFill()};a.setStrokeStyle=function(a,h,d,e){this._active&&this._newPath();this._strokeStyleInstructions=[new c(this._setProp,["lineWidth",a==null?"1":a],false),new c(this._setProp,["lineCap",h==null?"butt":isNaN(h)?h:b.STROKE_CAPS_MAP[h]],false),new c(this._setProp,
["lineJoin",d==null?"miter":isNaN(d)?d:b.STROKE_JOINTS_MAP[d]],false),new c(this._setProp,["miterLimit",e==null?"10":e],false)];return this};a.beginStroke=function(a){this._active&&this._newPath();this._strokeInstructions=a?[new c(this._setProp,["strokeStyle",a],false)]:null;return this};a.beginLinearGradientStroke=function(a,b,d,e,f,g){this._active&&this._newPath();d=this._ctx.createLinearGradient(d,e,f,g);e=0;for(f=a.length;e<f;e++)d.addColorStop(b[e],a[e]);this._strokeInstructions=[new c(this._setProp,
["strokeStyle",d],false)];return this};a.beginRadialGradientStroke=function(a,b,d,e,f,g,i,j){this._active&&this._newPath();d=this._ctx.createRadialGradient(d,e,f,g,i,j);e=0;for(f=a.length;e<f;e++)d.addColorStop(b[e],a[e]);this._strokeInstructions=[new c(this._setProp,["strokeStyle",d],false)];return this};a.beginBitmapStroke=function(a,b){this._active&&this._newPath();var d=this._ctx.createPattern(a,b||"");this._strokeInstructions=[new c(this._setProp,["strokeStyle",d],false)];return this};a.endStroke=
function(){this.beginStroke();return this};a.curveTo=a.quadraticCurveTo;a.drawRect=a.rect;a.drawRoundRect=function(a,b,c,e,f){this.drawRoundRectComplex(a,b,c,e,f,f,f,f);return this};a.drawRoundRectComplex=function(a,b,d,e,f,g,i,j){var k=(d<e?d:e)/2,m=0,o=0,n=0,q=0;f<0&&(f*=m=-1);f>k&&(f=k);g<0&&(g*=o=-1);g>k&&(g=k);i<0&&(i*=n=-1);i>k&&(i=k);j<0&&(j*=q=-1);j>k&&(j=k);this._dirty=this._active=true;var k=this._ctx.arcTo,p=this._ctx.lineTo;this._activeInstructions.push(new c(this._ctx.moveTo,[a+d-g,b]),
new c(k,[a+d+g*o,b-g*o,a+d,b+g,g]),new c(p,[a+d,b+e-i]),new c(k,[a+d+i*n,b+e+i*n,a+d-i,b+e,i]),new c(p,[a+j,b+e]),new c(k,[a-j*q,b+e+j*q,a,b+e-j,j]),new c(p,[a,b+f]),new c(k,[a-f*m,b-f*m,a+f,b,f]),new c(this._ctx.closePath));return this};a.drawCircle=function(a,b,c){this.arc(a,b,c,0,Math.PI*2);return this};a.drawEllipse=function(a,b,d,e){this._dirty=this._active=true;var f=d/2*0.5522848,g=e/2*0.5522848,i=a+d,j=b+e,d=a+d/2,e=b+e/2;this._activeInstructions.push(new c(this._ctx.moveTo,[a,e]),new c(this._ctx.bezierCurveTo,
[a,e-g,d-f,b,d,b]),new c(this._ctx.bezierCurveTo,[d+f,b,i,e-g,i,e]),new c(this._ctx.bezierCurveTo,[i,e+g,d+f,j,d,j]),new c(this._ctx.bezierCurveTo,[d-f,j,a,e+g,a,e]));return this};a.drawPolyStar=function(a,b,d,e,f,g){this._dirty=this._active=true;f==null&&(f=0);f=1-f;g==null?g=0:g/=180/Math.PI;var i=Math.PI/e;this._activeInstructions.push(new c(this._ctx.moveTo,[a+Math.cos(g)*d,b+Math.sin(g)*d]));for(var j=0;j<e;j++)g+=i,f!=1&&this._activeInstructions.push(new c(this._ctx.lineTo,[a+Math.cos(g)*d*
f,b+Math.sin(g)*d*f])),g+=i,this._activeInstructions.push(new c(this._ctx.lineTo,[a+Math.cos(g)*d,b+Math.sin(g)*d]));return this};a.decodePath=function(a){for(var c=[this.moveTo,this.lineTo,this.quadraticCurveTo,this.bezierCurveTo],d=[2,2,4,6],e=0,f=a.length,g=[],i=0,j=0,k=b.BASE_64;e<f;){var m=a.charAt(e),o=k[m],n=o>>3,q=c[n];if(!q||o&3)throw"bad path data (@"+e+"): "+m;m=d[n];n||(i=j=0);g.length=0;e++;o=(o>>2&1)+2;for(n=0;n<m;n++){var p=k[a.charAt(e)],s=p>>5?-1:1,p=(p&31)<<6|k[a.charAt(e+1)];o==
3&&(p=p<<6|k[a.charAt(e+2)]);p=s*p/10;n%2?i=p+=i:j=p+=j;g[n]=p;e+=o}q.apply(this,g)}return this};a.clone=function(){var a=new b;a._instructions=this._instructions.slice();a._activeInstructions=this._activeInstructions.slice();a._oldInstructions=this._oldInstructions.slice();if(this._fillInstructions)a._fillInstructions=this._fillInstructions.slice();if(this._strokeInstructions)a._strokeInstructions=this._strokeInstructions.slice();if(this._strokeStyleInstructions)a._strokeStyleInstructions=this._strokeStyleInstructions.slice();
a._active=this._active;a._dirty=this._dirty;a.drawAsPath=this.drawAsPath;return a};a.toString=function(){return"[Graphics]"};a.mt=a.moveTo;a.lt=a.lineTo;a.at=a.arcTo;a.bt=a.bezierCurveTo;a.qt=a.quadraticCurveTo;a.a=a.arc;a.r=a.rect;a.cp=a.closePath;a.c=a.clear;a.f=a.beginFill;a.lf=a.beginLinearGradientFill;a.rf=a.beginRadialGradientFill;a.bf=a.beginBitmapFill;a.ef=a.endFill;a.ss=a.setStrokeStyle;a.s=a.beginStroke;a.ls=a.beginLinearGradientStroke;a.rs=a.beginRadialGradientStroke;a.bs=a.beginBitmapStroke;
a.es=a.endStroke;a.dr=a.drawRect;a.rr=a.drawRoundRect;a.rc=a.drawRoundRectComplex;a.dc=a.drawCircle;a.de=a.drawEllipse;a.dp=a.drawPolyStar;a.p=a.decodePath;a._updateInstructions=function(){this._instructions=this._oldInstructions.slice();this._instructions.push(b.beginCmd);this._fillInstructions&&this._instructions.push.apply(this._instructions,this._fillInstructions);this._strokeInstructions&&(this._instructions.push.apply(this._instructions,this._strokeInstructions),this._strokeStyleInstructions&&
this._instructions.push.apply(this._instructions,this._strokeStyleInstructions));this._instructions.push.apply(this._instructions,this._activeInstructions);this._fillInstructions&&this._instructions.push(b.fillCmd);this._strokeInstructions&&this._instructions.push(b.strokeCmd)};a._getEllipseArc=function(a,b,d,e){var f=d/2*0.5522848,g=e/2*0.5522848,i=a+d,j=b+e,d=a+d/2,e=b+e/2;this._activeInstructions.push(new c(this._ctx.moveTo,[a,e]),new c(this._ctx.bezierCurveTo,[a,e-g,d-f,b,d,b]),new c(this._ctx.bezierCurveTo,
[d+f,b,i,e-g,i,e]),new c(this._ctx.bezierCurveTo,[i,e+g,d+f,j,d,j]),new c(this._ctx.bezierCurveTo,[d-f,j,a,e+g,a,e]));return this};a._newPath=function(){this._dirty&&this._updateInstructions();this._oldInstructions=this._instructions;this._activeInstructions=[];this._active=this._dirty=false};a._setProp=function(a,b){this[a]=b};createjs.Graphics=b})();this.createjs=this.createjs||{};
(function(){var c=function(){this.initialize()},b=c.prototype;c.suppressCrossDomainErrors=false;c._hitTestCanvas=createjs.createCanvas?createjs.createCanvas():document.createElement("canvas");c._hitTestCanvas.width=c._hitTestCanvas.height=1;c._hitTestContext=c._hitTestCanvas.getContext("2d");c._nextCacheID=1;b.alpha=1;b.cacheCanvas=null;b.id=-1;b.mouseEnabled=true;b.name=null;b.parent=null;b.regX=0;b.regY=0;b.rotation=0;b.scaleX=1;b.scaleY=1;b.skewX=0;b.skewY=0;b.shadow=null;b.visible=true;b.x=0;
b.y=0;b.compositeOperation=null;b.snapToPixel=false;b.onPress=null;b.onClick=null;b.onDoubleClick=null;b.onMouseOver=null;b.onMouseOut=null;b.onTick=null;b.filters=null;b.cacheID=0;b.mask=null;b.hitArea=null;b._cacheOffsetX=0;b._cacheOffsetY=0;b._cacheScale=1;b._cacheDataURLID=0;b._cacheDataURL=null;b._matrix=null;b.initialize=function(){this.id=createjs.UID.get();this._matrix=new createjs.Matrix2D};b.isVisible=function(){return this.visible&&this.alpha>0&&this.scaleX!=0&&this.scaleY!=0};b.draw=function(a,
b){var c=this.cacheCanvas;if(b||!c)return false;var d=this._cacheScale;a.drawImage(c,this._cacheOffsetX,this._cacheOffsetY,c.width/d,c.height/d);return true};b.updateContext=function(a){var b,c=this.mask;c&&c.graphics&&(b=c.getMatrix(c._matrix),a.transform(b.a,b.b,b.c,b.d,b.tx,b.ty),c.graphics.drawAsPath(a),a.clip(),b.invert(),a.transform(b.a,b.b,b.c,b.d,b.tx,b.ty));b=this._matrix.identity().appendTransform(this.x,this.y,this.scaleX,this.scaleY,this.rotation,this.skewX,this.skewY,this.regX,this.regY);
createjs.Stage._snapToPixelEnabled&&this.snapToPixel?a.transform(b.a,b.b,b.c,b.d,b.tx+0.5|0,b.ty+0.5|0):a.transform(b.a,b.b,b.c,b.d,b.tx,b.ty);a.globalAlpha*=this.alpha;if(this.compositeOperation)a.globalCompositeOperation=this.compositeOperation;this.shadow&&this._applyShadow(a,this.shadow)};b.cache=function(a,b,c,d,e){e=e||1;if(!this.cacheCanvas)this.cacheCanvas=createjs.createCanvas?createjs.createCanvas():document.createElement("canvas");this.cacheCanvas.width=Math.ceil(c*e);this.cacheCanvas.height=
Math.ceil(d*e);this._cacheOffsetX=a;this._cacheOffsetY=b;this._cacheScale=e||1;this.updateCache()};b.updateCache=function(a){var b=this.cacheCanvas,h=this._cacheOffsetX,d=this._cacheOffsetY,e=this._cacheScale;if(!b)throw"cache() must be called before updateCache()";var f=b.getContext("2d");f.save();a||f.clearRect(0,0,b.width,b.height);f.globalCompositeOperation=a;f.setTransform(e,0,0,e,-h,-d);this.draw(f,true);this._applyFilters();f.restore();this.cacheID=c._nextCacheID++};b.uncache=function(){this._cacheDataURL=
this.cacheCanvas=null;this.cacheID=this._cacheOffsetX=this._cacheOffsetY=0;this._cacheScale=1};b.getCacheDataURL=function(){if(!this.cacheCanvas)return null;if(this.cacheID!=this._cacheDataURLID)this._cacheDataURL=this.cacheCanvas.toDataURL();return this._cacheDataURL};b.getStage=function(){for(var a=this;a.parent;)a=a.parent;return a instanceof createjs.Stage?a:null};b.localToGlobal=function(a,b){var c=this.getConcatenatedMatrix(this._matrix);if(c==null)return null;c.append(1,0,0,1,a,b);return new createjs.Point(c.tx,
c.ty)};b.globalToLocal=function(a,b){var c=this.getConcatenatedMatrix(this._matrix);if(c==null)return null;c.invert();c.append(1,0,0,1,a,b);return new createjs.Point(c.tx,c.ty)};b.localToLocal=function(a,b,c){a=this.localToGlobal(a,b);return c.globalToLocal(a.x,a.y)};b.setTransform=function(a,b,c,d,e,f,g,i,j){this.x=a||0;this.y=b||0;this.scaleX=c==null?1:c;this.scaleY=d==null?1:d;this.rotation=e||0;this.skewX=f||0;this.skewY=g||0;this.regX=i||0;this.regY=j||0;return this};b.getMatrix=function(a){return(a?
a.identity():new createjs.Matrix2D).appendTransform(this.x,this.y,this.scaleX,this.scaleY,this.rotation,this.skewX,this.skewY,this.regX,this.regY).appendProperties(this.alpha,this.shadow,this.compositeOperation)};b.getConcatenatedMatrix=function(a){a?a.identity():a=new createjs.Matrix2D;for(var b=this;b!=null;)a.prependTransform(b.x,b.y,b.scaleX,b.scaleY,b.rotation,b.skewX,b.skewY,b.regX,b.regY).prependProperties(b.alpha,b.shadow,b.compositeOperation),b=b.parent;return a};b.hitTest=function(a,b){var h=
c._hitTestContext,d=c._hitTestCanvas;h.setTransform(1,0,0,1,-a,-b);this.draw(h);h=this._testHit(h);d.width=0;d.width=1;return h};b.clone=function(){var a=new c;this.cloneProps(a);return a};b.toString=function(){return"[DisplayObject (name="+this.name+")]"};b.cloneProps=function(a){a.alpha=this.alpha;a.name=this.name;a.regX=this.regX;a.regY=this.regY;a.rotation=this.rotation;a.scaleX=this.scaleX;a.scaleY=this.scaleY;a.shadow=this.shadow;a.skewX=this.skewX;a.skewY=this.skewY;a.visible=this.visible;
a.x=this.x;a.y=this.y;a.mouseEnabled=this.mouseEnabled;a.compositeOperation=this.compositeOperation;if(this.cacheCanvas)a.cacheCanvas=this.cacheCanvas.cloneNode(true),a.cacheCanvas.getContext("2d").putImageData(this.cacheCanvas.getContext("2d").getImageData(0,0,this.cacheCanvas.width,this.cacheCanvas.height),0,0)};b._applyShadow=function(a,b){b=b||Shadow.identity;a.shadowColor=b.color;a.shadowOffsetX=b.offsetX;a.shadowOffsetY=b.offsetY;a.shadowBlur=b.blur};b._tick=function(a){if(this.onTick)if(a)this.onTick.apply(this,
a);else this.onTick()};b._testHit=function(a){try{var b=a.getImageData(0,0,1,1).data[3]>1}catch(h){if(!c.suppressCrossDomainErrors)throw"An error has occurred. This is most likely due to security restrictions on reading canvas pixel data with local or cross-domain images.";}return b};b._applyFilters=function(){if(this.filters&&this.filters.length!=0&&this.cacheCanvas)for(var a=this.filters.length,b=this.cacheCanvas.getContext("2d"),c=this.cacheCanvas.width,d=this.cacheCanvas.height,e=0;e<a;e++)this.filters[e].applyFilter(b,
0,0,c,d)};createjs.DisplayObject=c})();this.createjs=this.createjs||{};
(function(){var c=function(){this.initialize()},b=c.prototype=new createjs.DisplayObject;b.children=null;b.DisplayObject_initialize=b.initialize;b.initialize=function(){this.DisplayObject_initialize();this.children=[]};b.isVisible=function(){return this.visible&&this.alpha>0&&this.children.length&&this.scaleX!=0&&this.scaleY!=0};b.DisplayObject_draw=b.draw;b.draw=function(a,b){if(this.DisplayObject_draw(a,b))return true;for(var c=this.children.slice(0),d=0,e=c.length;d<e;d++){var f=c[d];f.isVisible()&&
(a.save(),f.updateContext(a),f.draw(a),a.restore())}return true};b.addChild=function(a){if(a==null)return a;var b=arguments.length;if(b>1){for(var c=0;c<b;c++)this.addChild(arguments[c]);return arguments[b-1]}a.parent&&a.parent.removeChild(a);a.parent=this;this.children.push(a);return a};b.addChildAt=function(a,b){var c=arguments.length,d=arguments[c-1];if(d<0||d>this.children.length)return arguments[c-2];if(c>2){for(var e=0;e<c-1;e++)this.addChildAt(arguments[e],d+e);return arguments[c-2]}a.parent&&
a.parent.removeChild(a);a.parent=this;this.children.splice(b,0,a);return a};b.removeChild=function(a){var b=arguments.length;if(b>1){for(var c=true,d=0;d<b;d++)c=c&&this.removeChild(arguments[d]);return c}return this.removeChildAt(this.children.indexOf(a))};b.removeChildAt=function(a){var b=arguments.length;if(b>1){for(var c=[],d=0;d<b;d++)c[d]=arguments[d];c.sort(function(a,b){return b-a});for(var e=true,d=0;d<b;d++)e=e&&this.removeChildAt(c[d]);return e}if(a<0||a>this.children.length-1)return false;
if(b=this.children[a])b.parent=null;this.children.splice(a,1);return true};b.removeAllChildren=function(){for(var a=this.children;a.length;)a.pop().parent=null};b.getChildAt=function(a){return this.children[a]};b.sortChildren=function(a){this.children.sort(a)};b.getChildIndex=function(a){return this.children.indexOf(a)};b.getNumChildren=function(){return this.children.length};b.swapChildrenAt=function(a,b){var c=this.children,d=c[a],e=c[b];d&&e&&(c[a]=e,c[b]=d)};b.swapChildren=function(a,b){for(var c=
this.children,d,e,f=0,g=c.length;f<g;f++)if(c[f]==a&&(d=f),c[f]==b&&(e=f),d!=null&&e!=null)break;f!=g&&(c[d]=b,c[e]=a)};b.setChildIndex=function(a,b){var c=this.children,d=c.length;if(!(a.parent!=this||b<0||b>=d)){for(var e=0;e<d;e++)if(c[e]==a)break;e==d||e==b||(c.splice(e,1),b<e&&b--,c.splice(b,0,a))}};b.contains=function(a){for(;a;){if(a==this)return true;a=a.parent}return false};b.hitTest=function(a,b){return this.getObjectUnderPoint(a,b)!=null};b.getObjectsUnderPoint=function(a,b){var c=[],d=
this.localToGlobal(a,b);this._getObjectsUnderPoint(d.x,d.y,c);return c};b.getObjectUnderPoint=function(a,b){var c=this.localToGlobal(a,b);return this._getObjectsUnderPoint(c.x,c.y)};b.clone=function(a){var b=new c;this.cloneProps(b);if(a)for(var h=b.children=[],d=0,e=this.children.length;d<e;d++){var f=this.children[d].clone(a);f.parent=b;h.push(f)}return b};b.toString=function(){return"[Container (name="+this.name+")]"};b.DisplayObject__tick=b._tick;b._tick=function(a){for(var b=this.children.length-
1;b>=0;b--){var c=this.children[b];c._tick&&c._tick(a)}this.DisplayObject__tick(a)};b._getObjectsUnderPoint=function(a,b,h,d){var e=createjs.DisplayObject._hitTestContext,f=createjs.DisplayObject._hitTestCanvas,g=this._matrix,i=d&1&&(this.onPress||this.onClick||this.onDoubleClick)||d&2&&(this.onMouseOver||this.onMouseOut);if(this.cacheCanvas&&i&&(this.getConcatenatedMatrix(g),e.setTransform(g.a,g.b,g.c,g.d,g.tx-a,g.ty-b),e.globalAlpha=g.alpha,this.draw(e),this._testHit(e)))return f.width=0,f.width=
1,this;for(var j=this.children.length-1;j>=0;j--){var k=this.children[j];if(k.isVisible()&&k.mouseEnabled)if(k instanceof c)if(i){if(k=k._getObjectsUnderPoint(a,b))return this}else{if(k=k._getObjectsUnderPoint(a,b,h,d),!h&&k)return k}else if(!d||i||d&1&&(k.onPress||k.onClick||k.onDoubleClick)||d&2&&(k.onMouseOver||k.onMouseOut)){var m=k.hitArea;k.getConcatenatedMatrix(g);m&&(g.appendTransform(m.x+k.regX,m.y+k.regY,m.scaleX,m.scaleY,m.rotation,m.skewX,m.skewY,m.regX,m.regY),g.alpha*=m.alpha/k.alpha);
e.globalAlpha=g.alpha;e.setTransform(g.a,g.b,g.c,g.d,g.tx-a,g.ty-b);(m||k).draw(e);if(this._testHit(e))if(f.width=0,f.width=1,i)return this;else if(h)h.push(k);else return k}}return null};createjs.Container=c})();this.createjs=this.createjs||{};
(function(){var c=function(a){this.initialize(a)},b=c.prototype=new createjs.Container;c._snapToPixelEnabled=false;b.autoClear=true;b.canvas=null;b.mouseX=0;b.mouseY=0;b.onMouseMove=null;b.onMouseUp=null;b.onMouseDown=null;b.snapToPixelEnabled=false;b.mouseInBounds=false;b.tickOnUpdate=true;b.mouseMoveOutside=false;b._pointerData=null;b._pointerCount=0;b._primaryPointerID=null;b._mouseOverIntervalID=null;b.Container_initialize=b.initialize;b.initialize=function(a){this.Container_initialize();this.canvas=
a instanceof HTMLCanvasElement?a:document.getElementById(a);this._pointerData={};this._enableMouseEvents(true)};b.update=function(){if(this.canvas){this.autoClear&&this.clear();c._snapToPixelEnabled=this.snapToPixelEnabled;this.tickOnUpdate&&this._tick(arguments.length?arguments:null);var a=this.canvas.getContext("2d");a.save();this.updateContext(a);this.draw(a,false);a.restore()}};b.tick=b.update;b.clear=function(){if(this.canvas){var a=this.canvas.getContext("2d");a.setTransform(1,0,0,1,0,0);a.clearRect(0,
0,this.canvas.width,this.canvas.height)}};b.toDataURL=function(a,b){b||(b="image/png");var c=this.canvas.getContext("2d"),d=this.canvas.width,e=this.canvas.height,f;if(a){f=c.getImageData(0,0,d,e);var g=c.globalCompositeOperation;c.globalCompositeOperation="destination-over";c.fillStyle=a;c.fillRect(0,0,d,e)}var i=this.canvas.toDataURL(b);if(a)c.clearRect(0,0,d,e),c.putImageData(f,0,0),c.globalCompositeOperation=g;return i};b.enableMouseOver=function(a){if(this._mouseOverIntervalID)clearInterval(this._mouseOverIntervalID),
this._mouseOverIntervalID=null;if(a==null)a=20;else if(a<=0)return;var b=this;this._mouseOverIntervalID=setInterval(function(){b._testMouseOver()},1E3/Math.min(50,a))};b.clone=function(){var a=new c(null);this.cloneProps(a);return a};b.toString=function(){return"[Stage (name="+this.name+")]"};b._enableMouseEvents=function(){var a=this,b=window.addEventListener?window:document;b.addEventListener("mouseup",function(b){a._handleMouseUp(b)},false);b.addEventListener("mousemove",function(b){a._handleMouseMove(b)},
false);b.addEventListener("dblclick",function(b){a._handleDoubleClick(b)},false);this.canvas&&this.canvas.addEventListener("mousedown",function(b){a._handleMouseDown(b)},false)};b._getPointerData=function(a){var b=this._pointerData[a];if(!b&&(b=this._pointerData[a]={x:0,y:0},this._primaryPointerID==null))this._primaryPointerID=a;return b};b._handleMouseMove=function(a){if(!a)a=window.event;this._handlePointerMove(-1,a,a.pageX,a.pageY)};b._handlePointerMove=function(a,b,c,d){if(this.canvas){var e=
this._getPointerData(a),f=e.inBounds;this._updatePointerPosition(a,c,d);if(f||e.inBounds||this.mouseMoveOutside){a=new createjs.MouseEvent("onMouseMove",e.x,e.y,this,b,a,a==this._primaryPointerID,e.rawX,e.rawY);if(this.onMouseMove)this.onMouseMove(a);if(e.event&&e.event.onMouseMove)a=a.clone(),a.target=e.event.target,e.event.onMouseMove(a)}}};b._updatePointerPosition=function(a,b,c){var d=this._getElementRect(this.canvas);b-=d.left;c-=d.top;var e=this.canvas.width,f=this.canvas.height;b/=(d.right-
d.left)/e;c/=(d.bottom-d.top)/f;d=this._getPointerData(a);if(d.inBounds=b>=0&&c>=0&&b<=e-1&&c<=f-1)d.x=b,d.y=c;else if(this.mouseMoveOutside)d.x=b<0?0:b>e-1?e-1:b,d.y=c<0?0:c>f-1?f-1:c;d.rawX=b;d.rawY=c;if(a==this._primaryPointerID)this.mouseX=d.x,this.mouseY=d.y,this.mouseInBounds=d.inBounds};b._getElementRect=function(a){var b=a.getBoundingClientRect(),c=(window.pageXOffset||document.scrollLeft||0)-(document.clientLeft||document.body.clientLeft||0),d=(window.pageYOffset||document.scrollTop||0)-
(document.clientTop||document.body.clientTop||0),e=window.getComputedStyle?getComputedStyle(a):a.currentStyle,a=parseInt(e.paddingLeft)+parseInt(e.borderLeftWidth),f=parseInt(e.paddingTop)+parseInt(e.borderTopWidth),g=parseInt(e.paddingRight)+parseInt(e.borderRightWidth),e=parseInt(e.paddingBottom)+parseInt(e.borderBottomWidth);return{left:b.left+c+a,right:b.right+c-g,top:b.top+d+f,bottom:b.bottom+d-e}};b._handleMouseUp=function(a){this._handlePointerUp(-1,a,false)};b._handlePointerUp=function(a,
b,c){var d=this._getPointerData(a),e=new createjs.MouseEvent("onMouseUp",d.x,d.y,this,b,a,a==this._primaryPointerID,d.rawX,d.rawY);if(this.onMouseUp)this.onMouseUp(e);if(d.event&&d.event.onMouseUp)e=e.clone(),e.target=d.event.target,d.event.onMouseUp(e);if(d.target&&d.target.onClick&&this._getObjectsUnderPoint(d.x,d.y,null,true,this._mouseOverIntervalID?3:1)==d.target)d.target.onClick(new createjs.MouseEvent("onClick",d.x,d.y,d.target,b,a,a==this._primaryPointerID,d.rawX,d.rawY));if(c){if(a==this._primaryPointerID)this._primaryPointerID=
null;delete this._pointerData[a]}else d.event=d.target=null};b._handleMouseDown=function(a){this._handlePointerDown(-1,a,false)};b._handlePointerDown=function(a,b,c,d){var e=this._getPointerData(a);d!=null&&this._updatePointerPosition(a,c,d);if(this.onMouseDown)this.onMouseDown(new createjs.MouseEvent("onMouseDown",e.x,e.y,this,b,a,a==this._primaryPointerID,e.rawX,e.rawY));if(c=this._getObjectsUnderPoint(e.x,e.y,null,this._mouseOverIntervalID?3:1)){if(c.onPress&&(a=new createjs.MouseEvent("onPress",
e.x,e.y,c,b,a,a==this._primaryPointerID,e.rawX,e.rawY),c.onPress(a),a.onMouseMove||a.onMouseUp))e.event=a;e.target=c}};b._testMouseOver=function(){if(this._primaryPointerID==-1&&!(this.mouseX==this._mouseOverX&&this.mouseY==this._mouseOverY&&this.mouseInBounds)){var a=null;if(this.mouseInBounds)a=this._getObjectsUnderPoint(this.mouseX,this.mouseY,null,3),this._mouseOverX=this.mouseX,this._mouseOverY=this.mouseY;if(this._mouseOverTarget!=a){if(this._mouseOverTarget&&this._mouseOverTarget.onMouseOut)this._mouseOverTarget.onMouseOut(new createjs.MouseEvent("onMouseOut",
this.mouseX,this.mouseY,this._mouseOverTarget));if(a&&a.onMouseOver)a.onMouseOver(new createjs.MouseEvent("onMouseOver",this.mouseX,this.mouseY,a));this._mouseOverTarget=a}}};b._handleDoubleClick=function(a){if(this.onDoubleClick)this.onDoubleClick(new createjs.MouseEvent("onDoubleClick",this.mouseX,this.mouseY,this,a,-1,true));var b=this._getObjectsUnderPoint(this.mouseX,this.mouseY,null,this._mouseOverIntervalID?3:1);if(b&&b.onDoubleClick)b.onDoubleClick(new createjs.MouseEvent("onDoubleClick",
this.mouseX,this.mouseY,b,a,-1,true))};createjs.Stage=c})();this.createjs=this.createjs||{};
(function(){var c=function(a){this.initialize(a)},b=c.prototype=new createjs.DisplayObject;b.image=null;b.snapToPixel=true;b.sourceRect=null;b.DisplayObject_initialize=b.initialize;b.initialize=function(a){this.DisplayObject_initialize();typeof a=="string"?(this.image=new Image,this.image.src=a):this.image=a};b.isVisible=function(){return this.visible&&this.alpha>0&&this.scaleX!=0&&this.scaleY!=0&&this.image&&(this.image.complete||this.image.getContext||this.image.readyState>=2)};b.DisplayObject_draw=
b.draw;b.draw=function(a,b){if(this.DisplayObject_draw(a,b))return true;var c=this.sourceRect;c?a.drawImage(this.image,c.x,c.y,c.width,c.height,0,0,c.width,c.height):a.drawImage(this.image,0,0);return true};b.clone=function(){var a=new c(this.image);this.cloneProps(a);return a};b.toString=function(){return"[Bitmap (name="+this.name+")]"};createjs.Bitmap=c})();this.createjs=this.createjs||{};
(function(){var c=function(a){this.initialize(a)},b=c.prototype=new createjs.DisplayObject;b.onAnimationEnd=null;b.currentFrame=-1;b.currentAnimation=null;b.paused=true;b.spriteSheet=null;b.snapToPixel=true;b.offset=0;b.currentAnimationFrame=0;b._advanceCount=0;b._animation=null;b.DisplayObject_initialize=b.initialize;b.initialize=function(a){this.DisplayObject_initialize();this.spriteSheet=a};b.isVisible=function(){return this.visible&&this.alpha>0&&this.scaleX!=0&&this.scaleY!=0&&this.spriteSheet.complete&&
this.currentFrame>=0};b.DisplayObject_draw=b.draw;b.draw=function(a,b){if(this.DisplayObject_draw(a,b))return true;this._normalizeFrame();var c=this.spriteSheet.getFrame(this.currentFrame);if(c!=null){var d=c.rect;a.drawImage(c.image,d.x,d.y,d.width,d.height,-c.regX,-c.regY,d.width,d.height);return true}};b.play=function(){this.paused=false};b.stop=function(){this.paused=true};b.gotoAndPlay=function(a){this.paused=false;this._goto(a)};b.gotoAndStop=function(a){this.paused=true;this._goto(a)};b.advance=
function(){this._animation?this.currentAnimationFrame++:this.currentFrame++;this._normalizeFrame()};b.clone=function(){var a=new c(this.spriteSheet);this.cloneProps(a);return a};b.toString=function(){return"[BitmapAnimation (name="+this.name+")]"};b.DisplayObject__tick=b._tick;b._tick=function(a){var b=this._animation?this._animation.frequency:1;!this.paused&&(++this._advanceCount+this.offset)%b==0&&this.advance();this.DisplayObject__tick(a)};b._normalizeFrame=function(){var a=this._animation;if(a)if(this.currentAnimationFrame>=
a.frames.length){if(a.next?this._goto(a.next):(this.paused=true,this.currentAnimationFrame=a.frames.length-1,this.currentFrame=a.frames[this.currentAnimationFrame]),this.onAnimationEnd)this.onAnimationEnd(this,a.name)}else this.currentFrame=a.frames[this.currentAnimationFrame];else if(this.currentFrame>=this.spriteSheet.getNumFrames()&&(this.currentFrame=0,this.onAnimationEnd))this.onAnimationEnd(this,null)};b.DisplayObject_cloneProps=b.cloneProps;b.cloneProps=function(a){this.DisplayObject_cloneProps(a);
a.onAnimationEnd=this.onAnimationEnd;a.currentFrame=this.currentFrame;a.currentAnimation=this.currentAnimation;a.paused=this.paused;a.offset=this.offset;a._animation=this._animation;a.currentAnimationFrame=this.currentAnimationFrame};b._goto=function(a){if(isNaN(a)){var b=this.spriteSheet.getAnimation(a);if(b)this.currentAnimationFrame=0,this._animation=b,this.currentAnimation=a,this._normalizeFrame()}else this.currentAnimation=this._animation=null,this.currentFrame=a};createjs.BitmapAnimation=c})();this.createjs=this.createjs||{};
(function(){var c=function(a){this.initialize(a)},b=c.prototype=new createjs.DisplayObject;b.graphics=null;b.DisplayObject_initialize=b.initialize;b.initialize=function(a){this.DisplayObject_initialize();this.graphics=a?a:new createjs.Graphics};b.isVisible=function(){return Boolean(this.visible&&this.alpha>0&&this.scaleX!=0&&this.scaleY!=0&&this.graphics)};b.DisplayObject_draw=b.draw;b.draw=function(a,b){if(this.DisplayObject_draw(a,b))return true;this.graphics.draw(a);return true};b.clone=function(a){a=
new c(a&&this.graphics?this.graphics.clone():this.graphics);this.cloneProps(a);return a};b.toString=function(){return"[Shape (name="+this.name+")]"};createjs.Shape=c})();this.createjs=this.createjs||{};
(function(){var c=function(a,b,c){this.initialize(a,b,c)},b=c.prototype=new createjs.DisplayObject;c._workingContext=(createjs.createCanvas?createjs.createCanvas():document.createElement("canvas")).getContext("2d");b.text="";b.font=null;b.color="#000";b.textAlign="left";b.textBaseline="top";b.maxWidth=null;b.outline=false;b.lineHeight=0;b.lineWidth=null;b.DisplayObject_initialize=b.initialize;b.initialize=function(a,b,c){this.DisplayObject_initialize();this.text=a;this.font=b;this.color=c?c:"#000"};
b.isVisible=function(){return Boolean(this.visible&&this.alpha>0&&this.scaleX!=0&&this.scaleY!=0&&this.text!=null&&this.text!=="")};b.DisplayObject_draw=b.draw;b.draw=function(a,b){if(this.DisplayObject_draw(a,b))return true;this.outline?a.strokeStyle=this.color:a.fillStyle=this.color;a.font=this.font;a.textAlign=this.textAlign||"start";a.textBaseline=this.textBaseline||"alphabetic";this._drawText(a);return true};b.getMeasuredWidth=function(){return this._getWorkingContext().measureText(this.text).width};
b.getMeasuredLineHeight=function(){return this._getWorkingContext().measureText("M").width*1.2};b.getMeasuredHeight=function(){return this._drawText()*(this.lineHeight||this.getMeasuredLineHeight())};b.clone=function(){var a=new c(this.text,this.font,this.color);this.cloneProps(a);return a};b.toString=function(){return"[Text (text="+(this.text.length>20?this.text.substr(0,17)+"...":this.text)+")]"};b.DisplayObject_cloneProps=b.cloneProps;b.cloneProps=function(a){this.DisplayObject_cloneProps(a);a.textAlign=
this.textAlign;a.textBaseline=this.textBaseline;a.maxWidth=this.maxWidth;a.outline=this.outline;a.lineHeight=this.lineHeight;a.lineWidth=this.lineWidth};b._getWorkingContext=function(){var a=c._workingContext;a.font=this.font;a.textAlign=this.textAlign||"start";a.textBaseline=this.textBaseline||"alphabetic";return a};b._drawText=function(a){var b=!!a;b||(a=this._getWorkingContext());for(var c=String(this.text).split(/(?:\r\n|\r|\n)/),d=this.lineHeight||this.getMeasuredLineHeight(),e=0,f=0,g=c.length;f<
g;f++){var i=a.measureText(c[f]).width;if(this.lineWidth==null||i<this.lineWidth)b&&this._drawTextLine(a,c[f],e*d);else{for(var i=c[f].split(/(\s)/),j=i[0],k=1,m=i.length;k<m;k+=2)a.measureText(j+i[k]+i[k+1]).width>this.lineWidth?(b&&this._drawTextLine(a,j,e*d),e++,j=i[k+1]):j+=i[k]+i[k+1];b&&this._drawTextLine(a,j,e*d)}e++}return e};b._drawTextLine=function(a,b,c){this.outline?a.strokeText(b,0,c,this.maxWidth||65535):a.fillText(b,0,c,this.maxWidth||65535)};createjs.Text=c})();this.createjs=this.createjs||{};
(function(){var c=function(){throw"SpriteSheetUtils cannot be instantiated";};c._workingCanvas=createjs.createCanvas?createjs.createCanvas():document.createElement("canvas");c._workingContext=c._workingCanvas.getContext("2d");c.addFlippedFrames=function(b,a,l,h){if(a||l||h){var d=0;a&&c._flip(b,++d,true,false);l&&c._flip(b,++d,false,true);h&&c._flip(b,++d,true,true)}};c.extractFrame=function(b,a){isNaN(a)&&(a=b.getAnimation(a).frames[0]);var l=b.getFrame(a);if(!l)return null;var h=l.rect,d=c._workingCanvas;
d.width=h.width;d.height=h.height;c._workingContext.drawImage(l.image,h.x,h.y,h.width,h.height,0,0,h.width,h.height);l=new Image;l.src=d.toDataURL("image/png");return l};c.mergeAlpha=function(b,a,c){c||(c=createjs.createCanvas?createjs.createCanvas():document.createElement("canvas"));c.width=Math.max(a.width,b.width);c.height=Math.max(a.height,b.height);var h=c.getContext("2d");h.save();h.drawImage(b,0,0);h.globalCompositeOperation="destination-in";h.drawImage(a,0,0);h.restore();return c};c._flip=
function(b,a,l,h){for(var d=b._images,e=c._workingCanvas,f=c._workingContext,g=d.length/a,i=0;i<g;i++){var j=d[i];j.__tmp=i;e.width=0;e.width=j.width;e.height=j.height;f.setTransform(l?-1:1,0,0,h?-1:1,l?j.width:0,h?j.height:0);f.drawImage(j,0,0);var k=new Image;k.src=e.toDataURL("image/png");k.width=j.width;k.height=j.height;d.push(k)}f=b._frames;e=f.length/a;for(i=0;i<e;i++){var j=f[i],m=j.rect.clone(),k=d[j.image.__tmp+g*a],o={image:k,rect:m,regX:j.regX,regY:j.regY};if(l)m.x=k.width-m.x-m.width,
o.regX=m.width-j.regX;if(h)m.y=k.height-m.y-m.height,o.regY=m.height-j.regY;f.push(o)}l="_"+(l?"h":"")+(h?"v":"");h=b._animations;b=b._data;d=h.length/a;for(i=0;i<d;i++){f=h[i];j=b[f];g={name:f+l,frequency:j.frequency,next:j.next,frames:[]};j.next&&(g.next+=l);f=j.frames;j=0;for(k=f.length;j<k;j++)g.frames.push(f[j]+e*a);b[g.name]=g;h.push(g.name)}};createjs.SpriteSheetUtils=c})();this.createjs=this.createjs||{};
(function(){var c=function(){this.initialize()},b=c.prototype;c.ERR_DIMENSIONS="frame dimensions exceed max spritesheet dimensions";c.ERR_RUNNING="a build is already running";b.maxWidth=2048;b.maxHeight=2048;b.spriteSheet=null;b.scale=1;b.padding=1;b._frames=null;b._animations=null;b._data=null;b._nextFrameIndex=0;b._index=0;b._callback=null;b._timeSlice=null;b._timerID=null;b._scale=1;b.initialize=function(){this._frames=[];this._animations={}};b.addFrame=function(a,b,h,d,e,f){if(this._data)throw c.ERR_RUNNING;
b=b||a.bounds||a.nominalBounds;!b&&a.getBounds&&(b=a.getBounds());if(!b)return null;h=h||1;return this._frames.push({source:a,sourceRect:b,scale:h,funct:d,params:e,scope:f,index:this._frames.length,height:b.height*h})-1};b.addAnimation=function(a,b,h,d){if(this._data)throw c.ERR_RUNNING;this._animations[a]={frames:b,next:h,frequency:d}};b.addMovieClip=function(a,b,h){if(this._data)throw c.ERR_RUNNING;var d=a.frameBounds,e=b||a.bounds||a.nominalBounds;!e&&a.getBounds&&(e=a.getBounds());if(!e&&!d)return null;
for(var b=a.timeline.duration,f=0;f<b;f++)this.addFrame(a,d&&d[f]?d[f]:e,h,function(a){var b=this.actionsEnabled;this.actionsEnabled=false;this.gotoAndStop(a);this.actionsEnabled=b},[f],a);var f=a.timeline._labels,a=[],g;for(g in f)a.push({index:f[g],label:g});if(a.length){a.sort(function(a,b){return a.index-b.index});f=0;for(g=a.length;f<g;f++){for(var h=a[f].label,d=f==g-1?b:a[f+1].index,e=[],i=a[f].index;i<d;i++)e.push(i);this.addAnimation(h,e,true)}}};b.build=function(){if(this._data)throw c.ERR_RUNNING;
this._callback=null;for(this._startBuild();this._drawNext(););this._endBuild();return this.spriteSheet};b.buildAsync=function(a,b){if(this._data)throw c.ERR_RUNNING;this._callback=a;this._startBuild();this._timeSlice=Math.max(0.01,Math.min(0.99,b||0.3))*50;var h=this;this._timerID=setTimeout(function(){h._run()},50-this._timeSlice)};b.stopAsync=function(){clearTimeout(this._timerID);this._data=null};b.clone=function(){throw"SpriteSheetBuilder cannot be cloned.";};b.toString=function(){return"[SpriteSheetBuilder]"};
b._startBuild=function(){var a=this.padding||0;this.spriteSheet=null;this._index=0;this._scale=this.scale;var b=[];this._data={images:[],frames:b,animations:this._animations};var h=this._frames.slice();h.sort(function(a,b){return a.height<=b.height?-1:1});if(h[h.length-1].height+a*2>this.maxHeight)throw c.ERR_DIMENSIONS;for(var d=0,e=0,f=0;h.length;){var g=this._fillRow(h,d,f,b,a);if(g.w>e)e=g.w;d+=g.h;if(!g.h||!h.length){var i=createjs.createCanvas?createjs.createCanvas():document.createElement("canvas");
i.width=this._getSize(e,this.maxWidth);i.height=this._getSize(d,this.maxHeight);this._data.images[f]=i;g.h||(e=d=0,f++)}}};b._getSize=function(a,b){for(var c=4;Math.pow(2,++c)<a;);return Math.min(b,Math.pow(2,c))};b._fillRow=function(a,b,h,d,e){var f=this.maxWidth,g=this.maxHeight-b,i=e;b+=e;for(var j=0,k=a.length-1;k>=0;k--){var m=a[k],o=this._scale*m.scale,n=m.sourceRect,q=m.source,p=Math.floor(o*n.x-e),s=Math.floor(o*n.y-e),r=Math.ceil(o*n.height+e*2),n=Math.ceil(o*n.width+e*2);if(n>f)throw c.ERR_DIMENSIONS;
if(!(r>g||i+n>f))m.img=h,m.rect=new createjs.Rectangle(i,b,n,r),j=j||r,a.splice(k,1),d[m.index]=[i,b,n,r,h,Math.round(-p+o*q.regX-e),Math.round(-s+o*q.regY-e)],i+=n}return{w:i,h:j}};b._endBuild=function(){this.spriteSheet=new createjs.SpriteSheet(this._data);this._data=null;this._callback&&this._callback(this)};b._run=function(){for(var a=(new Date).getTime()+this._timeSlice,b=false;a>(new Date).getTime();)if(!this._drawNext()){b=true;break}if(b)this._endBuild();else{var c=this;this._timerID=setTimeout(function(){c._run()},
50-this._timeSlice)}};b._drawNext=function(){var a=this._frames[this._index],b=a.scale*this._scale,c=a.rect,d=a.sourceRect,e=this._data.images[a.img].getContext("2d");a.funct&&a.funct.apply(a.scope,a.params);e.save();e.beginPath();e.rect(c.x,c.y,c.width,c.height);e.clip();e.translate(Math.ceil(c.x-d.x*b),Math.ceil(c.y-d.y*b));e.scale(b,b);a.source.draw(e);e.restore();return++this._index<this._frames.length};createjs.SpriteSheetBuilder=c})();this.createjs=this.createjs||{};
(function(){var c=function(a){this.initialize(a)},b=c.prototype=new createjs.DisplayObject;b.htmlElement=null;b._style=null;b.DisplayObject_initialize=b.initialize;b.initialize=function(a){typeof a=="string"&&(a=document.getElementById(a));this.DisplayObject_initialize();this.mouseEnabled=false;if(this.htmlElement=a)this._style=a.style,this._style.position="absolute",this._style.transformOrigin=this._style.WebkitTransformOrigin=this._style.msTransformOrigin=this._style.MozTransformOrigin=this._style.OTransformOrigin=
"0% 0%"};b.isVisible=function(){return this.htmlElement!=null};b.draw=function(){if(this.htmlElement!=null){var a=this.getConcatenatedMatrix(this._matrix),b=this.htmlElement;b.style.opacity=""+a.alpha;b.style.visibility=this.visible?"visible":"hidden";b.style.transform=b.style.WebkitTransform=b.style.OTransform=b.style.msTransform=["matrix("+a.a,a.b,a.c,a.d,a.tx+0.5|0,(a.ty+0.5|0)+")"].join(",");b.style.MozTransform=["matrix("+a.a,a.b,a.c,a.d,(a.tx+0.5|0)+"px",(a.ty+0.5|0)+"px)"].join(",");return true}};
b.cache=function(){};b.uncache=function(){};b.updateCache=function(){};b.hitTest=function(){};b.localToGlobal=function(){};b.globalToLocal=function(){};b.localToLocal=function(){};b.clone=function(){var a=new c;this.cloneProps(a);return a};b.toString=function(){return"[DOMElement (name="+this.name+")]"};b._tick=function(a){if(this.htmlElement!=null&&(this.htmlElement.style.visibility="hidden",this.onTick))this.onTick(a)};createjs.DOMElement=c})();this.createjs=this.createjs||{};(function(){var c=function(){this.initialize()},b=c.prototype;b.initialize=function(){};b.getBounds=function(){return new createjs.Rectangle(0,0,0,0)};b.applyFilter=function(){};b.toString=function(){return"[Filter]"};b.clone=function(){return new c};createjs.Filter=c})();this.createjs=this.createjs||{};
(function(){var c=function(){throw"Touch cannot be instantiated";};c.isSupported=function(){return"ontouchstart"in window||window.navigator.msPointerEnabled};c.enable=function(b,a,l){if(!b||!b.canvas||!c.isSupported())return false;b.__touch={pointers:{},multitouch:!a,preventDefault:!l,count:0};"ontouchstart"in window?c._IOS_enable(b):window.navigator.msPointerEnabled&&c._IE_enable(b);return true};c.disable=function(b){b&&("ontouchstart"in window?c._IOS_disable(b):window.navigator.msPointerEnabled&&c._IE_disable(b))};
c._IOS_enable=function(b){var a=b.canvas,l=b.__touch.f=function(a){c._IOS_handleEvent(b,a)};a.addEventListener("touchstart",l,false);a.addEventListener("touchmove",l,false);a.addEventListener("touchend",l,false);a.addEventListener("touchcancel",l,false)};c._IOS_disable=function(b){var a=b.canvas;if(a)b=b.__touch.f,a.removeEventListener("touchstart",b,false),a.removeEventListener("touchmove",b,false),a.removeEventListener("touchend",b,false),a.removeEventListener("touchcancel",b,false)};c._IOS_handleEvent=
function(b,a){if(b){b.__touch.preventDefault&&a.preventDefault&&a.preventDefault();for(var c=a.changedTouches,h=a.type,d=0,e=c.length;d<e;d++){var f=c[d],g=f.identifier;f.target==b.canvas&&(h=="touchstart"?this._handleStart(b,g,a,f.pageX,f.pageY):h=="touchmove"?this._handleMove(b,g,a,f.pageX,f.pageY):(h=="touchend"||h=="touchcancel")&&this._handleEnd(b,g,a))}}};c._IE_enable=function(b){var a=b.canvas,l=b.__touch.f=function(a){c._IE_handleEvent(b,a)};a.addEventListener("MSPointerDown",l,false);window.addEventListener("MSPointerMove",
l,false);window.addEventListener("MSPointerUp",l,false);window.addEventListener("MSPointerCancel",l,false);if(b.__touch.preventDefault)a.style.msTouchAction="none";b.__touch.activeIDs={}};c._IE_disable=function(b){var a=b.__touch.f;window.removeEventListener("MSPointerMove",a,false);window.removeEventListener("MSPointerUp",a,false);window.removeEventListener("MSPointerCancel",a,false);b.canvas&&b.canvas.removeEventListener("MSPointerDown",a,false)};c._IE_handleEvent=function(b,a){if(b){b.__touch.preventDefault&&
a.preventDefault&&a.preventDefault();var c=a.type,h=a.pointerId,d=b.__touch.activeIDs;if(c=="MSPointerDown")a.srcElement==b.canvas&&(d[h]=true,this._handleStart(b,h,a,a.pageX,a.pageY));else if(d[h])if(c=="MSPointerMove")this._handleMove(b,h,a,a.pageX,a.pageY);else if(c=="MSPointerUp"||c=="MSPointerCancel")delete d[h],this._handleEnd(b,h,a)}};c._handleStart=function(b,a,c,h,d){var e=b.__touch;if(e.multitouch||!e.count){var f=e.pointers;f[a]||(f[a]=true,e.count++,b._handlePointerDown(a,c,h,d))}};c._handleMove=
function(b,a,c,h,d){b.__touch.pointers[a]&&b._handlePointerMove(a,c,h,d)};c._handleEnd=function(b,a,c){var h=b.__touch,d=h.pointers;d[a]&&(h.count--,b._handlePointerUp(a,c,true),delete d[a])};createjs.Touch=c})();
 
 /*!
 * imagesLoaded PACKAGED v3.1.8
 * JavaScript is all like "You images are done yet or what?"
 * MIT License
 */

(function(){function e(){}function t(e,t){for(var n=e.length;n--;)if(e[n].listener===t)return n;return-1}function n(e){return function(){return this[e].apply(this,arguments)}}var i=e.prototype,r=this,o=r.EventEmitter;i.getListeners=function(e){var t,n,i=this._getEvents();if("object"==typeof e){t={};for(n in i)i.hasOwnProperty(n)&&e.test(n)&&(t[n]=i[n])}else t=i[e]||(i[e]=[]);return t},i.flattenListeners=function(e){var t,n=[];for(t=0;e.length>t;t+=1)n.push(e[t].listener);return n},i.getListenersAsObject=function(e){var t,n=this.getListeners(e);return n instanceof Array&&(t={},t[e]=n),t||n},i.addListener=function(e,n){var i,r=this.getListenersAsObject(e),o="object"==typeof n;for(i in r)r.hasOwnProperty(i)&&-1===t(r[i],n)&&r[i].push(o?n:{listener:n,once:!1});return this},i.on=n("addListener"),i.addOnceListener=function(e,t){return this.addListener(e,{listener:t,once:!0})},i.once=n("addOnceListener"),i.defineEvent=function(e){return this.getListeners(e),this},i.defineEvents=function(e){for(var t=0;e.length>t;t+=1)this.defineEvent(e[t]);return this},i.removeListener=function(e,n){var i,r,o=this.getListenersAsObject(e);for(r in o)o.hasOwnProperty(r)&&(i=t(o[r],n),-1!==i&&o[r].splice(i,1));return this},i.off=n("removeListener"),i.addListeners=function(e,t){return this.manipulateListeners(!1,e,t)},i.removeListeners=function(e,t){return this.manipulateListeners(!0,e,t)},i.manipulateListeners=function(e,t,n){var i,r,o=e?this.removeListener:this.addListener,s=e?this.removeListeners:this.addListeners;if("object"!=typeof t||t instanceof RegExp)for(i=n.length;i--;)o.call(this,t,n[i]);else for(i in t)t.hasOwnProperty(i)&&(r=t[i])&&("function"==typeof r?o.call(this,i,r):s.call(this,i,r));return this},i.removeEvent=function(e){var t,n=typeof e,i=this._getEvents();if("string"===n)delete i[e];else if("object"===n)for(t in i)i.hasOwnProperty(t)&&e.test(t)&&delete i[t];else delete this._events;return this},i.removeAllListeners=n("removeEvent"),i.emitEvent=function(e,t){var n,i,r,o,s=this.getListenersAsObject(e);for(r in s)if(s.hasOwnProperty(r))for(i=s[r].length;i--;)n=s[r][i],n.once===!0&&this.removeListener(e,n.listener),o=n.listener.apply(this,t||[]),o===this._getOnceReturnValue()&&this.removeListener(e,n.listener);return this},i.trigger=n("emitEvent"),i.emit=function(e){var t=Array.prototype.slice.call(arguments,1);return this.emitEvent(e,t)},i.setOnceReturnValue=function(e){return this._onceReturnValue=e,this},i._getOnceReturnValue=function(){return this.hasOwnProperty("_onceReturnValue")?this._onceReturnValue:!0},i._getEvents=function(){return this._events||(this._events={})},e.noConflict=function(){return r.EventEmitter=o,e},"function"==typeof define&&define.amd?define("eventEmitter/EventEmitter",[],function(){return e}):"object"==typeof module&&module.exports?module.exports=e:this.EventEmitter=e}).call(this),function(e){function t(t){var n=e.event;return n.target=n.target||n.srcElement||t,n}var n=document.documentElement,i=function(){};n.addEventListener?i=function(e,t,n){e.addEventListener(t,n,!1)}:n.attachEvent&&(i=function(e,n,i){e[n+i]=i.handleEvent?function(){var n=t(e);i.handleEvent.call(i,n)}:function(){var n=t(e);i.call(e,n)},e.attachEvent("on"+n,e[n+i])});var r=function(){};n.removeEventListener?r=function(e,t,n){e.removeEventListener(t,n,!1)}:n.detachEvent&&(r=function(e,t,n){e.detachEvent("on"+t,e[t+n]);try{delete e[t+n]}catch(i){e[t+n]=void 0}});var o={bind:i,unbind:r};"function"==typeof define&&define.amd?define("eventie/eventie",o):e.eventie=o}(this),function(e,t){"function"==typeof define&&define.amd?define(["eventEmitter/EventEmitter","eventie/eventie"],function(n,i){return t(e,n,i)}):"object"==typeof exports?module.exports=t(e,require("wolfy87-eventemitter"),require("eventie")):e.imagesLoaded=t(e,e.EventEmitter,e.eventie)}(window,function(e,t,n){function i(e,t){for(var n in t)e[n]=t[n];return e}function r(e){return"[object Array]"===d.call(e)}function o(e){var t=[];if(r(e))t=e;else if("number"==typeof e.length)for(var n=0,i=e.length;i>n;n++)t.push(e[n]);else t.push(e);return t}function s(e,t,n){if(!(this instanceof s))return new s(e,t);"string"==typeof e&&(e=document.querySelectorAll(e)),this.elements=o(e),this.options=i({},this.options),"function"==typeof t?n=t:i(this.options,t),n&&this.on("always",n),this.getImages(),a&&(this.jqDeferred=new a.Deferred);var r=this;setTimeout(function(){r.check()})}function f(e){this.img=e}function c(e){this.src=e,v[e]=this}var a=e.jQuery,u=e.console,h=u!==void 0,d=Object.prototype.toString;s.prototype=new t,s.prototype.options={},s.prototype.getImages=function(){this.images=[];for(var e=0,t=this.elements.length;t>e;e++){var n=this.elements[e];"IMG"===n.nodeName&&this.addImage(n);var i=n.nodeType;if(i&&(1===i||9===i||11===i))for(var r=n.querySelectorAll("img"),o=0,s=r.length;s>o;o++){var f=r[o];this.addImage(f)}}},s.prototype.addImage=function(e){var t=new f(e);this.images.push(t)},s.prototype.check=function(){function e(e,r){return t.options.debug&&h&&u.log("confirm",e,r),t.progress(e),n++,n===i&&t.complete(),!0}var t=this,n=0,i=this.images.length;if(this.hasAnyBroken=!1,!i)return this.complete(),void 0;for(var r=0;i>r;r++){var o=this.images[r];o.on("confirm",e),o.check()}},s.prototype.progress=function(e){this.hasAnyBroken=this.hasAnyBroken||!e.isLoaded;var t=this;setTimeout(function(){t.emit("progress",t,e),t.jqDeferred&&t.jqDeferred.notify&&t.jqDeferred.notify(t,e)})},s.prototype.complete=function(){var e=this.hasAnyBroken?"fail":"done";this.isComplete=!0;var t=this;setTimeout(function(){if(t.emit(e,t),t.emit("always",t),t.jqDeferred){var n=t.hasAnyBroken?"reject":"resolve";t.jqDeferred[n](t)}})},a&&(a.fn.imagesLoaded=function(e,t){var n=new s(this,e,t);return n.jqDeferred.promise(a(this))}),f.prototype=new t,f.prototype.check=function(){var e=v[this.img.src]||new c(this.img.src);if(e.isConfirmed)return this.confirm(e.isLoaded,"cached was confirmed"),void 0;if(this.img.complete&&void 0!==this.img.naturalWidth)return this.confirm(0!==this.img.naturalWidth,"naturalWidth"),void 0;var t=this;e.on("confirm",function(e,n){return t.confirm(e.isLoaded,n),!0}),e.check()},f.prototype.confirm=function(e,t){this.isLoaded=e,this.emit("confirm",this,t)};var v={};return c.prototype=new t,c.prototype.check=function(){if(!this.isChecked){var e=new Image;n.bind(e,"load",this),n.bind(e,"error",this),e.src=this.src,this.isChecked=!0}},c.prototype.handleEvent=function(e){var t="on"+e.type;this[t]&&this[t](e)},c.prototype.onload=function(e){this.confirm(!0,"onload"),this.unbindProxyEvents(e)},c.prototype.onerror=function(e){this.confirm(!1,"onerror"),this.unbindProxyEvents(e)},c.prototype.confirm=function(e,t){this.isConfirmed=!0,this.isLoaded=e,this.emit("confirm",this,t)},c.prototype.unbindProxyEvents=function(e){n.unbind(e.target,"load",this),n.unbind(e.target,"error",this)},s}); 
 /*!
 * mustache.js - Logic-less {{mustache}} templates with JavaScript
 * http://github.com/janl/mustache.js
 */

/*global define: false*/

(function (global, factory) {
  if (typeof exports === "object" && exports) {
    factory(exports); // CommonJS
  } else if (typeof define === "function" && define.amd) {
    define(['exports'], factory); // AMD
  } else {
    factory(global.Mustache = {}); // <script>
  }
}(this, function (mustache) {

  var Object_toString = Object.prototype.toString;
  var isArray = Array.isArray || function (object) {
    return Object_toString.call(object) === '[object Array]';
  };

  function isFunction(object) {
    return typeof object === 'function';
  }

  function escapeRegExp(string) {
    return string.replace(/[\-\[\]{}()*+?.,\\\^$|#\s]/g, "\\$&");
  }

  // Workaround for https://issues.apache.org/jira/browse/COUCHDB-577
  // See https://github.com/janl/mustache.js/issues/189
  var RegExp_test = RegExp.prototype.test;
  function testRegExp(re, string) {
    return RegExp_test.call(re, string);
  }

  var nonSpaceRe = /\S/;
  function isWhitespace(string) {
    return !testRegExp(nonSpaceRe, string);
  }

  var entityMap = {
    "&": "&amp;",
    "<": "&lt;",
    ">": "&gt;",
    '"': '&quot;',
    "'": '&#39;',
    "/": '&#x2F;'
  };

  function escapeHtml(string) {
    return String(string).replace(/[&<>"'\/]/g, function (s) {
      return entityMap[s];
    });
  }

  var whiteRe = /\s*/;
  var spaceRe = /\s+/;
  var equalsRe = /\s*=/;
  var curlyRe = /\s*\}/;
  var tagRe = /#|\^|\/|>|\{|&|=|!/;

  /**
   * Breaks up the given `template` string into a tree of tokens. If the `tags`
   * argument is given here it must be an array with two string values: the
   * opening and closing tags used in the template (e.g. [ "<%", "%>" ]). Of
   * course, the default is to use mustaches (i.e. mustache.tags).
   *
   * A token is an array with at least 4 elements. The first element is the
   * mustache symbol that was used inside the tag, e.g. "#" or "&". If the tag
   * did not contain a symbol (i.e. {{myValue}}) this element is "name". For
   * all text that appears outside a symbol this element is "text".
   *
   * The second element of a token is its "value". For mustache tags this is
   * whatever else was inside the tag besides the opening symbol. For text tokens
   * this is the text itself.
   *
   * The third and fourth elements of the token are the start and end indices,
   * respectively, of the token in the original template.
   *
   * Tokens that are the root node of a subtree contain two more elements: 1) an
   * array of tokens in the subtree and 2) the index in the original template at
   * which the closing tag for that section begins.
   */
  function parseTemplate(template, tags) {
    if (!template)
      return [];

    var sections = [];     // Stack to hold section tokens
    var tokens = [];       // Buffer to hold the tokens
    var spaces = [];       // Indices of whitespace tokens on the current line
    var hasTag = false;    // Is there a {{tag}} on the current line?
    var nonSpace = false;  // Is there a non-space char on the current line?

    // Strips all whitespace tokens array for the current line
    // if there was a {{#tag}} on it and otherwise only space.
    function stripSpace() {
      if (hasTag && !nonSpace) {
        while (spaces.length)
          delete tokens[spaces.pop()];
      } else {
        spaces = [];
      }

      hasTag = false;
      nonSpace = false;
    }

    var openingTagRe, closingTagRe, closingCurlyRe;
    function compileTags(tags) {
      if (typeof tags === 'string')
        tags = tags.split(spaceRe, 2);

      if (!isArray(tags) || tags.length !== 2)
        throw new Error('Invalid tags: ' + tags);

      openingTagRe = new RegExp(escapeRegExp(tags[0]) + '\\s*');
      closingTagRe = new RegExp('\\s*' + escapeRegExp(tags[1]));
      closingCurlyRe = new RegExp('\\s*' + escapeRegExp('}' + tags[1]));
    }

    compileTags(tags || mustache.tags);

    var scanner = new Scanner(template);

    var start, type, value, chr, token, openSection;
    while (!scanner.eos()) {
      start = scanner.pos;

      // Match any text between tags.
      value = scanner.scanUntil(openingTagRe);

      if (value) {
        for (var i = 0, valueLength = value.length; i < valueLength; ++i) {
          chr = value.charAt(i);

          if (isWhitespace(chr)) {
            spaces.push(tokens.length);
          } else {
            nonSpace = true;
          }

          tokens.push([ 'text', chr, start, start + 1 ]);
          start += 1;

          // Check for whitespace on the current line.
          if (chr === '\n')
            stripSpace();
        }
      }

      // Match the opening tag.
      if (!scanner.scan(openingTagRe))
        break;

      hasTag = true;

      // Get the tag type.
      type = scanner.scan(tagRe) || 'name';
      scanner.scan(whiteRe);

      // Get the tag value.
      if (type === '=') {
        value = scanner.scanUntil(equalsRe);
        scanner.scan(equalsRe);
        scanner.scanUntil(closingTagRe);
      } else if (type === '{') {
        value = scanner.scanUntil(closingCurlyRe);
        scanner.scan(curlyRe);
        scanner.scanUntil(closingTagRe);
        type = '&';
      } else {
        value = scanner.scanUntil(closingTagRe);
      }

      // Match the closing tag.
      if (!scanner.scan(closingTagRe))
        throw new Error('Unclosed tag at ' + scanner.pos);

      token = [ type, value, start, scanner.pos ];
      tokens.push(token);

      if (type === '#' || type === '^') {
        sections.push(token);
      } else if (type === '/') {
        // Check section nesting.
        openSection = sections.pop();

        if (!openSection)
          throw new Error('Unopened section "' + value + '" at ' + start);

        if (openSection[1] !== value)
          throw new Error('Unclosed section "' + openSection[1] + '" at ' + start);
      } else if (type === 'name' || type === '{' || type === '&') {
        nonSpace = true;
      } else if (type === '=') {
        // Set the tags for the next time around.
        compileTags(value);
      }
    }

    // Make sure there are no open sections when we're done.
    openSection = sections.pop();

    if (openSection)
      throw new Error('Unclosed section "' + openSection[1] + '" at ' + scanner.pos);

    return nestTokens(squashTokens(tokens));
  }

  /**
   * Combines the values of consecutive text tokens in the given `tokens` array
   * to a single token.
   */
  function squashTokens(tokens) {
    var squashedTokens = [];

    var token, lastToken;
    for (var i = 0, numTokens = tokens.length; i < numTokens; ++i) {
      token = tokens[i];

      if (token) {
        if (token[0] === 'text' && lastToken && lastToken[0] === 'text') {
          lastToken[1] += token[1];
          lastToken[3] = token[3];
        } else {
          squashedTokens.push(token);
          lastToken = token;
        }
      }
    }

    return squashedTokens;
  }

  /**
   * Forms the given array of `tokens` into a nested tree structure where
   * tokens that represent a section have two additional items: 1) an array of
   * all tokens that appear in that section and 2) the index in the original
   * template that represents the end of that section.
   */
  function nestTokens(tokens) {
    var nestedTokens = [];
    var collector = nestedTokens;
    var sections = [];

    var token, section;
    for (var i = 0, numTokens = tokens.length; i < numTokens; ++i) {
      token = tokens[i];

      switch (token[0]) {
      case '#':
      case '^':
        collector.push(token);
        sections.push(token);
        collector = token[4] = [];
        break;
      case '/':
        section = sections.pop();
        section[5] = token[2];
        collector = sections.length > 0 ? sections[sections.length - 1][4] : nestedTokens;
        break;
      default:
        collector.push(token);
      }
    }

    return nestedTokens;
  }

  /**
   * A simple string scanner that is used by the template parser to find
   * tokens in template strings.
   */
  function Scanner(string) {
    this.string = string;
    this.tail = string;
    this.pos = 0;
  }

  /**
   * Returns `true` if the tail is empty (end of string).
   */
  Scanner.prototype.eos = function () {
    return this.tail === "";
  };

  /**
   * Tries to match the given regular expression at the current position.
   * Returns the matched text if it can match, the empty string otherwise.
   */
  Scanner.prototype.scan = function (re) {
    var match = this.tail.match(re);

    if (!match || match.index !== 0)
      return '';

    var string = match[0];

    this.tail = this.tail.substring(string.length);
    this.pos += string.length;

    return string;
  };

  /**
   * Skips all text until the given regular expression can be matched. Returns
   * the skipped string, which is the entire tail if no match can be made.
   */
  Scanner.prototype.scanUntil = function (re) {
    var index = this.tail.search(re), match;

    switch (index) {
    case -1:
      match = this.tail;
      this.tail = "";
      break;
    case 0:
      match = "";
      break;
    default:
      match = this.tail.substring(0, index);
      this.tail = this.tail.substring(index);
    }

    this.pos += match.length;

    return match;
  };

  /**
   * Represents a rendering context by wrapping a view object and
   * maintaining a reference to the parent context.
   */
  function Context(view, parentContext) {
    this.view = view == null ? {} : view;
    this.cache = { '.': this.view };
    this.parent = parentContext;
  }

  /**
   * Creates a new context using the given view with this context
   * as the parent.
   */
  Context.prototype.push = function (view) {
    return new Context(view, this);
  };

  /**
   * Returns the value of the given name in this context, traversing
   * up the context hierarchy if the value is absent in this context's view.
   */
  Context.prototype.lookup = function (name) {
    var cache = this.cache;

    var value;
    if (name in cache) {
      value = cache[name];
    } else {
      var context = this, names, index;

      while (context) {
        if (name.indexOf('.') > 0) {
          value = context.view;
          names = name.split('.');
          index = 0;

          while (value != null && index < names.length)
            value = value[names[index++]];
        } else {
          value = context.view[name];
        }

        if (value != null)
          break;

        context = context.parent;
      }

      cache[name] = value;
    }

    if (isFunction(value))
      value = value.call(this.view);

    return value;
  };

  /**
   * A Writer knows how to take a stream of tokens and render them to a
   * string, given a context. It also maintains a cache of templates to
   * avoid the need to parse the same template twice.
   */
  function Writer() {
    this.cache = {};
  }

  /**
   * Clears all cached templates in this writer.
   */
  Writer.prototype.clearCache = function () {
    this.cache = {};
  };

  /**
   * Parses and caches the given `template` and returns the array of tokens
   * that is generated from the parse.
   */
  Writer.prototype.parse = function (template, tags) {
    var cache = this.cache;
    var tokens = cache[template];

    if (tokens == null)
      tokens = cache[template] = parseTemplate(template, tags);

    return tokens;
  };

  /**
   * High-level method that is used to render the given `template` with
   * the given `view`.
   *
   * The optional `partials` argument may be an object that contains the
   * names and templates of partials that are used in the template. It may
   * also be a function that is used to load partial templates on the fly
   * that takes a single argument: the name of the partial.
   */
  Writer.prototype.render = function (template, view, partials) {
    var tokens = this.parse(template);
    var context = (view instanceof Context) ? view : new Context(view);
    return this.renderTokens(tokens, context, partials, template);
  };

  /**
   * Low-level method that renders the given array of `tokens` using
   * the given `context` and `partials`.
   *
   * Note: The `originalTemplate` is only ever used to extract the portion
   * of the original template that was contained in a higher-order section.
   * If the template doesn't use higher-order sections, this argument may
   * be omitted.
   */
  Writer.prototype.renderTokens = function (tokens, context, partials, originalTemplate) {
    var buffer = '';

    // This function is used to render an arbitrary template
    // in the current context by higher-order sections.
    var self = this;
    function subRender(template) {
      return self.render(template, context, partials);
    }

    var token, value;
    for (var i = 0, numTokens = tokens.length; i < numTokens; ++i) {
      token = tokens[i];

      switch (token[0]) {
      case '#':
        value = context.lookup(token[1]);

        if (!value)
          continue;

        if (isArray(value)) {
          for (var j = 0, valueLength = value.length; j < valueLength; ++j) {
            buffer += this.renderTokens(token[4], context.push(value[j]), partials, originalTemplate);
          }
        } else if (typeof value === 'object' || typeof value === 'string') {
          buffer += this.renderTokens(token[4], context.push(value), partials, originalTemplate);
        } else if (isFunction(value)) {
          if (typeof originalTemplate !== 'string')
            throw new Error('Cannot use higher-order sections without the original template');

          // Extract the portion of the original template that the section contains.
          value = value.call(context.view, originalTemplate.slice(token[3], token[5]), subRender);

          if (value != null)
            buffer += value;
        } else {
          buffer += this.renderTokens(token[4], context, partials, originalTemplate);
        }

        break;
      case '^':
        value = context.lookup(token[1]);

        // Use JavaScript's definition of falsy. Include empty arrays.
        // See https://github.com/janl/mustache.js/issues/186
        if (!value || (isArray(value) && value.length === 0))
          buffer += this.renderTokens(token[4], context, partials, originalTemplate);

        break;
      case '>':
        if (!partials)
          continue;

        value = isFunction(partials) ? partials(token[1]) : partials[token[1]];

        if (value != null)
          buffer += this.renderTokens(this.parse(value), context, partials, value);

        break;
      case '&':
        value = context.lookup(token[1]);

        if (value != null)
          buffer += value;

        break;
      case 'name':
        value = context.lookup(token[1]);

        if (value != null)
          buffer += mustache.escape(value);

        break;
      case 'text':
        buffer += token[1];
        break;
      }
    }

    return buffer;
  };

  mustache.name = "mustache.js";
  mustache.version = "0.8.1";
  mustache.tags = [ "{{", "}}" ];

  // All high-level mustache.* functions use this writer.
  var defaultWriter = new Writer();

  /**
   * Clears all cached templates in the default writer.
   */
  mustache.clearCache = function () {
    return defaultWriter.clearCache();
  };

  /**
   * Parses and caches the given template in the default writer and returns the
   * array of tokens it contains. Doing this ahead of time avoids the need to
   * parse templates on the fly as they are rendered.
   */
  mustache.parse = function (template, tags) {
    return defaultWriter.parse(template, tags);
  };

  /**
   * Renders the `template` with the given `view` and `partials` using the
   * default writer.
   */
  mustache.render = function (template, view, partials) {
    return defaultWriter.render(template, view, partials);
  };

  // This is here for backwards compatibility with 0.4.x.
  mustache.to_html = function (template, view, partials, send) {
    var result = mustache.render(template, view, partials);

    if (isFunction(send)) {
      send(result);
    } else {
      return result;
    }
  };

  // Export the escaping function so that the user may override it.
  // See https://github.com/janl/mustache.js/issues/244
  mustache.escape = escapeHtml;

  // Export these mainly for testing, but also for advanced usage.
  mustache.Scanner = Scanner;
  mustache.Context = Context;
  mustache.Writer = Writer;

}));
 
 /*!
 * Bootstrap v3.1.1 (http://getbootstrap.com)
 * Copyright 2011-2014 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 */
if("undefined"==typeof jQuery)throw new Error("Bootstrap's JavaScript requires jQuery");+function(a){"use strict";function b(){var a=document.createElement("bootstrap"),b={WebkitTransition:"webkitTransitionEnd",MozTransition:"transitionend",OTransition:"oTransitionEnd otransitionend",transition:"transitionend"};for(var c in b)if(void 0!==a.style[c])return{end:b[c]};return!1}a.fn.emulateTransitionEnd=function(b){var c=!1,d=this;a(this).one(a.support.transition.end,function(){c=!0});var e=function(){c||a(d).trigger(a.support.transition.end)};return setTimeout(e,b),this},a(function(){a.support.transition=b()})}(jQuery),+function(a){"use strict";var b='[data-dismiss="alert"]',c=function(c){a(c).on("click",b,this.close)};c.prototype.close=function(b){function c(){f.trigger("closed.bs.alert").remove()}var d=a(this),e=d.attr("data-target");e||(e=d.attr("href"),e=e&&e.replace(/.*(?=#[^\s]*$)/,""));var f=a(e);b&&b.preventDefault(),f.length||(f=d.hasClass("alert")?d:d.parent()),f.trigger(b=a.Event("close.bs.alert")),b.isDefaultPrevented()||(f.removeClass("in"),a.support.transition&&f.hasClass("fade")?f.one(a.support.transition.end,c).emulateTransitionEnd(150):c())};var d=a.fn.alert;a.fn.alert=function(b){return this.each(function(){var d=a(this),e=d.data("bs.alert");e||d.data("bs.alert",e=new c(this)),"string"==typeof b&&e[b].call(d)})},a.fn.alert.Constructor=c,a.fn.alert.noConflict=function(){return a.fn.alert=d,this},a(document).on("click.bs.alert.data-api",b,c.prototype.close)}(jQuery),+function(a){"use strict";var b=function(c,d){this.$element=a(c),this.options=a.extend({},b.DEFAULTS,d),this.isLoading=!1};b.DEFAULTS={loadingText:"loading..."},b.prototype.setState=function(b){var c="disabled",d=this.$element,e=d.is("input")?"val":"html",f=d.data();b+="Text",f.resetText||d.data("resetText",d[e]()),d[e](f[b]||this.options[b]),setTimeout(a.proxy(function(){"loadingText"==b?(this.isLoading=!0,d.addClass(c).attr(c,c)):this.isLoading&&(this.isLoading=!1,d.removeClass(c).removeAttr(c))},this),0)},b.prototype.toggle=function(){var a=!0,b=this.$element.closest('[data-toggle="buttons"]');if(b.length){var c=this.$element.find("input");"radio"==c.prop("type")&&(c.prop("checked")&&this.$element.hasClass("active")?a=!1:b.find(".active").removeClass("active")),a&&c.prop("checked",!this.$element.hasClass("active")).trigger("change")}a&&this.$element.toggleClass("active")};var c=a.fn.button;a.fn.button=function(c){return this.each(function(){var d=a(this),e=d.data("bs.button"),f="object"==typeof c&&c;e||d.data("bs.button",e=new b(this,f)),"toggle"==c?e.toggle():c&&e.setState(c)})},a.fn.button.Constructor=b,a.fn.button.noConflict=function(){return a.fn.button=c,this},a(document).on("click.bs.button.data-api","[data-toggle^=button]",function(b){var c=a(b.target);c.hasClass("btn")||(c=c.closest(".btn")),c.button("toggle"),b.preventDefault()})}(jQuery),+function(a){"use strict";var b=function(b,c){this.$element=a(b),this.$indicators=this.$element.find(".carousel-indicators"),this.options=c,this.paused=this.sliding=this.interval=this.$active=this.$items=null,"hover"==this.options.pause&&this.$element.on("mouseenter",a.proxy(this.pause,this)).on("mouseleave",a.proxy(this.cycle,this))};b.DEFAULTS={interval:5e3,pause:"hover",wrap:!0},b.prototype.cycle=function(b){return b||(this.paused=!1),this.interval&&clearInterval(this.interval),this.options.interval&&!this.paused&&(this.interval=setInterval(a.proxy(this.next,this),this.options.interval)),this},b.prototype.getActiveIndex=function(){return this.$active=this.$element.find(".item.active"),this.$items=this.$active.parent().children(),this.$items.index(this.$active)},b.prototype.to=function(b){var c=this,d=this.getActiveIndex();return b>this.$items.length-1||0>b?void 0:this.sliding?this.$element.one("slid.bs.carousel",function(){c.to(b)}):d==b?this.pause().cycle():this.slide(b>d?"next":"prev",a(this.$items[b]))},b.prototype.pause=function(b){return b||(this.paused=!0),this.$element.find(".next, .prev").length&&a.support.transition&&(this.$element.trigger(a.support.transition.end),this.cycle(!0)),this.interval=clearInterval(this.interval),this},b.prototype.next=function(){return this.sliding?void 0:this.slide("next")},b.prototype.prev=function(){return this.sliding?void 0:this.slide("prev")},b.prototype.slide=function(b,c){var d=this.$element.find(".item.active"),e=c||d[b](),f=this.interval,g="next"==b?"left":"right",h="next"==b?"first":"last",i=this;if(!e.length){if(!this.options.wrap)return;e=this.$element.find(".item")[h]()}if(e.hasClass("active"))return this.sliding=!1;var j=a.Event("slide.bs.carousel",{relatedTarget:e[0],direction:g});return this.$element.trigger(j),j.isDefaultPrevented()?void 0:(this.sliding=!0,f&&this.pause(),this.$indicators.length&&(this.$indicators.find(".active").removeClass("active"),this.$element.one("slid.bs.carousel",function(){var b=a(i.$indicators.children()[i.getActiveIndex()]);b&&b.addClass("active")})),a.support.transition&&this.$element.hasClass("slide")?(e.addClass(b),e[0].offsetWidth,d.addClass(g),e.addClass(g),d.one(a.support.transition.end,function(){e.removeClass([b,g].join(" ")).addClass("active"),d.removeClass(["active",g].join(" ")),i.sliding=!1,setTimeout(function(){i.$element.trigger("slid.bs.carousel")},0)}).emulateTransitionEnd(1e3*d.css("transition-duration").slice(0,-1))):(d.removeClass("active"),e.addClass("active"),this.sliding=!1,this.$element.trigger("slid.bs.carousel")),f&&this.cycle(),this)};var c=a.fn.carousel;a.fn.carousel=function(c){return this.each(function(){var d=a(this),e=d.data("bs.carousel"),f=a.extend({},b.DEFAULTS,d.data(),"object"==typeof c&&c),g="string"==typeof c?c:f.slide;e||d.data("bs.carousel",e=new b(this,f)),"number"==typeof c?e.to(c):g?e[g]():f.interval&&e.pause().cycle()})},a.fn.carousel.Constructor=b,a.fn.carousel.noConflict=function(){return a.fn.carousel=c,this},a(document).on("click.bs.carousel.data-api","[data-slide], [data-slide-to]",function(b){var c,d=a(this),e=a(d.attr("data-target")||(c=d.attr("href"))&&c.replace(/.*(?=#[^\s]+$)/,"")),f=a.extend({},e.data(),d.data()),g=d.attr("data-slide-to");g&&(f.interval=!1),e.carousel(f),(g=d.attr("data-slide-to"))&&e.data("bs.carousel").to(g),b.preventDefault()}),a(window).on("load",function(){a('[data-ride="carousel"]').each(function(){var b=a(this);b.carousel(b.data())})})}(jQuery),+function(a){"use strict";var b=function(c,d){this.$element=a(c),this.options=a.extend({},b.DEFAULTS,d),this.transitioning=null,this.options.parent&&(this.$parent=a(this.options.parent)),this.options.toggle&&this.toggle()};b.DEFAULTS={toggle:!0},b.prototype.dimension=function(){var a=this.$element.hasClass("width");return a?"width":"height"},b.prototype.show=function(){if(!this.transitioning&&!this.$element.hasClass("in")){var b=a.Event("show.bs.collapse");if(this.$element.trigger(b),!b.isDefaultPrevented()){var c=this.$parent&&this.$parent.find("> .panel > .in");if(c&&c.length){var d=c.data("bs.collapse");if(d&&d.transitioning)return;c.collapse("hide"),d||c.data("bs.collapse",null)}var e=this.dimension();this.$element.removeClass("collapse").addClass("collapsing")[e](0),this.transitioning=1;var f=function(){this.$element.removeClass("collapsing").addClass("collapse in")[e]("auto"),this.transitioning=0,this.$element.trigger("shown.bs.collapse")};if(!a.support.transition)return f.call(this);var g=a.camelCase(["scroll",e].join("-"));this.$element.one(a.support.transition.end,a.proxy(f,this)).emulateTransitionEnd(350)[e](this.$element[0][g])}}},b.prototype.hide=function(){if(!this.transitioning&&this.$element.hasClass("in")){var b=a.Event("hide.bs.collapse");if(this.$element.trigger(b),!b.isDefaultPrevented()){var c=this.dimension();this.$element[c](this.$element[c]())[0].offsetHeight,this.$element.addClass("collapsing").removeClass("collapse").removeClass("in"),this.transitioning=1;var d=function(){this.transitioning=0,this.$element.trigger("hidden.bs.collapse").removeClass("collapsing").addClass("collapse")};return a.support.transition?void this.$element[c](0).one(a.support.transition.end,a.proxy(d,this)).emulateTransitionEnd(350):d.call(this)}}},b.prototype.toggle=function(){this[this.$element.hasClass("in")?"hide":"show"]()};var c=a.fn.collapse;a.fn.collapse=function(c){return this.each(function(){var d=a(this),e=d.data("bs.collapse"),f=a.extend({},b.DEFAULTS,d.data(),"object"==typeof c&&c);!e&&f.toggle&&"show"==c&&(c=!c),e||d.data("bs.collapse",e=new b(this,f)),"string"==typeof c&&e[c]()})},a.fn.collapse.Constructor=b,a.fn.collapse.noConflict=function(){return a.fn.collapse=c,this},a(document).on("click.bs.collapse.data-api","[data-toggle=collapse]",function(b){var c,d=a(this),e=d.attr("data-target")||b.preventDefault()||(c=d.attr("href"))&&c.replace(/.*(?=#[^\s]+$)/,""),f=a(e),g=f.data("bs.collapse"),h=g?"toggle":d.data(),i=d.attr("data-parent"),j=i&&a(i);g&&g.transitioning||(j&&j.find('[data-toggle=collapse][data-parent="'+i+'"]').not(d).addClass("collapsed"),d[f.hasClass("in")?"addClass":"removeClass"]("collapsed")),f.collapse(h)})}(jQuery),+function(a){"use strict";function b(b){a(d).remove(),a(e).each(function(){var d=c(a(this)),e={relatedTarget:this};d.hasClass("open")&&(d.trigger(b=a.Event("hide.bs.dropdown",e)),b.isDefaultPrevented()||d.removeClass("open").trigger("hidden.bs.dropdown",e))})}function c(b){var c=b.attr("data-target");c||(c=b.attr("href"),c=c&&/#[A-Za-z]/.test(c)&&c.replace(/.*(?=#[^\s]*$)/,""));var d=c&&a(c);return d&&d.length?d:b.parent()}var d=".dropdown-backdrop",e="[data-toggle=dropdown]",f=function(b){a(b).on("click.bs.dropdown",this.toggle)};f.prototype.toggle=function(d){var e=a(this);if(!e.is(".disabled, :disabled")){var f=c(e),g=f.hasClass("open");if(b(),!g){"ontouchstart"in document.documentElement&&!f.closest(".navbar-nav").length&&a('<div class="dropdown-backdrop"/>').insertAfter(a(this)).on("click",b);var h={relatedTarget:this};if(f.trigger(d=a.Event("show.bs.dropdown",h)),d.isDefaultPrevented())return;f.toggleClass("open").trigger("shown.bs.dropdown",h),e.focus()}return!1}},f.prototype.keydown=function(b){if(/(38|40|27)/.test(b.keyCode)){var d=a(this);if(b.preventDefault(),b.stopPropagation(),!d.is(".disabled, :disabled")){var f=c(d),g=f.hasClass("open");if(!g||g&&27==b.keyCode)return 27==b.which&&f.find(e).focus(),d.click();var h=" li:not(.divider):visible a",i=f.find("[role=menu]"+h+", [role=listbox]"+h);if(i.length){var j=i.index(i.filter(":focus"));38==b.keyCode&&j>0&&j--,40==b.keyCode&&j<i.length-1&&j++,~j||(j=0),i.eq(j).focus()}}}};var g=a.fn.dropdown;a.fn.dropdown=function(b){return this.each(function(){var c=a(this),d=c.data("bs.dropdown");d||c.data("bs.dropdown",d=new f(this)),"string"==typeof b&&d[b].call(c)})},a.fn.dropdown.Constructor=f,a.fn.dropdown.noConflict=function(){return a.fn.dropdown=g,this},a(document).on("click.bs.dropdown.data-api",b).on("click.bs.dropdown.data-api",".dropdown form",function(a){a.stopPropagation()}).on("click.bs.dropdown.data-api",e,f.prototype.toggle).on("keydown.bs.dropdown.data-api",e+", [role=menu], [role=listbox]",f.prototype.keydown)}(jQuery),+function(a){"use strict";var b=function(b,c){this.options=c,this.$element=a(b),this.$backdrop=this.isShown=null,this.options.remote&&this.$element.find(".modal-content").load(this.options.remote,a.proxy(function(){this.$element.trigger("loaded.bs.modal")},this))};b.DEFAULTS={backdrop:!0,keyboard:!0,show:!0},b.prototype.toggle=function(a){return this[this.isShown?"hide":"show"](a)},b.prototype.show=function(b){var c=this,d=a.Event("show.bs.modal",{relatedTarget:b});this.$element.trigger(d),this.isShown||d.isDefaultPrevented()||(this.isShown=!0,this.escape(),this.$element.on("click.dismiss.bs.modal",'[data-dismiss="modal"]',a.proxy(this.hide,this)),this.backdrop(function(){var d=a.support.transition&&c.$element.hasClass("fade");c.$element.parent().length||c.$element.appendTo(document.body),c.$element.show().scrollTop(0),d&&c.$element[0].offsetWidth,c.$element.addClass("in").attr("aria-hidden",!1),c.enforceFocus();var e=a.Event("shown.bs.modal",{relatedTarget:b});d?c.$element.find(".modal-dialog").one(a.support.transition.end,function(){c.$element.focus().trigger(e)}).emulateTransitionEnd(300):c.$element.focus().trigger(e)}))},b.prototype.hide=function(b){b&&b.preventDefault(),b=a.Event("hide.bs.modal"),this.$element.trigger(b),this.isShown&&!b.isDefaultPrevented()&&(this.isShown=!1,this.escape(),a(document).off("focusin.bs.modal"),this.$element.removeClass("in").attr("aria-hidden",!0).off("click.dismiss.bs.modal"),a.support.transition&&this.$element.hasClass("fade")?this.$element.one(a.support.transition.end,a.proxy(this.hideModal,this)).emulateTransitionEnd(300):this.hideModal())},b.prototype.enforceFocus=function(){a(document).off("focusin.bs.modal").on("focusin.bs.modal",a.proxy(function(a){this.$element[0]===a.target||this.$element.has(a.target).length||this.$element.focus()},this))},b.prototype.escape=function(){this.isShown&&this.options.keyboard?this.$element.on("keyup.dismiss.bs.modal",a.proxy(function(a){27==a.which&&this.hide()},this)):this.isShown||this.$element.off("keyup.dismiss.bs.modal")},b.prototype.hideModal=function(){var a=this;this.$element.hide(),this.backdrop(function(){a.removeBackdrop(),a.$element.trigger("hidden.bs.modal")})},b.prototype.removeBackdrop=function(){this.$backdrop&&this.$backdrop.remove(),this.$backdrop=null},b.prototype.backdrop=function(b){var c=this.$element.hasClass("fade")?"fade":"";if(this.isShown&&this.options.backdrop){var d=a.support.transition&&c;if(this.$backdrop=a('<div class="modal-backdrop '+c+'" />').appendTo(document.body),this.$element.on("click.dismiss.bs.modal",a.proxy(function(a){a.target===a.currentTarget&&("static"==this.options.backdrop?this.$element[0].focus.call(this.$element[0]):this.hide.call(this))},this)),d&&this.$backdrop[0].offsetWidth,this.$backdrop.addClass("in"),!b)return;d?this.$backdrop.one(a.support.transition.end,b).emulateTransitionEnd(150):b()}else!this.isShown&&this.$backdrop?(this.$backdrop.removeClass("in"),a.support.transition&&this.$element.hasClass("fade")?this.$backdrop.one(a.support.transition.end,b).emulateTransitionEnd(150):b()):b&&b()};var c=a.fn.modal;a.fn.modal=function(c,d){return this.each(function(){var e=a(this),f=e.data("bs.modal"),g=a.extend({},b.DEFAULTS,e.data(),"object"==typeof c&&c);f||e.data("bs.modal",f=new b(this,g)),"string"==typeof c?f[c](d):g.show&&f.show(d)})},a.fn.modal.Constructor=b,a.fn.modal.noConflict=function(){return a.fn.modal=c,this},a(document).on("click.bs.modal.data-api",'[data-toggle="modal"]',function(b){var c=a(this),d=c.attr("href"),e=a(c.attr("data-target")||d&&d.replace(/.*(?=#[^\s]+$)/,"")),f=e.data("bs.modal")?"toggle":a.extend({remote:!/#/.test(d)&&d},e.data(),c.data());c.is("a")&&b.preventDefault(),e.modal(f,this).one("hide",function(){c.is(":visible")&&c.focus()})}),a(document).on("show.bs.modal",".modal",function(){a(document.body).addClass("modal-open")}).on("hidden.bs.modal",".modal",function(){a(document.body).removeClass("modal-open")})}(jQuery),+function(a){"use strict";var b=function(a,b){this.type=this.options=this.enabled=this.timeout=this.hoverState=this.$element=null,this.init("tooltip",a,b)};b.DEFAULTS={animation:!0,placement:"top",selector:!1,template:'<div class="tooltip"><div class="tooltip-arrow"></div><div class="tooltip-inner"></div></div>',trigger:"hover focus",title:"",delay:0,html:!1,container:!1},b.prototype.init=function(b,c,d){this.enabled=!0,this.type=b,this.$element=a(c),this.options=this.getOptions(d);for(var e=this.options.trigger.split(" "),f=e.length;f--;){var g=e[f];if("click"==g)this.$element.on("click."+this.type,this.options.selector,a.proxy(this.toggle,this));else if("manual"!=g){var h="hover"==g?"mouseenter":"focusin",i="hover"==g?"mouseleave":"focusout";this.$element.on(h+"."+this.type,this.options.selector,a.proxy(this.enter,this)),this.$element.on(i+"."+this.type,this.options.selector,a.proxy(this.leave,this))}}this.options.selector?this._options=a.extend({},this.options,{trigger:"manual",selector:""}):this.fixTitle()},b.prototype.getDefaults=function(){return b.DEFAULTS},b.prototype.getOptions=function(b){return b=a.extend({},this.getDefaults(),this.$element.data(),b),b.delay&&"number"==typeof b.delay&&(b.delay={show:b.delay,hide:b.delay}),b},b.prototype.getDelegateOptions=function(){var b={},c=this.getDefaults();return this._options&&a.each(this._options,function(a,d){c[a]!=d&&(b[a]=d)}),b},b.prototype.enter=function(b){var c=b instanceof this.constructor?b:a(b.currentTarget)[this.type](this.getDelegateOptions()).data("bs."+this.type);return clearTimeout(c.timeout),c.hoverState="in",c.options.delay&&c.options.delay.show?void(c.timeout=setTimeout(function(){"in"==c.hoverState&&c.show()},c.options.delay.show)):c.show()},b.prototype.leave=function(b){var c=b instanceof this.constructor?b:a(b.currentTarget)[this.type](this.getDelegateOptions()).data("bs."+this.type);return clearTimeout(c.timeout),c.hoverState="out",c.options.delay&&c.options.delay.hide?void(c.timeout=setTimeout(function(){"out"==c.hoverState&&c.hide()},c.options.delay.hide)):c.hide()},b.prototype.show=function(){var b=a.Event("show.bs."+this.type);if(this.hasContent()&&this.enabled){if(this.$element.trigger(b),b.isDefaultPrevented())return;var c=this,d=this.tip();this.setContent(),this.options.animation&&d.addClass("fade");var e="function"==typeof this.options.placement?this.options.placement.call(this,d[0],this.$element[0]):this.options.placement,f=/\s?auto?\s?/i,g=f.test(e);g&&(e=e.replace(f,"")||"top"),d.detach().css({top:0,left:0,display:"block"}).addClass(e),this.options.container?d.appendTo(this.options.container):d.insertAfter(this.$element);var h=this.getPosition(),i=d[0].offsetWidth,j=d[0].offsetHeight;if(g){var k=this.$element.parent(),l=e,m=document.documentElement.scrollTop||document.body.scrollTop,n="body"==this.options.container?window.innerWidth:k.outerWidth(),o="body"==this.options.container?window.innerHeight:k.outerHeight(),p="body"==this.options.container?0:k.offset().left;e="bottom"==e&&h.top+h.height+j-m>o?"top":"top"==e&&h.top-m-j<0?"bottom":"right"==e&&h.right+i>n?"left":"left"==e&&h.left-i<p?"right":e,d.removeClass(l).addClass(e)}var q=this.getCalculatedOffset(e,h,i,j);this.applyPlacement(q,e),this.hoverState=null;var r=function(){c.$element.trigger("shown.bs."+c.type)};a.support.transition&&this.$tip.hasClass("fade")?d.one(a.support.transition.end,r).emulateTransitionEnd(150):r()}},b.prototype.applyPlacement=function(b,c){var d,e=this.tip(),f=e[0].offsetWidth,g=e[0].offsetHeight,h=parseInt(e.css("margin-top"),10),i=parseInt(e.css("margin-left"),10);isNaN(h)&&(h=0),isNaN(i)&&(i=0),b.top=b.top+h,b.left=b.left+i,a.offset.setOffset(e[0],a.extend({using:function(a){e.css({top:Math.round(a.top),left:Math.round(a.left)})}},b),0),e.addClass("in");var j=e[0].offsetWidth,k=e[0].offsetHeight;if("top"==c&&k!=g&&(d=!0,b.top=b.top+g-k),/bottom|top/.test(c)){var l=0;b.left<0&&(l=-2*b.left,b.left=0,e.offset(b),j=e[0].offsetWidth,k=e[0].offsetHeight),this.replaceArrow(l-f+j,j,"left")}else this.replaceArrow(k-g,k,"top");d&&e.offset(b)},b.prototype.replaceArrow=function(a,b,c){this.arrow().css(c,a?50*(1-a/b)+"%":"")},b.prototype.setContent=function(){var a=this.tip(),b=this.getTitle();a.find(".tooltip-inner")[this.options.html?"html":"text"](b),a.removeClass("fade in top bottom left right")},b.prototype.hide=function(){function b(){"in"!=c.hoverState&&d.detach(),c.$element.trigger("hidden.bs."+c.type)}var c=this,d=this.tip(),e=a.Event("hide.bs."+this.type);return this.$element.trigger(e),e.isDefaultPrevented()?void 0:(d.removeClass("in"),a.support.transition&&this.$tip.hasClass("fade")?d.one(a.support.transition.end,b).emulateTransitionEnd(150):b(),this.hoverState=null,this)},b.prototype.fixTitle=function(){var a=this.$element;(a.attr("title")||"string"!=typeof a.attr("data-original-title"))&&a.attr("data-original-title",a.attr("title")||"").attr("title","")},b.prototype.hasContent=function(){return this.getTitle()},b.prototype.getPosition=function(){var b=this.$element[0];return a.extend({},"function"==typeof b.getBoundingClientRect?b.getBoundingClientRect():{width:b.offsetWidth,height:b.offsetHeight},this.$element.offset())},b.prototype.getCalculatedOffset=function(a,b,c,d){return"bottom"==a?{top:b.top+b.height,left:b.left+b.width/2-c/2}:"top"==a?{top:b.top-d,left:b.left+b.width/2-c/2}:"left"==a?{top:b.top+b.height/2-d/2,left:b.left-c}:{top:b.top+b.height/2-d/2,left:b.left+b.width}},b.prototype.getTitle=function(){var a,b=this.$element,c=this.options;return a=b.attr("data-original-title")||("function"==typeof c.title?c.title.call(b[0]):c.title)},b.prototype.tip=function(){return this.$tip=this.$tip||a(this.options.template)},b.prototype.arrow=function(){return this.$arrow=this.$arrow||this.tip().find(".tooltip-arrow")},b.prototype.validate=function(){this.$element[0].parentNode||(this.hide(),this.$element=null,this.options=null)},b.prototype.enable=function(){this.enabled=!0},b.prototype.disable=function(){this.enabled=!1},b.prototype.toggleEnabled=function(){this.enabled=!this.enabled},b.prototype.toggle=function(b){var c=b?a(b.currentTarget)[this.type](this.getDelegateOptions()).data("bs."+this.type):this;c.tip().hasClass("in")?c.leave(c):c.enter(c)},b.prototype.destroy=function(){clearTimeout(this.timeout),this.hide().$element.off("."+this.type).removeData("bs."+this.type)};var c=a.fn.tooltip;a.fn.tooltip=function(c){return this.each(function(){var d=a(this),e=d.data("bs.tooltip"),f="object"==typeof c&&c;(e||"destroy"!=c)&&(e||d.data("bs.tooltip",e=new b(this,f)),"string"==typeof c&&e[c]())})},a.fn.tooltip.Constructor=b,a.fn.tooltip.noConflict=function(){return a.fn.tooltip=c,this}}(jQuery),+function(a){"use strict";var b=function(a,b){this.init("popover",a,b)};if(!a.fn.tooltip)throw new Error("Popover requires tooltip.js");b.DEFAULTS=a.extend({},a.fn.tooltip.Constructor.DEFAULTS,{placement:"right",trigger:"click",content:"",template:'<div class="popover"><div class="arrow"></div><h3 class="popover-title"></h3><div class="popover-content"></div></div>'}),b.prototype=a.extend({},a.fn.tooltip.Constructor.prototype),b.prototype.constructor=b,b.prototype.getDefaults=function(){return b.DEFAULTS},b.prototype.setContent=function(){var a=this.tip(),b=this.getTitle(),c=this.getContent();a.find(".popover-title")[this.options.html?"html":"text"](b),a.find(".popover-content")[this.options.html?"string"==typeof c?"html":"append":"text"](c),a.removeClass("fade top bottom left right in"),a.find(".popover-title").html()||a.find(".popover-title").hide()},b.prototype.hasContent=function(){return this.getTitle()||this.getContent()},b.prototype.getContent=function(){var a=this.$element,b=this.options;return a.attr("data-content")||("function"==typeof b.content?b.content.call(a[0]):b.content)},b.prototype.arrow=function(){return this.$arrow=this.$arrow||this.tip().find(".arrow")},b.prototype.tip=function(){return this.$tip||(this.$tip=a(this.options.template)),this.$tip};var c=a.fn.popover;a.fn.popover=function(c){return this.each(function(){var d=a(this),e=d.data("bs.popover"),f="object"==typeof c&&c;(e||"destroy"!=c)&&(e||d.data("bs.popover",e=new b(this,f)),"string"==typeof c&&e[c]())})},a.fn.popover.Constructor=b,a.fn.popover.noConflict=function(){return a.fn.popover=c,this}}(jQuery),+function(a){"use strict";function b(c,d){var e,f=a.proxy(this.process,this);this.$element=a(a(c).is("body")?window:c),this.$body=a("body"),this.$scrollElement=this.$element.on("scroll.bs.scroll-spy.data-api",f),this.options=a.extend({},b.DEFAULTS,d),this.selector=(this.options.target||(e=a(c).attr("href"))&&e.replace(/.*(?=#[^\s]+$)/,"")||"")+" .nav li > a",this.offsets=a([]),this.targets=a([]),this.activeTarget=null,this.refresh(),this.process()}b.DEFAULTS={offset:10},b.prototype.refresh=function(){var b=this.$element[0]==window?"offset":"position";this.offsets=a([]),this.targets=a([]);{var c=this;this.$body.find(this.selector).map(function(){var d=a(this),e=d.data("target")||d.attr("href"),f=/^#./.test(e)&&a(e);return f&&f.length&&f.is(":visible")&&[[f[b]().top+(!a.isWindow(c.$scrollElement.get(0))&&c.$scrollElement.scrollTop()),e]]||null}).sort(function(a,b){return a[0]-b[0]}).each(function(){c.offsets.push(this[0]),c.targets.push(this[1])})}},b.prototype.process=function(){var a,b=this.$scrollElement.scrollTop()+this.options.offset,c=this.$scrollElement[0].scrollHeight||this.$body[0].scrollHeight,d=c-this.$scrollElement.height(),e=this.offsets,f=this.targets,g=this.activeTarget;if(b>=d)return g!=(a=f.last()[0])&&this.activate(a);if(g&&b<=e[0])return g!=(a=f[0])&&this.activate(a);for(a=e.length;a--;)g!=f[a]&&b>=e[a]&&(!e[a+1]||b<=e[a+1])&&this.activate(f[a])},b.prototype.activate=function(b){this.activeTarget=b,a(this.selector).parentsUntil(this.options.target,".active").removeClass("active");var c=this.selector+'[data-target="'+b+'"],'+this.selector+'[href="'+b+'"]',d=a(c).parents("li").addClass("active");d.parent(".dropdown-menu").length&&(d=d.closest("li.dropdown").addClass("active")),d.trigger("activate.bs.scrollspy")};var c=a.fn.scrollspy;a.fn.scrollspy=function(c){return this.each(function(){var d=a(this),e=d.data("bs.scrollspy"),f="object"==typeof c&&c;e||d.data("bs.scrollspy",e=new b(this,f)),"string"==typeof c&&e[c]()})},a.fn.scrollspy.Constructor=b,a.fn.scrollspy.noConflict=function(){return a.fn.scrollspy=c,this},a(window).on("load",function(){a('[data-spy="scroll"]').each(function(){var b=a(this);b.scrollspy(b.data())})})}(jQuery),+function(a){"use strict";var b=function(b){this.element=a(b)};b.prototype.show=function(){var b=this.element,c=b.closest("ul:not(.dropdown-menu)"),d=b.data("target");if(d||(d=b.attr("href"),d=d&&d.replace(/.*(?=#[^\s]*$)/,"")),!b.parent("li").hasClass("active")){var e=c.find(".active:last a")[0],f=a.Event("show.bs.tab",{relatedTarget:e});if(b.trigger(f),!f.isDefaultPrevented()){var g=a(d);this.activate(b.parent("li"),c),this.activate(g,g.parent(),function(){b.trigger({type:"shown.bs.tab",relatedTarget:e})})}}},b.prototype.activate=function(b,c,d){function e(){f.removeClass("active").find("> .dropdown-menu > .active").removeClass("active"),b.addClass("active"),g?(b[0].offsetWidth,b.addClass("in")):b.removeClass("fade"),b.parent(".dropdown-menu")&&b.closest("li.dropdown").addClass("active"),d&&d()}var f=c.find("> .active"),g=d&&a.support.transition&&f.hasClass("fade");g?f.one(a.support.transition.end,e).emulateTransitionEnd(150):e(),f.removeClass("in")};var c=a.fn.tab;a.fn.tab=function(c){return this.each(function(){var d=a(this),e=d.data("bs.tab");e||d.data("bs.tab",e=new b(this)),"string"==typeof c&&e[c]()})},a.fn.tab.Constructor=b,a.fn.tab.noConflict=function(){return a.fn.tab=c,this},a(document).on("click.bs.tab.data-api",'[data-toggle="tab"], [data-toggle="pill"]',function(b){b.preventDefault(),a(this).tab("show")})}(jQuery),+function(a){"use strict";var b=function(c,d){this.options=a.extend({},b.DEFAULTS,d),this.$window=a(window).on("scroll.bs.affix.data-api",a.proxy(this.checkPosition,this)).on("click.bs.affix.data-api",a.proxy(this.checkPositionWithEventLoop,this)),this.$element=a(c),this.affixed=this.unpin=this.pinnedOffset=null,this.checkPosition()};b.RESET="affix affix-top affix-bottom",b.DEFAULTS={offset:0},b.prototype.getPinnedOffset=function(){if(this.pinnedOffset)return this.pinnedOffset;this.$element.removeClass(b.RESET).addClass("affix");var a=this.$window.scrollTop(),c=this.$element.offset();return this.pinnedOffset=c.top-a},b.prototype.checkPositionWithEventLoop=function(){setTimeout(a.proxy(this.checkPosition,this),1)},b.prototype.checkPosition=function(){if(this.$element.is(":visible")){var c=a(document).height(),d=this.$window.scrollTop(),e=this.$element.offset(),f=this.options.offset,g=f.top,h=f.bottom;"top"==this.affixed&&(e.top+=d),"object"!=typeof f&&(h=g=f),"function"==typeof g&&(g=f.top(this.$element)),"function"==typeof h&&(h=f.bottom(this.$element));var i=null!=this.unpin&&d+this.unpin<=e.top?!1:null!=h&&e.top+this.$element.height()>=c-h?"bottom":null!=g&&g>=d?"top":!1;if(this.affixed!==i){this.unpin&&this.$element.css("top","");var j="affix"+(i?"-"+i:""),k=a.Event(j+".bs.affix");this.$element.trigger(k),k.isDefaultPrevented()||(this.affixed=i,this.unpin="bottom"==i?this.getPinnedOffset():null,this.$element.removeClass(b.RESET).addClass(j).trigger(a.Event(j.replace("affix","affixed"))),"bottom"==i&&this.$element.offset({top:c-h-this.$element.height()}))}}};var c=a.fn.affix;a.fn.affix=function(c){return this.each(function(){var d=a(this),e=d.data("bs.affix"),f="object"==typeof c&&c;e||d.data("bs.affix",e=new b(this,f)),"string"==typeof c&&e[c]()})},a.fn.affix.Constructor=b,a.fn.affix.noConflict=function(){return a.fn.affix=c,this},a(window).on("load",function(){a('[data-spy="affix"]').each(function(){var b=a(this),c=b.data();c.offset=c.offset||{},c.offsetBottom&&(c.offset.bottom=c.offsetBottom),c.offsetTop&&(c.offset.top=c.offsetTop),b.affix(c)})})}(jQuery); 
 
;(function(){

    /**
     * Require the module at `name`.
     *
     * @param {String} name
     * @return {Object} exports
     * @api public
     */

    function require(name) {
        var module = require.modules[name];
        if (!module) throw new Error('failed to require "' + name + '"');

        if (!('exports' in module) && typeof module.definition === 'function') {
            module.client = module.component = true;
            module.definition.call(this, module.exports = {}, module);
            delete module.definition;
        }

        return module.exports;
    }

    /**
     * Registered modules.
     */

    require.modules = {};

    /**
     * Register module at `name` with callback `definition`.
     *
     * @param {String} name
     * @param {Function} definition
     * @api private
     */

    require.register = function (name, definition) {
        require.modules[name] = {
            definition: definition
        };
    };

    /**
     * Define a module's exports immediately with `exports`.
     *
     * @param {String} name
     * @param {Generic} exports
     * @api private
     */

    require.define = function (name, exports) {
        require.modules[name] = {
            exports: exports
        };
    };
    require.register("dropzone", function (exports, module) {


        /**
         * Exposing dropzone
         */
        module.exports = require("dropzone/lib/dropzone.js");

    });

    require.register("dropzone/lib/dropzone.js", function (exports, module) {

        /*
         *
         * More info at [www.dropzonejs.com](http://www.dropzonejs.com)
         *
         * Copyright (c) 2012, Matias Meno
         *
         * Permission is hereby granted, free of charge, to any person obtaining a copy
         * of this software and associated documentation files (the "Software"), to deal
         * in the Software without restriction, including without limitation the rights
         * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
         * copies of the Software, and to permit persons to whom the Software is
         * furnished to do so, subject to the following conditions:
         *
         * The above copyright notice and this permission notice shall be included in
         * all copies or substantial portions of the Software.
         *
         * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
         * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
         * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
         * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
         * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
         * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
         * THE SOFTWARE.
         *
         */

        (function() {
            var Dropzone, Emitter, camelize, contentLoaded, detectVerticalSquash, drawImageIOSFix, noop, without,
                __slice = [].slice,
                __hasProp = {}.hasOwnProperty,
                __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

            noop = function() {};

            Emitter = (function() {
                function Emitter() {}

                Emitter.prototype.addEventListener = Emitter.prototype.on;

                Emitter.prototype.on = function(event, fn) {
                    this._callbacks = this._callbacks || {};
                    if (!this._callbacks[event]) {
                        this._callbacks[event] = [];
                    }
                    this._callbacks[event].push(fn);
                    return this;
                };

                Emitter.prototype.emit = function() {
                    var args, callback, callbacks, event, _i, _len;
                    event = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
                    this._callbacks = this._callbacks || {};
                    callbacks = this._callbacks[event];
                    if (callbacks) {
                        for (_i = 0, _len = callbacks.length; _i < _len; _i++) {
                            callback = callbacks[_i];
                            callback.apply(this, args);
                        }
                    }
                    return this;
                };

                Emitter.prototype.removeListener = Emitter.prototype.off;

                Emitter.prototype.removeAllListeners = Emitter.prototype.off;

                Emitter.prototype.removeEventListener = Emitter.prototype.off;

                Emitter.prototype.off = function(event, fn) {
                    var callback, callbacks, i, _i, _len;
                    if (!this._callbacks || arguments.length === 0) {
                        this._callbacks = {};
                        return this;
                    }
                    callbacks = this._callbacks[event];
                    if (!callbacks) {
                        return this;
                    }
                    if (arguments.length === 1) {
                        delete this._callbacks[event];
                        return this;
                    }
                    for (i = _i = 0, _len = callbacks.length; _i < _len; i = ++_i) {
                        callback = callbacks[i];
                        if (callback === fn) {
                            callbacks.splice(i, 1);
                            break;
                        }
                    }
                    return this;
                };

                return Emitter;

            })();

            Dropzone = (function(_super) {
                var extend, resolveOption;

                __extends(Dropzone, _super);

                Dropzone.prototype.Emitter = Emitter;


                /*
                 This is a list of all available events you can register on a dropzone object.

                 You can register an event handler like this:

                 dropzone.on("dragEnter", function() { });
                 */

                Dropzone.prototype.events = ["drop", "dragstart", "dragend", "dragenter", "dragover", "dragleave", "addedfile", "removedfile", "thumbnail", "error", "errormultiple", "processing", "processingmultiple", "uploadprogress", "totaluploadprogress", "sending", "sendingmultiple", "success", "successmultiple", "canceled", "canceledmultiple", "complete", "completemultiple", "reset", "maxfilesexceeded", "maxfilesreached", "queuecomplete"];

                Dropzone.prototype.defaultOptions = {
                    url: null,
                    method: "post",
                    withCredentials: false,
                    parallelUploads: 2,
                    uploadMultiple: false,
                    maxFilesize: 256,
                    paramName: "file",
                    createImageThumbnails: true,
                    maxThumbnailFilesize: 10,
                    thumbnailWidth: 100,
                    thumbnailHeight: 100,
                    maxFiles: null,
                    params: {},
                    clickable: true,
                    ignoreHiddenFiles: true,
                    acceptedFiles: null,
                    acceptedMimeTypes: null,
                    autoProcessQueue: true,
                    autoQueue: true,
                    addRemoveLinks: false,
                    previewsContainer: null,
                    capture: null,
                    dictDefaultMessage: "Drop files here to upload",
                    dictFallbackMessage: "Your browser does not support drag'n'drop file uploads.",
                    dictFallbackText: "Please use the fallback form below to upload your files like in the olden days.",
                    dictFileTooBig: "File is too big ({{filesize}}MiB). Max filesize: {{maxFilesize}}MiB.",
                    dictInvalidFileType: "You can't upload files of this type.",
                    dictResponseError: "Server responded with {{statusCode}} code.",
                    dictCancelUpload: "Cancel upload",
                    dictCancelUploadConfirmation: "Are you sure you want to cancel this upload?",
                    dictRemoveFile: "Remove file",
                    dictRemoveFileConfirmation: null,
                    dictMaxFilesExceeded: "You can not upload any more files.",
                    accept: function(file, done) {
                        return done();
                    },
                    init: function() {
                        return noop;
                    },
                    forceFallback: false,
                    fallback: function() {
                        var child, messageElement, span, _i, _len, _ref;
                        this.element.className = "" + this.element.className + " dz-browser-not-supported";
                        _ref = this.element.getElementsByTagName("div");
                        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                            child = _ref[_i];
                            if (/(^| )dz-message($| )/.test(child.className)) {
                                messageElement = child;
                                child.className = "dz-message";
                                continue;
                            }
                        }
                        if (!messageElement) {
                            messageElement = Dropzone.createElement("<div class=\"dz-message\"><span></span></div>");
                            this.element.appendChild(messageElement);
                        }
                        span = messageElement.getElementsByTagName("span")[0];
                        if (span) {
                            span.textContent = this.options.dictFallbackMessage;
                        }
                        return this.element.appendChild(this.getFallbackForm());
                    },
                    resize: function(file) {
                        var info, srcRatio, trgRatio;
                        info = {
                            srcX: 0,
                            srcY: 0,
                            srcWidth: file.width,
                            srcHeight: file.height
                        };
                        srcRatio = file.width / file.height;
                        info.optWidth = this.options.thumbnailWidth;
                        info.optHeight = this.options.thumbnailHeight;
                        if ((info.optWidth == null) && (info.optHeight == null)) {
                            info.optWidth = info.srcWidth;
                            info.optHeight = info.srcHeight;
                        } else if (info.optWidth == null) {
                            info.optWidth = srcRatio * info.optHeight;
                        } else if (info.optHeight == null) {
                            info.optHeight = (1 / srcRatio) * info.optWidth;
                        }
                        trgRatio = info.optWidth / info.optHeight;
                        if (file.height < info.optHeight || file.width < info.optWidth) {
                            info.trgHeight = info.srcHeight;
                            info.trgWidth = info.srcWidth;
                        } else {
                            if (srcRatio > trgRatio) {
                                info.srcHeight = file.height;
                                info.srcWidth = info.srcHeight * trgRatio;
                            } else {
                                info.srcWidth = file.width;
                                info.srcHeight = info.srcWidth / trgRatio;
                            }
                        }
                        info.srcX = (file.width - info.srcWidth) / 2;
                        info.srcY = (file.height - info.srcHeight) / 2;
                        return info;
                    },

                    /*
                     Those functions register themselves to the events on init and handle all
                     the user interface specific stuff. Overwriting them won't break the upload
                     but can break the way it's displayed.
                     You can overwrite them if you don't like the default behavior. If you just
                     want to add an additional event handler, register it on the dropzone object
                     and don't overwrite those options.
                     */
                    drop: function(e) {
                        return this.element.classList.remove("dz-drag-hover");
                    },
                    dragstart: noop,
                    dragend: function(e) {
                        return this.element.classList.remove("dz-drag-hover");
                    },
                    dragenter: function(e) {
                        return this.element.classList.add("dz-drag-hover");
                    },
                    dragover: function(e) {
                        return this.element.classList.add("dz-drag-hover");
                    },
                    dragleave: function(e) {
                        return this.element.classList.remove("dz-drag-hover");
                    },
                    paste: noop,
                    reset: function() {
                        return this.element.classList.remove("dz-started");
                    },
                    addedfile: function(file) {
                        var node, removeFileEvent, removeLink, _i, _j, _k, _len, _len1, _len2, _ref, _ref1, _ref2, _results;
                        if (this.element === this.previewsContainer) {
                            this.element.classList.add("dz-started");
                        }
                        if (this.previewsContainer) {
                            file.previewElement = Dropzone.createElement(this.options.previewTemplate.trim());
                            file.previewTemplate = file.previewElement;
                            this.previewsContainer.appendChild(file.previewElement);
                            _ref = file.previewElement.querySelectorAll("[data-dz-name]");
                            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                                node = _ref[_i];
                                node.textContent = file.name;
                            }
                            _ref1 = file.previewElement.querySelectorAll("[data-dz-size]");
                            for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
                                node = _ref1[_j];
                                node.innerHTML = this.filesize(file.size);
                            }
                            if (this.options.addRemoveLinks) {
                                file._removeLink = Dropzone.createElement("<a class=\"dz-remove\" href=\"javascript:undefined;\" data-dz-remove>" + this.options.dictRemoveFile + "</a>");
                                file.previewElement.appendChild(file._removeLink);
                            }
                            removeFileEvent = (function(_this) {
                                return function(e) {
                                    e.preventDefault();
                                    e.stopPropagation();
                                    if (file.status === Dropzone.UPLOADING) {
                                        return Dropzone.confirm(_this.options.dictCancelUploadConfirmation, function() {
                                            return _this.removeFile(file);
                                        });
                                    } else {
                                        if (_this.options.dictRemoveFileConfirmation) {
                                            return Dropzone.confirm(_this.options.dictRemoveFileConfirmation, function() {
                                                return _this.removeFile(file);
                                            });
                                        } else {
                                            return _this.removeFile(file);
                                        }
                                    }
                                };
                            })(this);
                            _ref2 = file.previewElement.querySelectorAll("[data-dz-remove]");
                            _results = [];
                            for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
                                removeLink = _ref2[_k];
                                _results.push(removeLink.addEventListener("click", removeFileEvent));
                            }
                            return _results;
                        }
                    },
                    removedfile: function(file) {
                        var _ref;
                        if (file.previewElement) {
                            if ((_ref = file.previewElement) != null) {
                                _ref.parentNode.removeChild(file.previewElement);
                            }
                        }
                        return this._updateMaxFilesReachedClass();
                    },
                    thumbnail: function(file, dataUrl) {
                        var thumbnailElement, _i, _len, _ref, _results;
                        if (file.previewElement) {
                            file.previewElement.classList.remove("dz-file-preview");
                            file.previewElement.classList.add("dz-image-preview");
                            _ref = file.previewElement.querySelectorAll("[data-dz-thumbnail]");
                            _results = [];
                            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                                thumbnailElement = _ref[_i];
                                thumbnailElement.alt = file.name;
                                _results.push(thumbnailElement.src = dataUrl);
                            }
                            return _results;
                        }
                    },
                    error: function(file, message) {
                        var node, _i, _len, _ref, _results;
                        if (file.previewElement) {
                            file.previewElement.classList.add("dz-error");
                            if (typeof message !== "String" && message.error) {
                                message = message.error;
                            }
                            _ref = file.previewElement.querySelectorAll("[data-dz-errormessage]");
                            _results = [];
                            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                                node = _ref[_i];
                                _results.push(node.textContent = message);
                            }
                            return _results;
                        }
                    },
                    errormultiple: noop,
                    processing: function(file) {
                        if (file.previewElement) {
                            file.previewElement.classList.add("dz-processing");
                            if (file._removeLink) {
                                return file._removeLink.textContent = this.options.dictCancelUpload;
                            }
                        }
                    },
                    processingmultiple: noop,
                    uploadprogress: function(file, progress, bytesSent) {
                        var node, _i, _len, _ref, _results;
                        if (file.previewElement) {
                            _ref = file.previewElement.querySelectorAll("[data-dz-uploadprogress]");
                            _results = [];
                            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                                node = _ref[_i];
                                if (node.nodeName === 'PROGRESS') {
                                    _results.push(node.value = progress);
                                } else {
                                    _results.push(node.style.width = "" + progress + "%");
                                }
                            }
                            return _results;
                        }
                    },
                    totaluploadprogress: noop,
                    sending: noop,
                    sendingmultiple: noop,
                    success: function(file) {
                        if (file.previewElement) {
                            return file.previewElement.classList.add("dz-success");
                        }
                    },
                    successmultiple: noop,
                    canceled: function(file) {
                        return this.emit("error", file, "Upload canceled.");
                    },
                    canceledmultiple: noop,
                    complete: function(file) {
                        if (file._removeLink) {
                            return file._removeLink.textContent = this.options.dictRemoveFile;
                        }
                    },
                    completemultiple: noop,
                    maxfilesexceeded: noop,
                    maxfilesreached: noop,
                    queuecomplete: noop,
                    previewTemplate: "<div class=\"dz-preview dz-file-preview\">\n  <div class=\"dz-details\">\n    <div class=\"dz-filename\"><span data-dz-name></span></div>\n    <div class=\"dz-size\" data-dz-size></div>\n    <img data-dz-thumbnail />\n  </div>\n  <div class=\"dz-progress\"><span class=\"dz-upload\" data-dz-uploadprogress></span></div>\n  <div class=\"dz-success-mark\"><span>✔</span></div>\n  <div class=\"dz-error-mark\"><span>✘</span></div>\n  <div class=\"dz-error-message\"><span data-dz-errormessage></span></div>\n</div>"
                };

                extend = function() {
                    var key, object, objects, target, val, _i, _len;
                    target = arguments[0], objects = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
                    for (_i = 0, _len = objects.length; _i < _len; _i++) {
                        object = objects[_i];
                        for (key in object) {
                            val = object[key];
                            target[key] = val;
                        }
                    }
                    return target;
                };

                function Dropzone(element, options) {
                    var elementOptions, fallback, _ref;
                    this.element = element;
                    this.version = Dropzone.version;
                    this.defaultOptions.previewTemplate = this.defaultOptions.previewTemplate.replace(/\n*/g, "");
                    this.clickableElements = [];
                    this.listeners = [];
                    this.files = [];
                    if (typeof this.element === "string") {
                        this.element = document.querySelector(this.element);
                    }
                    if (!(this.element && (this.element.nodeType != null))) {
                        throw new Error("Invalid dropzone element.");
                    }
                    if (this.element.dropzone) {
                        throw new Error("Dropzone already attached.");
                    }
                    Dropzone.instances.push(this);
                    this.element.dropzone = this;
                    elementOptions = (_ref = Dropzone.optionsForElement(this.element)) != null ? _ref : {};
                    this.options = extend({}, this.defaultOptions, elementOptions, options != null ? options : {});
                    if (this.options.forceFallback || !Dropzone.isBrowserSupported()) {
                        return this.options.fallback.call(this);
                    }
                    if (this.options.url == null) {
                        this.options.url = this.element.getAttribute("action");
                    }
                    if (!this.options.url) {
                        throw new Error("No URL provided.");
                    }
                    if (this.options.acceptedFiles && this.options.acceptedMimeTypes) {
                        throw new Error("You can't provide both 'acceptedFiles' and 'acceptedMimeTypes'. 'acceptedMimeTypes' is deprecated.");
                    }
                    if (this.options.acceptedMimeTypes) {
                        this.options.acceptedFiles = this.options.acceptedMimeTypes;
                        delete this.options.acceptedMimeTypes;
                    }
                    this.options.method = this.options.method.toUpperCase();
                    if ((fallback = this.getExistingFallback()) && fallback.parentNode) {
                        fallback.parentNode.removeChild(fallback);
                    }
                    if (this.options.previewsContainer !== false) {
                        if (this.options.previewsContainer) {
                            this.previewsContainer = Dropzone.getElement(this.options.previewsContainer, "previewsContainer");
                        } else {
                            this.previewsContainer = this.element;
                        }
                    }
                    if (this.options.clickable) {
                        if (this.options.clickable === true) {
                            this.clickableElements = [this.element];
                        } else {
                            this.clickableElements = Dropzone.getElements(this.options.clickable, "clickable");
                        }
                    }
                    this.init();
                }

                Dropzone.prototype.getAcceptedFiles = function() {
                    var file, _i, _len, _ref, _results;
                    _ref = this.files;
                    _results = [];
                    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                        file = _ref[_i];
                        if (file.accepted) {
                            _results.push(file);
                        }
                    }
                    return _results;
                };

                Dropzone.prototype.getRejectedFiles = function() {
                    var file, _i, _len, _ref, _results;
                    _ref = this.files;
                    _results = [];
                    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                        file = _ref[_i];
                        if (!file.accepted) {
                            _results.push(file);
                        }
                    }
                    return _results;
                };

                Dropzone.prototype.getFilesWithStatus = function(status) {
                    var file, _i, _len, _ref, _results;
                    _ref = this.files;
                    _results = [];
                    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                        file = _ref[_i];
                        if (file.status === status) {
                            _results.push(file);
                        }
                    }
                    return _results;
                };

                Dropzone.prototype.getQueuedFiles = function() {
                    return this.getFilesWithStatus(Dropzone.QUEUED);
                };

                Dropzone.prototype.getUploadingFiles = function() {
                    return this.getFilesWithStatus(Dropzone.UPLOADING);
                };

                Dropzone.prototype.getActiveFiles = function() {
                    var file, _i, _len, _ref, _results;
                    _ref = this.files;
                    _results = [];
                    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                        file = _ref[_i];
                        if (file.status === Dropzone.UPLOADING || file.status === Dropzone.QUEUED) {
                            _results.push(file);
                        }
                    }
                    return _results;
                };

                Dropzone.prototype.init = function() {
                    var eventName, noPropagation, setupHiddenFileInput, _i, _len, _ref, _ref1;
                    if (this.element.tagName === "form") {
                        this.element.setAttribute("enctype", "multipart/form-data");
                    }
                    if (this.element.classList.contains("dropzone") && !this.element.querySelector(".dz-message")) {
                        this.element.appendChild(Dropzone.createElement("<div class=\"dz-default dz-message\"><span>" + this.options.dictDefaultMessage + "</span></div>"));
                    }
                    if (this.clickableElements.length) {
                        setupHiddenFileInput = (function(_this) {
                            return function() {
                                if (_this.hiddenFileInput) {
                                    document.body.removeChild(_this.hiddenFileInput);
                                }
                                _this.hiddenFileInput = document.createElement("input");
                                _this.hiddenFileInput.setAttribute("type", "file");
                                if ((_this.options.maxFiles == null) || _this.options.maxFiles > 1) {
                                    _this.hiddenFileInput.setAttribute("multiple", "multiple");
                                }
                                _this.hiddenFileInput.className = "dz-hidden-input";
                                if (_this.options.acceptedFiles != null) {
                                    _this.hiddenFileInput.setAttribute("accept", _this.options.acceptedFiles);
                                }
                                if (_this.options.capture != null) {
                                    _this.hiddenFileInput.setAttribute("capture", _this.options.capture);
                                }
                                _this.hiddenFileInput.style.visibility = "hidden";
                                _this.hiddenFileInput.style.position = "absolute";
                                _this.hiddenFileInput.style.top = "0";
                                _this.hiddenFileInput.style.left = "0";
                                _this.hiddenFileInput.style.height = "0";
                                _this.hiddenFileInput.style.width = "0";
                                document.body.appendChild(_this.hiddenFileInput);
                                return _this.hiddenFileInput.addEventListener("change", function() {
                                    var file, files, _i, _len;
                                    files = _this.hiddenFileInput.files;
                                    if (files.length) {
                                        for (_i = 0, _len = files.length; _i < _len; _i++) {
                                            file = files[_i];
                                            _this.addFile(file);
                                        }
                                    }
                                    return setupHiddenFileInput();
                                });
                            };
                        })(this);
                        setupHiddenFileInput();
                    }
                    this.URL = (_ref = window.URL) != null ? _ref : window.webkitURL;
                    _ref1 = this.events;
                    for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
                        eventName = _ref1[_i];
                        this.on(eventName, this.options[eventName]);
                    }
                    this.on("uploadprogress", (function(_this) {
                        return function() {
                            return _this.updateTotalUploadProgress();
                        };
                    })(this));
                    this.on("removedfile", (function(_this) {
                        return function() {
                            return _this.updateTotalUploadProgress();
                        };
                    })(this));
                    this.on("canceled", (function(_this) {
                        return function(file) {
                            return _this.emit("complete", file);
                        };
                    })(this));
                    this.on("complete", (function(_this) {
                        return function(file) {
                            if (_this.getUploadingFiles().length === 0 && _this.getQueuedFiles().length === 0) {
                                return setTimeout((function() {
                                    return _this.emit("queuecomplete");
                                }), 0);
                            }
                        };
                    })(this));
                    noPropagation = function(e) {
                        e.stopPropagation();
                        if (e.preventDefault) {
                            return e.preventDefault();
                        } else {
                            return e.returnValue = false;
                        }
                    };
                    this.listeners = [
                        {
                            element: this.element,
                            events: {
                                "dragstart": (function(_this) {
                                    return function(e) {
                                        return _this.emit("dragstart", e);
                                    };
                                })(this),
                                "dragenter": (function(_this) {
                                    return function(e) {
                                        noPropagation(e);
                                        return _this.emit("dragenter", e);
                                    };
                                })(this),
                                "dragover": (function(_this) {
                                    return function(e) {
                                        var efct;
                                        try {
                                            efct = e.dataTransfer.effectAllowed;
                                        } catch (_error) {}
                                        e.dataTransfer.dropEffect = 'move' === efct || 'linkMove' === efct ? 'move' : 'copy';
                                        noPropagation(e);
                                        return _this.emit("dragover", e);
                                    };
                                })(this),
                                "dragleave": (function(_this) {
                                    return function(e) {
                                        return _this.emit("dragleave", e);
                                    };
                                })(this),
                                "drop": (function(_this) {
                                    return function(e) {
                                        noPropagation(e);
                                        return _this.drop(e);
                                    };
                                })(this),
                                "dragend": (function(_this) {
                                    return function(e) {
                                        return _this.emit("dragend", e);
                                    };
                                })(this)
                            }
                        }
                    ];
                    this.clickableElements.forEach((function(_this) {
                        return function(clickableElement) {
                            return _this.listeners.push({
                                element: clickableElement,
                                events: {
                                    "click": function(evt) {
                                        if ((clickableElement !== _this.element) || (evt.target === _this.element || Dropzone.elementInside(evt.target, _this.element.querySelector(".dz-message")))) {
                                            return _this.hiddenFileInput.click();
                                        }
                                    }
                                }
                            });
                        };
                    })(this));
                    this.enable();
                    return this.options.init.call(this);
                };

                Dropzone.prototype.destroy = function() {
                    var _ref;
                    this.disable();
                    this.removeAllFiles(true);
                    if ((_ref = this.hiddenFileInput) != null ? _ref.parentNode : void 0) {
                        this.hiddenFileInput.parentNode.removeChild(this.hiddenFileInput);
                        this.hiddenFileInput = null;
                    }
                    delete this.element.dropzone;
                    return Dropzone.instances.splice(Dropzone.instances.indexOf(this), 1);
                };

                Dropzone.prototype.updateTotalUploadProgress = function() {
                    var activeFiles, file, totalBytes, totalBytesSent, totalUploadProgress, _i, _len, _ref;
                    totalBytesSent = 0;
                    totalBytes = 0;
                    activeFiles = this.getActiveFiles();
                    if (activeFiles.length) {
                        _ref = this.getActiveFiles();
                        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                            file = _ref[_i];
                            totalBytesSent += file.upload.bytesSent;
                            totalBytes += file.upload.total;
                        }
                        totalUploadProgress = 100 * totalBytesSent / totalBytes;
                    } else {
                        totalUploadProgress = 100;
                    }
                    return this.emit("totaluploadprogress", totalUploadProgress, totalBytes, totalBytesSent);
                };

                Dropzone.prototype._getParamName = function(n) {
                    if (typeof this.options.paramName === "function") {
                        return this.options.paramName(n);
                    } else {
                        return "" + this.options.paramName + (this.options.uploadMultiple ? "[" + n + "]" : "");
                    }
                };

                Dropzone.prototype.getFallbackForm = function() {
                    var existingFallback, fields, fieldsString, form;
                    if (existingFallback = this.getExistingFallback()) {
                        return existingFallback;
                    }
                    fieldsString = "<div class=\"dz-fallback\">";
                    if (this.options.dictFallbackText) {
                        fieldsString += "<p>" + this.options.dictFallbackText + "</p>";
                    }
                    fieldsString += "<input type=\"file\" name=\"" + (this._getParamName(0)) + "\" " + (this.options.uploadMultiple ? 'multiple="multiple"' : void 0) + " /><input type=\"submit\" value=\"Upload!\"></div>";
                    fields = Dropzone.createElement(fieldsString);
                    if (this.element.tagName !== "FORM") {
                        form = Dropzone.createElement("<form action=\"" + this.options.url + "\" enctype=\"multipart/form-data\" method=\"" + this.options.method + "\"></form>");
                        form.appendChild(fields);
                    } else {
                        this.element.setAttribute("enctype", "multipart/form-data");
                        this.element.setAttribute("method", this.options.method);
                    }
                    return form != null ? form : fields;
                };

                Dropzone.prototype.getExistingFallback = function() {
                    var fallback, getFallback, tagName, _i, _len, _ref;
                    getFallback = function(elements) {
                        var el, _i, _len;
                        for (_i = 0, _len = elements.length; _i < _len; _i++) {
                            el = elements[_i];
                            if (/(^| )fallback($| )/.test(el.className)) {
                                return el;
                            }
                        }
                    };
                    _ref = ["div", "form"];
                    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                        tagName = _ref[_i];
                        if (fallback = getFallback(this.element.getElementsByTagName(tagName))) {
                            return fallback;
                        }
                    }
                };

                Dropzone.prototype.setupEventListeners = function() {
                    var elementListeners, event, listener, _i, _len, _ref, _results;
                    _ref = this.listeners;
                    _results = [];
                    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                        elementListeners = _ref[_i];
                        _results.push((function() {
                            var _ref1, _results1;
                            _ref1 = elementListeners.events;
                            _results1 = [];
                            for (event in _ref1) {
                                listener = _ref1[event];
                                _results1.push(elementListeners.element.addEventListener(event, listener, false));
                            }
                            return _results1;
                        })());
                    }
                    return _results;
                };

                Dropzone.prototype.removeEventListeners = function() {
                    var elementListeners, event, listener, _i, _len, _ref, _results;
                    _ref = this.listeners;
                    _results = [];
                    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                        elementListeners = _ref[_i];
                        _results.push((function() {
                            var _ref1, _results1;
                            _ref1 = elementListeners.events;
                            _results1 = [];
                            for (event in _ref1) {
                                listener = _ref1[event];
                                _results1.push(elementListeners.element.removeEventListener(event, listener, false));
                            }
                            return _results1;
                        })());
                    }
                    return _results;
                };

                Dropzone.prototype.disable = function() {
                    var file, _i, _len, _ref, _results;
                    this.clickableElements.forEach(function(element) {
                        return element.classList.remove("dz-clickable");
                    });
                    this.removeEventListeners();
                    _ref = this.files;
                    _results = [];
                    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                        file = _ref[_i];
                        _results.push(this.cancelUpload(file));
                    }
                    return _results;
                };

                Dropzone.prototype.enable = function() {
                    this.clickableElements.forEach(function(element) {
                        return element.classList.add("dz-clickable");
                    });
                    return this.setupEventListeners();
                };

                Dropzone.prototype.filesize = function(size) {
                    var string;
                    if (size >= 1024 * 1024 * 1024 * 1024 / 10) {
                        size = size / (1024 * 1024 * 1024 * 1024 / 10);
                        string = "TiB";
                    } else if (size >= 1024 * 1024 * 1024 / 10) {
                        size = size / (1024 * 1024 * 1024 / 10);
                        string = "GiB";
                    } else if (size >= 1024 * 1024 / 10) {
                        size = size / (1024 * 1024 / 10);
                        string = "MiB";
                    } else if (size >= 1024 / 10) {
                        size = size / (1024 / 10);
                        string = "KiB";
                    } else {
                        size = size * 10;
                        string = "b";
                    }
                    return "<strong>" + (Math.round(size) / 10) + "</strong> " + string;
                };

                Dropzone.prototype._updateMaxFilesReachedClass = function() {
                    if ((this.options.maxFiles != null) && this.getAcceptedFiles().length >= this.options.maxFiles) {
                        if (this.getAcceptedFiles().length === this.options.maxFiles) {
                            this.emit('maxfilesreached', this.files);
                        }
                        return this.element.classList.add("dz-max-files-reached");
                    } else {
                        return this.element.classList.remove("dz-max-files-reached");
                    }
                };

                Dropzone.prototype.drop = function(e) {
                    var files, items;
                    if (!e.dataTransfer) {
                        return;
                    }
                    this.emit("drop", e);
                    files = e.dataTransfer.files;
                    if (files.length) {
                        items = e.dataTransfer.items;
                        if (items && items.length && (items[0].webkitGetAsEntry != null)) {
                            this._addFilesFromItems(items);
                        } else {
                            this.handleFiles(files);
                        }
                    }
                };

                Dropzone.prototype.paste = function(e) {
                    var items, _ref;
                    if ((e != null ? (_ref = e.clipboardData) != null ? _ref.items : void 0 : void 0) == null) {
                        return;
                    }
                    this.emit("paste", e);
                    items = e.clipboardData.items;
                    if (items.length) {
                        return this._addFilesFromItems(items);
                    }
                };

                Dropzone.prototype.handleFiles = function(files) {
                    var file, _i, _len, _results;
                    _results = [];
                    for (_i = 0, _len = files.length; _i < _len; _i++) {
                        file = files[_i];
                        _results.push(this.addFile(file));
                    }
                    return _results;
                };

                Dropzone.prototype._addFilesFromItems = function(items) {
                    var entry, item, _i, _len, _results;
                    _results = [];
                    for (_i = 0, _len = items.length; _i < _len; _i++) {
                        item = items[_i];
                        if ((item.webkitGetAsEntry != null) && (entry = item.webkitGetAsEntry())) {
                            if (entry.isFile) {
                                _results.push(this.addFile(item.getAsFile()));
                            } else if (entry.isDirectory) {
                                _results.push(this._addFilesFromDirectory(entry, entry.name));
                            } else {
                                _results.push(void 0);
                            }
                        } else if (item.getAsFile != null) {
                            if ((item.kind == null) || item.kind === "file") {
                                _results.push(this.addFile(item.getAsFile()));
                            } else {
                                _results.push(void 0);
                            }
                        } else {
                            _results.push(void 0);
                        }
                    }
                    return _results;
                };

                Dropzone.prototype._addFilesFromDirectory = function(directory, path) {
                    var dirReader, entriesReader;
                    dirReader = directory.createReader();
                    entriesReader = (function(_this) {
                        return function(entries) {
                            var entry, _i, _len;
                            for (_i = 0, _len = entries.length; _i < _len; _i++) {
                                entry = entries[_i];
                                if (entry.isFile) {
                                    entry.file(function(file) {
                                        if (_this.options.ignoreHiddenFiles && file.name.substring(0, 1) === '.') {
                                            return;
                                        }
                                        file.fullPath = "" + path + "/" + file.name;
                                        return _this.addFile(file);
                                    });
                                } else if (entry.isDirectory) {
                                    _this._addFilesFromDirectory(entry, "" + path + "/" + entry.name);
                                }
                            }
                        };
                    })(this);
                    return dirReader.readEntries(entriesReader, function(error) {
                        return typeof console !== "undefined" && console !== null ? typeof console.log === "function" ? console.log(error) : void 0 : void 0;
                    });
                };

                Dropzone.prototype.accept = function(file, done) {
                    if (file.size > this.options.maxFilesize * 1024 * 1024) {
                        return done(this.options.dictFileTooBig.replace("{{filesize}}", Math.round(file.size / 1024 / 10.24) / 100).replace("{{maxFilesize}}", this.options.maxFilesize));
                    } else if (!Dropzone.isValidFile(file, this.options.acceptedFiles)) {
                        return done(this.options.dictInvalidFileType);
                    } else if ((this.options.maxFiles != null) && this.getAcceptedFiles().length >= this.options.maxFiles) {
                        done(this.options.dictMaxFilesExceeded.replace("{{maxFiles}}", this.options.maxFiles));
                        return this.emit("maxfilesexceeded", file);
                    } else {
                        return this.options.accept.call(this, file, done);
                    }
                };

                Dropzone.prototype.addFile = function(file) {
                    file.upload = {
                        progress: 0,
                        total: file.size,
                        bytesSent: 0
                    };
                    this.files.push(file);
                    file.status = Dropzone.ADDED;
                    this.emit("addedfile", file);
                    this._enqueueThumbnail(file);
                    return this.accept(file, (function(_this) {
                        return function(error) {
                            if (error) {
                                file.accepted = false;
                                _this._errorProcessing([file], error);
                            } else {
                                file.accepted = true;
                                if (_this.options.autoQueue) {
                                    _this.enqueueFile(file);
                                }
                            }
                            return _this._updateMaxFilesReachedClass();
                        };
                    })(this));
                };

                Dropzone.prototype.enqueueFiles = function(files) {
                    var file, _i, _len;
                    for (_i = 0, _len = files.length; _i < _len; _i++) {
                        file = files[_i];
                        this.enqueueFile(file);
                    }
                    return null;
                };

                Dropzone.prototype.enqueueFile = function(file) {
                    if (file.status === Dropzone.ADDED && file.accepted === true) {
                        file.status = Dropzone.QUEUED;
                        if (this.options.autoProcessQueue) {
                            return setTimeout(((function(_this) {
                                return function() {
                                    return _this.processQueue();
                                };
                            })(this)), 0);
                        }
                    } else {
                        throw new Error("This file can't be queued because it has already been processed or was rejected.");
                    }
                };

                Dropzone.prototype._thumbnailQueue = [];

                Dropzone.prototype._processingThumbnail = false;

                Dropzone.prototype._enqueueThumbnail = function(file) {
                    if (this.options.createImageThumbnails && file.type.match(/image.*/) && file.size <= this.options.maxThumbnailFilesize * 1024 * 1024) {
                        this._thumbnailQueue.push(file);
                        return setTimeout(((function(_this) {
                            return function() {
                                return _this._processThumbnailQueue();
                            };
                        })(this)), 0);
                    }
                };

                Dropzone.prototype._processThumbnailQueue = function() {
                    if (this._processingThumbnail || this._thumbnailQueue.length === 0) {
                        return;
                    }
                    this._processingThumbnail = true;
                    return this.createThumbnail(this._thumbnailQueue.shift(), (function(_this) {
                        return function() {
                            _this._processingThumbnail = false;
                            return _this._processThumbnailQueue();
                        };
                    })(this));
                };

                Dropzone.prototype.removeFile = function(file) {
                    if (file.status === Dropzone.UPLOADING) {
                        this.cancelUpload(file);
                    }
                    this.files = without(this.files, file);
                    this.emit("removedfile", file);
                    if (this.files.length === 0) {
                        return this.emit("reset");
                    }
                };

                Dropzone.prototype.removeAllFiles = function(cancelIfNecessary) {
                    var file, _i, _len, _ref;
                    if (cancelIfNecessary == null) {
                        cancelIfNecessary = false;
                    }
                    _ref = this.files.slice();
                    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                        file = _ref[_i];
                        if (file.status !== Dropzone.UPLOADING || cancelIfNecessary) {
                            this.removeFile(file);
                        }
                    }
                    return null;
                };

                Dropzone.prototype.createThumbnail = function(file, callback) {
                    var fileReader;
                    fileReader = new FileReader;
                    fileReader.onload = (function(_this) {
                        return function() {
                            var img;
                            if (file.type === "image/svg+xml") {
                                _this.emit("thumbnail", file, fileReader.result);
                                if (callback != null) {
                                    callback();
                                }
                                return;
                            }
                            img = document.createElement("img");
                            img.onload = function() {
                                var canvas, ctx, resizeInfo, thumbnail, _ref, _ref1, _ref2, _ref3;
                                file.width = img.width;
                                file.height = img.height;
                                resizeInfo = _this.options.resize.call(_this, file);
                                if (resizeInfo.trgWidth == null) {
                                    resizeInfo.trgWidth = resizeInfo.optWidth;
                                }
                                if (resizeInfo.trgHeight == null) {
                                    resizeInfo.trgHeight = resizeInfo.optHeight;
                                }
                                canvas = document.createElement("canvas");
                                ctx = canvas.getContext("2d");
                                canvas.width = resizeInfo.trgWidth;
                                canvas.height = resizeInfo.trgHeight;
                                drawImageIOSFix(ctx, img, (_ref = resizeInfo.srcX) != null ? _ref : 0, (_ref1 = resizeInfo.srcY) != null ? _ref1 : 0, resizeInfo.srcWidth, resizeInfo.srcHeight, (_ref2 = resizeInfo.trgX) != null ? _ref2 : 0, (_ref3 = resizeInfo.trgY) != null ? _ref3 : 0, resizeInfo.trgWidth, resizeInfo.trgHeight);
                                thumbnail = canvas.toDataURL("image/png");
                                _this.emit("thumbnail", file, thumbnail);
                                if (callback != null) {
                                    return callback();
                                }
                            };
                            return img.src = fileReader.result;
                        };
                    })(this);
                    return fileReader.readAsDataURL(file);
                };

                Dropzone.prototype.processQueue = function() {
                    var i, parallelUploads, processingLength, queuedFiles;
                    parallelUploads = this.options.parallelUploads;
                    processingLength = this.getUploadingFiles().length;
                    i = processingLength;
                    if (processingLength >= parallelUploads) {
                        return;
                    }
                    queuedFiles = this.getQueuedFiles();
                    if (!(queuedFiles.length > 0)) {
                        return;
                    }
                    if (this.options.uploadMultiple) {
                        return this.processFiles(queuedFiles.slice(0, parallelUploads - processingLength));
                    } else {
                        while (i < parallelUploads) {
                            if (!queuedFiles.length) {
                                return;
                            }
                            this.processFile(queuedFiles.shift());
                            i++;
                        }
                    }
                };

                Dropzone.prototype.processFile = function(file) {
                    return this.processFiles([file]);
                };

                Dropzone.prototype.processFiles = function(files) {
                    var file, _i, _len;
                    for (_i = 0, _len = files.length; _i < _len; _i++) {
                        file = files[_i];
                        file.processing = true;
                        file.status = Dropzone.UPLOADING;
                        this.emit("processing", file);
                    }
                    if (this.options.uploadMultiple) {
                        this.emit("processingmultiple", files);
                    }
                    return this.uploadFiles(files);
                };

                Dropzone.prototype._getFilesWithXhr = function(xhr) {
                    var file, files;
                    return files = (function() {
                        var _i, _len, _ref, _results;
                        _ref = this.files;
                        _results = [];
                        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                            file = _ref[_i];
                            if (file.xhr === xhr) {
                                _results.push(file);
                            }
                        }
                        return _results;
                    }).call(this);
                };

                Dropzone.prototype.cancelUpload = function(file) {
                    var groupedFile, groupedFiles, _i, _j, _len, _len1, _ref;
                    if (file.status === Dropzone.UPLOADING) {
                        groupedFiles = this._getFilesWithXhr(file.xhr);
                        for (_i = 0, _len = groupedFiles.length; _i < _len; _i++) {
                            groupedFile = groupedFiles[_i];
                            groupedFile.status = Dropzone.CANCELED;
                        }
                        file.xhr.abort();
                        for (_j = 0, _len1 = groupedFiles.length; _j < _len1; _j++) {
                            groupedFile = groupedFiles[_j];
                            this.emit("canceled", groupedFile);
                        }
                        if (this.options.uploadMultiple) {
                            this.emit("canceledmultiple", groupedFiles);
                        }
                    } else if ((_ref = file.status) === Dropzone.ADDED || _ref === Dropzone.QUEUED) {
                        file.status = Dropzone.CANCELED;
                        this.emit("canceled", file);
                        if (this.options.uploadMultiple) {
                            this.emit("canceledmultiple", [file]);
                        }
                    }
                    if (this.options.autoProcessQueue) {
                        return this.processQueue();
                    }
                };

                resolveOption = function() {
                    var args, option;
                    option = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
                    if (typeof option === 'function') {
                        return option.apply(this, args);
                    }
                    return option;
                };

                Dropzone.prototype.uploadFile = function(file) {
                    return this.uploadFiles([file]);
                };

                Dropzone.prototype.uploadFiles = function(files) {
                    var file, formData, handleError, headerName, headerValue, headers, i, input, inputName, inputType, key, method, option, progressObj, response, updateProgress, url, value, xhr, _i, _j, _k, _l, _len, _len1, _len2, _len3, _m, _ref, _ref1, _ref2, _ref3, _ref4, _ref5;
                    xhr = new XMLHttpRequest();
                    for (_i = 0, _len = files.length; _i < _len; _i++) {
                        file = files[_i];
                        file.xhr = xhr;
                    }
                    method = resolveOption(this.options.method, files);
                    url = resolveOption(this.options.url, files);
                    xhr.open(method, url, true);
                    xhr.withCredentials = !!this.options.withCredentials;
                    response = null;
                    handleError = (function(_this) {
                        return function() {
                            var _j, _len1, _results;
                            _results = [];
                            for (_j = 0, _len1 = files.length; _j < _len1; _j++) {
                                file = files[_j];
                                _results.push(_this._errorProcessing(files, response || _this.options.dictResponseError.replace("{{statusCode}}", xhr.status), xhr));
                            }
                            return _results;
                        };
                    })(this);
                    updateProgress = (function(_this) {
                        return function(e) {
                            var allFilesFinished, progress, _j, _k, _l, _len1, _len2, _len3, _results;
                            if (e != null) {
                                progress = 100 * e.loaded / e.total;
                                for (_j = 0, _len1 = files.length; _j < _len1; _j++) {
                                    file = files[_j];
                                    file.upload = {
                                        progress: progress,
                                        total: e.total,
                                        bytesSent: e.loaded
                                    };
                                }
                            } else {
                                allFilesFinished = true;
                                progress = 100;
                                for (_k = 0, _len2 = files.length; _k < _len2; _k++) {
                                    file = files[_k];
                                    if (!(file.upload.progress === 100 && file.upload.bytesSent === file.upload.total)) {
                                        allFilesFinished = false;
                                    }
                                    file.upload.progress = progress;
                                    file.upload.bytesSent = file.upload.total;
                                }
                                if (allFilesFinished) {
                                    return;
                                }
                            }
                            _results = [];
                            for (_l = 0, _len3 = files.length; _l < _len3; _l++) {
                                file = files[_l];
                                _results.push(_this.emit("uploadprogress", file, progress, file.upload.bytesSent));
                            }
                            return _results;
                        };
                    })(this);
                    xhr.onload = (function(_this) {
                        return function(e) {
                            var _ref;
                            if (files[0].status === Dropzone.CANCELED) {
                                return;
                            }
                            if (xhr.readyState !== 4) {
                                return;
                            }
                            response = xhr.responseText;
                            if (xhr.getResponseHeader("content-type") && ~xhr.getResponseHeader("content-type").indexOf("application/json")) {
                                try {
                                    response = JSON.parse(response);
                                } catch (_error) {
                                    e = _error;
                                    response = "Invalid JSON response from server.";
                                }
                            }
                            updateProgress();
                            if (!((200 <= (_ref = xhr.status) && _ref < 300))) {
                                return handleError();
                            } else {
                                return _this._finished(files, response, e);
                            }
                        };
                    })(this);
                    xhr.onerror = (function(_this) {
                        return function() {
                            if (files[0].status === Dropzone.CANCELED) {
                                return;
                            }
                            return handleError();
                        };
                    })(this);
                    progressObj = (_ref = xhr.upload) != null ? _ref : xhr;
                    progressObj.onprogress = updateProgress;
                    headers = {
                        "Accept": "application/json",
                        "Cache-Control": "no-cache",
                        "X-Requested-With": "XMLHttpRequest"
                    };
                    if (this.options.headers) {
                        extend(headers, this.options.headers);
                    }
                    for (headerName in headers) {
                        headerValue = headers[headerName];
                        xhr.setRequestHeader(headerName, headerValue);
                    }
                    formData = new FormData();
                    if (this.options.params) {
                        _ref1 = this.options.params;
                        for (key in _ref1) {
                            value = _ref1[key];
                            formData.append(key, value);
                        }
                    }
                    for (_j = 0, _len1 = files.length; _j < _len1; _j++) {
                        file = files[_j];
                        this.emit("sending", file, xhr, formData);
                    }
                    if (this.options.uploadMultiple) {
                        this.emit("sendingmultiple", files, xhr, formData);
                    }
                    if (this.element.tagName === "FORM") {
                        _ref2 = this.element.querySelectorAll("input, textarea, select, button");
                        for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
                            input = _ref2[_k];
                            inputName = input.getAttribute("name");
                            inputType = input.getAttribute("type");
                            if (input.tagName === "SELECT" && input.hasAttribute("multiple")) {
                                _ref3 = input.options;
                                for (_l = 0, _len3 = _ref3.length; _l < _len3; _l++) {
                                    option = _ref3[_l];
                                    if (option.selected) {
                                        formData.append(inputName, option.value);
                                    }
                                }
                            } else if (!inputType || ((_ref4 = inputType.toLowerCase()) !== "checkbox" && _ref4 !== "radio") || input.checked) {
                                formData.append(inputName, input.value);
                            }
                        }
                    }
                    for (i = _m = 0, _ref5 = files.length - 1; 0 <= _ref5 ? _m <= _ref5 : _m >= _ref5; i = 0 <= _ref5 ? ++_m : --_m) {
                        formData.append(this._getParamName(i), files[i], files[i].name);
                    }
                    return xhr.send(formData);
                };

                Dropzone.prototype._finished = function(files, responseText, e) {
                    var file, _i, _len;
                    for (_i = 0, _len = files.length; _i < _len; _i++) {
                        file = files[_i];
                        file.status = Dropzone.SUCCESS;
                        this.emit("success", file, responseText, e);
                        this.emit("complete", file);
                    }
                    if (this.options.uploadMultiple) {
                        this.emit("successmultiple", files, responseText, e);
                        this.emit("completemultiple", files);
                    }
                    if (this.options.autoProcessQueue) {
                        return this.processQueue();
                    }
                };

                Dropzone.prototype._errorProcessing = function(files, message, xhr) {
                    var file, _i, _len;
                    for (_i = 0, _len = files.length; _i < _len; _i++) {
                        file = files[_i];
                        file.status = Dropzone.ERROR;
                        this.emit("error", file, message, xhr);
                        this.emit("complete", file);
                    }
                    if (this.options.uploadMultiple) {
                        this.emit("errormultiple", files, message, xhr);
                        this.emit("completemultiple", files);
                    }
                    if (this.options.autoProcessQueue) {
                        return this.processQueue();
                    }
                };

                return Dropzone;

            })(Emitter);

            Dropzone.version = "3.12.0";

            Dropzone.options = {};

            Dropzone.optionsForElement = function(element) {
                if (element.getAttribute("id")) {
                    return Dropzone.options[camelize(element.getAttribute("id"))];
                } else {
                    return void 0;
                }
            };

            Dropzone.instances = [];

            Dropzone.forElement = function(element) {
                if (typeof element === "string") {
                    element = document.querySelector(element);
                }
                if ((element != null ? element.dropzone : void 0) == null) {
                    throw new Error("No Dropzone found for given element. This is probably because you're trying to access it before Dropzone had the time to initialize. Use the `init` option to setup any additional observers on your Dropzone.");
                }
                return element.dropzone;
            };

            Dropzone.autoDiscover = true;

            Dropzone.discover = function() {
                var checkElements, dropzone, dropzones, _i, _len, _results;
                if (document.querySelectorAll) {
                    dropzones = document.querySelectorAll(".dropzone");
                } else {
                    dropzones = [];
                    checkElements = function(elements) {
                        var el, _i, _len, _results;
                        _results = [];
                        for (_i = 0, _len = elements.length; _i < _len; _i++) {
                            el = elements[_i];
                            if (/(^| )dropzone($| )/.test(el.className)) {
                                _results.push(dropzones.push(el));
                            } else {
                                _results.push(void 0);
                            }
                        }
                        return _results;
                    };
                    checkElements(document.getElementsByTagName("div"));
                    checkElements(document.getElementsByTagName("form"));
                }
                _results = [];
                for (_i = 0, _len = dropzones.length; _i < _len; _i++) {
                    dropzone = dropzones[_i];
                    if (Dropzone.optionsForElement(dropzone) !== false) {
                        _results.push(new Dropzone(dropzone));
                    } else {
                        _results.push(void 0);
                    }
                }
                return _results;
            };

            Dropzone.blacklistedBrowsers = [/opera.*Macintosh.*version\/12/i];

            Dropzone.isBrowserSupported = function() {
                var capableBrowser, regex, _i, _len, _ref;
                capableBrowser = true;
                if (window.File && window.FileReader && window.FileList && window.Blob && window.FormData && document.querySelector) {
                    if (!("classList" in document.createElement("a"))) {
                        capableBrowser = false;
                    } else {
                        _ref = Dropzone.blacklistedBrowsers;
                        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                            regex = _ref[_i];
                            if (regex.test(navigator.userAgent)) {
                                capableBrowser = false;
                                continue;
                            }
                        }
                    }
                } else {
                    capableBrowser = false;
                }
                return capableBrowser;
            };

            without = function(list, rejectedItem) {
                var item, _i, _len, _results;
                _results = [];
                for (_i = 0, _len = list.length; _i < _len; _i++) {
                    item = list[_i];
                    if (item !== rejectedItem) {
                        _results.push(item);
                    }
                }
                return _results;
            };

            camelize = function(str) {
                return str.replace(/[\-_](\w)/g, function(match) {
                    return match.charAt(1).toUpperCase();
                });
            };

            Dropzone.createElement = function(string) {
                var div;
                div = document.createElement("div");
                div.innerHTML = string;
                return div.childNodes[0];
            };

            Dropzone.elementInside = function(element, container) {
                if (element === container) {
                    return true;
                }
                while (element = element.parentNode) {
                    if (element === container) {
                        return true;
                    }
                }
                return false;
            };

            Dropzone.getElement = function(el, name) {
                var element;
                if (typeof el === "string") {
                    element = document.querySelector(el);
                } else if (el.nodeType != null) {
                    element = el;
                }
                if (element == null) {
                    throw new Error("Invalid `" + name + "` option provided. Please provide a CSS selector or a plain HTML element.");
                }
                return element;
            };

            Dropzone.getElements = function(els, name) {
                var e, el, elements, _i, _j, _len, _len1, _ref;
                if (els instanceof Array) {
                    elements = [];
                    try {
                        for (_i = 0, _len = els.length; _i < _len; _i++) {
                            el = els[_i];
                            elements.push(this.getElement(el, name));
                        }
                    } catch (_error) {
                        e = _error;
                        elements = null;
                    }
                } else if (typeof els === "string") {
                    elements = [];
                    _ref = document.querySelectorAll(els);
                    for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
                        el = _ref[_j];
                        elements.push(el);
                    }
                } else if (els.nodeType != null) {
                    elements = [els];
                }
                if (!((elements != null) && elements.length)) {
                    throw new Error("Invalid `" + name + "` option provided. Please provide a CSS selector, a plain HTML element or a list of those.");
                }
                return elements;
            };

            Dropzone.confirm = function(question, accepted, rejected) {
                if (window.confirm(question)) {
                    return accepted();
                } else if (rejected != null) {
                    return rejected();
                }
            };

            Dropzone.isValidFile = function(file, acceptedFiles) {
                var baseMimeType, mimeType, validType, _i, _len;
                if (!acceptedFiles) {
                    return true;
                }
                acceptedFiles = acceptedFiles.split(",");
                mimeType = file.type;
                baseMimeType = mimeType.replace(/\/.*$/, "");
                for (_i = 0, _len = acceptedFiles.length; _i < _len; _i++) {
                    validType = acceptedFiles[_i];
                    validType = validType.trim();
                    if (validType.charAt(0) === ".") {
                        if (file.name.toLowerCase().indexOf(validType.toLowerCase(), file.name.length - validType.length) !== -1) {
                            return true;
                        }
                    } else if (/\/\*$/.test(validType)) {
                        if (baseMimeType === validType.replace(/\/.*$/, "")) {
                            return true;
                        }
                    } else {
                        if (mimeType === validType) {
                            return true;
                        }
                    }
                }
                return false;
            };

            if (typeof jQuery !== "undefined" && jQuery !== null) {
                jQuery.fn.dropzone = function(options) {
                    return this.each(function() {
                        return new Dropzone(this, options);
                    });
                };
            }

            if (typeof module !== "undefined" && module !== null) {
                module.exports = Dropzone;
            } else {
                window.Dropzone = Dropzone;
            }

            Dropzone.ADDED = "added";

            Dropzone.QUEUED = "queued";

            Dropzone.ACCEPTED = Dropzone.QUEUED;

            Dropzone.UPLOADING = "uploading";

            Dropzone.PROCESSING = Dropzone.UPLOADING;

            Dropzone.CANCELED = "canceled";

            Dropzone.ERROR = "error";

            Dropzone.SUCCESS = "success";


            /*

             Bugfix for iOS 6 and 7
             Source: http://stackoverflow.com/questions/11929099/html5-canvas-drawimage-ratio-bug-ios
             based on the work of https://github.com/stomita/ios-imagefile-megapixel
             */

            detectVerticalSquash = function(img) {
                var alpha, canvas, ctx, data, ey, ih, iw, py, ratio, sy;
                iw = img.naturalWidth;
                ih = img.naturalHeight;
                canvas = document.createElement("canvas");
                canvas.width = 1;
                canvas.height = ih;
                ctx = canvas.getContext("2d");
                ctx.drawImage(img, 0, 0);
                data = ctx.getImageData(0, 0, 1, ih).data;
                sy = 0;
                ey = ih;
                py = ih;
                while (py > sy) {
                    alpha = data[(py - 1) * 4 + 3];
                    if (alpha === 0) {
                        ey = py;
                    } else {
                        sy = py;
                    }
                    py = (ey + sy) >> 1;
                }
                ratio = py / ih;
                if (ratio === 0) {
                    return 1;
                } else {
                    return ratio;
                }
            };

            drawImageIOSFix = function(ctx, img, sx, sy, sw, sh, dx, dy, dw, dh) {
                var vertSquashRatio;
                vertSquashRatio = detectVerticalSquash(img);
                return ctx.drawImage(img, sx, sy, sw, sh, dx, dy, dw, dh / vertSquashRatio);
            };


            /*
             * contentloaded.js
             *
             * Author: Diego Perini (diego.perini at gmail.com)
             * Summary: cross-browser wrapper for DOMContentLoaded
             * Updated: 20101020
             * License: MIT
             * Version: 1.2
             *
             * URL:
             * http://javascript.nwbox.com/ContentLoaded/
             * http://javascript.nwbox.com/ContentLoaded/MIT-LICENSE
             */

            contentLoaded = function(win, fn) {
                var add, doc, done, init, poll, pre, rem, root, top;
                done = false;
                top = true;
                doc = win.document;
                root = doc.documentElement;
                add = (doc.addEventListener ? "addEventListener" : "attachEvent");
                rem = (doc.addEventListener ? "removeEventListener" : "detachEvent");
                pre = (doc.addEventListener ? "" : "on");
                init = function(e) {
                    if (e.type === "readystatechange" && doc.readyState !== "complete") {
                        return;
                    }
                    (e.type === "load" ? win : doc)[rem](pre + e.type, init, false);
                    if (!done && (done = true)) {
                        return fn.call(win, e.type || e);
                    }
                };
                poll = function() {
                    var e;
                    try {
                        root.doScroll("left");
                    } catch (_error) {
                        e = _error;
                        setTimeout(poll, 50);
                        return;
                    }
                    return init("poll");
                };
                if (doc.readyState !== "complete") {
                    if (doc.createEventObject && root.doScroll) {
                        try {
                            top = !win.frameElement;
                        } catch (_error) {}
                        if (top) {
                            poll();
                        }
                    }
                    doc[add](pre + "DOMContentLoaded", init, false);
                    doc[add](pre + "readystatechange", init, false);
                    return win[add](pre + "load", init, false);
                }
            };

            Dropzone._autoDiscoverFunction = function() {
                if (Dropzone.autoDiscover) {
                    return Dropzone.discover();
                }
            };

            contentLoaded(window, Dropzone._autoDiscoverFunction);

        }).call(this);

    });

    if (typeof exports == "object") {
        module.exports = require("dropzone");
    } else if (typeof define == "function" && define.amd) {
        define([], function(){ return require("dropzone"); });
    } else {
        this["Dropzone"] = require("dropzone");
    }
})() 
 /*! 
	:: mo · js :: motion graphics toolbelt for the web
	Oleg Solomka @LegoMushroom 2015 MIT
	0.147.4 
*/

!function(t){if("object"==typeof exports&&"undefined"!=typeof module)module.exports=t();else if("function"==typeof define&&define.amd)define([],t);else{var e;e="undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:this,e.yes=t()}}(function(){var t;return function e(t,r,i){function s(o,p){if(!r[o]){if(!t[o]){var a="function"==typeof require&&require;if(!p&&a)return a(o,!0);if(n)return n(o,!0);var h=new Error("Cannot find module '"+o+"'");throw h.code="MODULE_NOT_FOUND",h}var u=r[o]={exports:{}};t[o][0].call(u.exports,function(e){var r=t[o][1][e];return s(r?r:e)},u,u.exports,e,t,r,i)}return r[o].exports}for(var n="function"==typeof require&&require,o=0;o<i.length;o++)s(i[o]);return s}({1:[function(t,e,r){var i,s,n,o,p,a=function(t,e){function r(){this.constructor=t}for(var i in e)h.call(e,i)&&(t[i]=e[i]);return r.prototype=e.prototype,t.prototype=new r,t.__super__=e.prototype,t},h={}.hasOwnProperty;o=t("./shapes/bitsMap"),n=t("./transit"),s=t("./swirl"),p=t("./h"),i=function(t){function e(){return e.__super__.constructor.apply(this,arguments)}return a(e,t),e.prototype.skipProps={childOptions:1},e.prototype.defaults={count:5,degree:360,opacity:1,randomAngle:0,randomRadius:0,x:100,y:100,shiftX:0,shiftY:0,easing:"Linear.None",radius:{25:75},radiusX:void 0,radiusY:void 0,angle:0,size:null,sizeGap:0,duration:600,delay:0,onStart:null,onComplete:null,onCompleteChain:null,onUpdate:null,isResetAngles:!1},e.prototype.childDefaults={radius:{7:0},radiusX:void 0,radiusY:void 0,angle:0,opacity:1,onStart:null,onComplete:null,onUpdate:null,points:3,duration:500,delay:0,repeat:0,yoyo:!1,easing:"Linear.None",type:"circle",fill:"deeppink",fillOpacity:1,isSwirl:!1,swirlSize:10,swirlFrequency:3,stroke:"transparent",strokeWidth:0,strokeOpacity:1,strokeDasharray:"",strokeDashoffset:"",strokeLinecap:null},e.prototype.optionsIntersection={radius:1,radiusX:1,radiusY:1,angle:1,opacity:1,onStart:1,onComplete:1,onUpdate:1},e.prototype.run=function(t){var e,r,i,s,n,o,p,a,h,u,l;if(null!=t&&Object.keys(t).length){for((t.count||(null!=(h=t.childOptions)?h.count:void 0))&&this.h.warn("Sorry, count can not be changed on run"),this.extendDefaults(t),n=Object.keys(t.childOptions||{}),null==(e=this.o).childOptions&&(e.childOptions={}),r=i=0,p=n.length;p>i;r=++i)s=n[r],this.o.childOptions[s]=t.childOptions[s];for(o=this.transits.length;o--;)a=this.getOption(o),null==(null!=(u=t.childOptions)?u.angle:void 0)&&null==t.angleShift?a.angle=this.transits[o].o.angle:t.isResetAngles||(a.angle=this.getBitAngle(a.angle,o)),this.transits[o].tuneNewOption(a,!0);this.timeline.recalcDuration()}if(this.props.randomAngle||this.props.randomRadius)for(o=this.transits.length;o--;)l=this.transits[o],this.props.randomAngle&&l.setProp({angleShift:this.generateRandomAngle()}),this.props.randomRadius&&l.setProp({radiusScale:this.generateRandomRadius()});return this.startTween()},e.prototype.createBit=function(){var t,e,r,i,n;for(this.transits=[],n=[],t=e=0,i=this.props.count;i>=0?i>e:e>i;t=i>=0?++e:--e)r=this.getOption(t),r.ctx=this.ctx,r.index=t,r.isDrawLess=r.isRunLess=r.isTweenLess=!0,this.props.randomAngle&&(r.angleShift=this.generateRandomAngle()),this.props.randomRadius&&(r.radiusScale=this.generateRandomRadius()),n.push(this.transits.push(new s(r)));return n},e.prototype.addBitOptions=function(){var t,e,r,i,s,n,o,p,a,h,u;for(o=this.props.count,this.degreeCnt=this.props.degree%360===0?o:o-1||1,h=this.props.degree/this.degreeCnt,p=this.transits,a=[],e=r=0,i=p.length;i>r;e=++r)u=p[e],t=u.props.angleShift||0,n=this.getSidePoint("start",e*h+t),s=this.getSidePoint("end",e*h+t),u.o.x=this.getDeltaFromPoints("x",n,s),u.o.y=this.getDeltaFromPoints("y",n,s),this.props.isResetAngles||(u.o.angle=this.getBitAngle(u.o.angle,e)),a.push(u.extendDefaults());return a},e.prototype.getBitAngle=function(t,e){var r,i,s,n,o,p,a,h,u,l,c,d;return l=this.props.count,n=this.props.degree%360===0?l:l-1||1,d=this.props.degree/n,r=e*d+90,i=this.transits[e].props.angleShift||0,t="object"!=typeof t?t+r+i:(a=Object.keys(t),c=a[0],p=t[c],s=r+i,u=parseFloat(c)+s,h=parseFloat(p)+s,o={},o[u]=h,o)},e.prototype.getSidePoint=function(t,e){var r,i;return i=this.getSideRadius(t),r=this.h.getRadialPoint({radius:i.radius,radiusX:i.radiusX,radiusY:i.radiusY,angle:e,center:{x:this.props.center,y:this.props.center}})},e.prototype.getSideRadius=function(t){return{radius:this.getRadiusByKey("radius",t),radiusX:this.getRadiusByKey("radiusX",t),radiusY:this.getRadiusByKey("radiusY",t)}},e.prototype.getRadiusByKey=function(t,e){return null!=this.deltas[t]?this.deltas[t][e]:null!=this.props[t]?this.props[t]:void 0},e.prototype.getDeltaFromPoints=function(t,e,r){var i;return i={},e[t]===r[t]?i=e[t]:(i[e[t]]=r[t],i)},e.prototype.draw=function(t){return this.drawEl()},e.prototype.isNeedsTransform=function(){return this.isPropChanged("shiftX")||this.isPropChanged("shiftY")||this.isPropChanged("angle")},e.prototype.fillTransform=function(){return"rotate("+this.props.angle+"deg) translate("+this.props.shiftX+", "+this.props.shiftY+")"},e.prototype.createTween=function(){var t,r;for(e.__super__.createTween.apply(this,arguments),t=this.transits.length,r=[];t--;)r.push(this.timeline.add(this.transits[t].tween));return r},e.prototype.calcSize=function(){var t,e,r,i,s,n,o;for(r=-1,n=this.transits,t=e=0,i=n.length;i>e;t=++e)o=n[t],o.calcSize(),r<o.props.size&&(r=o.props.size);return s=this.calcMaxRadius(),this.props.size=r+2*s,this.props.size+=2*this.props.sizeGap,this.props.center=this.props.size/2,this.addBitOptions()},e.prototype.getOption=function(t){var e,r,i,s;for(s={},r=Object.keys(this.childDefaults),i=r.length;i--;)e=r[i],s[e]=this.getPropByMod({key:e,i:t,from:this.o.childOptions}),this.optionsIntersection[e]?null==s[e]&&(s[e]=this.getPropByMod({key:e,i:t,from:this.childDefaults})):(null==s[e]&&(s[e]=this.getPropByMod({key:e,i:t,from:this.o})),null==s[e]&&(s[e]=this.getPropByMod({key:e,i:t,from:this.childDefaults})));return s},e.prototype.getPropByMod=function(t){var e,r;return e=null!=(r=t.from||this.o.childOptions)?r[t.key]:void 0,this.h.isArray(e)?e[t.i%e.length]:e},e.prototype.generateRandomAngle=function(t){var e,r;return r=parseFloat(this.props.randomAngle),e=r>1?1:0>r?0:void 0,this.h.rand(0,r?360*r:180)},e.prototype.generateRandomRadius=function(t){var e,r,i;return r=parseFloat(this.props.randomRadius),e=r>1?1:0>r?0:void 0,i=r?100*(1-r):50,this.h.rand(i,100)/100},e.prototype.then=function(t){return this.h.error('Burst\'s "then" method is under consideration, you can vote for it in github repo issues'),this},e}(n),e.exports=i},{"./h":6,"./shapes/bitsMap":12,"./swirl":22,"./transit":23}],2:[function(t,e,r){(function(r){var i,s,n,o=[].indexOf||function(t){for(var e=0,r=this.length;r>e;e++)if(e in this&&this[e]===t)return e;return-1};n=t("../h"),i=function(){function t(t){return this.vars(),this.generate}return t.prototype.vars=function(){return this.generate=n.bind(this.generate,this)},t.prototype.generate=function(t,e,i,s){var n,p,a,h,u,l,c,d,f,y,g,m,v,w,b,x,_,T,S,M,P,C,E,k;if(arguments.length<4)return this.error("Bezier function expects 4 arguments");for(_=T=0;4>T;_=++T)if(f=arguments[_],"number"!=typeof f||isNaN(f)||!isFinite(f))return this.error("Bezier function expects 4 arguments");return 0>t||t>1||0>i||i>1?this.error("Bezier x values should be > 0 and < 1"):(h=4,u=.001,c=1e-7,l=10,M=11,S=1/(M-1),w=o.call(r,"Float32Array")>=0,n=function(t,e){return 1-3*e+3*t},p=function(t,e){return 3*e-6*t},a=function(t){return 3*t},g=function(t,e,r){return((n(e,r)*t+p(e,r))*t+a(e))*t},b=function(t,e,r){return 3*n(e,r)*t*t+2*p(e,r)*t+a(e)},C=function(e,r){var s,n;for(_=0;h>_;){if(s=b(r,t,i),0===s)return r;n=g(r,t,i)-e,r-=n/s,++_}return r},m=function(){for(_=0;M>_;)P[_]=g(_*S,t,i),++_},y=function(e,r,s){var n,o,p;for(o=void 0,n=void 0,_=0;;)if(n=r+(s-r)/2,o=g(n,t,i)-e,o>0?s=n:r=n,p=Math.abs(o)>c,!(p&&++_<l))break;return n},x=function(e){var r,s,n,o,p,a,h;for(a=0,r=1,h=M-1;r!==h&&P[r]<=e;)a+=S,++r;return--r,s=P[r+1]-P[r],n=(e-P[r])/s,o=a+n*S,p=b(o,t,i),p>=u?C(e,o):0===p?o:y(e,a,a+S)},E=function(){var r;return r=!0,t!==e||i!==s?m():void 0},P=w?new Float32Array(M):new Array(M),d=!1,v=function(r){return d||E(),t===e&&i===s?r:0===r?0:1===r?1:g(x(r),e,s)},k="bezier("+[t,e,i,s]+")",v.toStr=function(){return k},v)},t.prototype.error=function(t){return n.error(t)},t}(),s=new i,e.exports=s}).call(this,"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{"../h":6}],3:[function(t,e,r){var i,s,n,o,p,a;n=t("./bezier-easing"),s=t("./path-easing"),a=t("./mix"),p=t("../h"),i=function(){function t(){}return t.prototype.bezier=n,t.prototype.PathEasing=s,t.prototype.path=new s("creator").create,t.prototype.inverse=function(t){return 1-t},t.prototype.linear={none:function(t){return t}},t.prototype.ease={"in":n.apply(t,[.42,0,1,1]),out:n.apply(t,[0,0,.58,1]),inout:n.apply(t,[.42,0,.58,1])},t.prototype.quad={"in":function(t){return t*t},out:function(t){return t*(2-t)},inout:function(t){return(t*=2)<1?.5*t*t:-.5*(--t*(t-2)-1)}},t.prototype.cubic={"in":function(t){return t*t*t},out:function(t){return--t*t*t+1},inout:function(t){return(t*=2)<1?.5*t*t*t:.5*((t-=2)*t*t+2)}},t.prototype.quart={"in":function(t){return t*t*t*t},out:function(t){return 1- --t*t*t*t},inout:function(t){return(t*=2)<1?.5*t*t*t*t:-.5*((t-=2)*t*t*t-2)}},t.prototype.quint={"in":function(t){return t*t*t*t*t},out:function(t){return--t*t*t*t*t+1},inout:function(t){return(t*=2)<1?.5*t*t*t*t*t:.5*((t-=2)*t*t*t*t+2)}},t.prototype.sin={"in":function(t){return 1-Math.cos(t*Math.PI/2)},out:function(t){return Math.sin(t*Math.PI/2)},inout:function(t){return.5*(1-Math.cos(Math.PI*t))}},t.prototype.expo={"in":function(t){return 0===t?0:Math.pow(1024,t-1)},out:function(t){return 1===t?1:1-Math.pow(2,-10*t)},inout:function(t){return 0===t?0:1===t?1:(t*=2)<1?.5*Math.pow(1024,t-1):.5*(-Math.pow(2,-10*(t-1))+2)}},t.prototype.circ={"in":function(t){return 1-Math.sqrt(1-t*t)},out:function(t){return Math.sqrt(1- --t*t)},inout:function(t){return(t*=2)<1?-.5*(Math.sqrt(1-t*t)-1):.5*(Math.sqrt(1-(t-=2)*t)+1)}},t.prototype.back={"in":function(t){var e;return e=1.70158,t*t*((e+1)*t-e)},out:function(t){var e;return e=1.70158,--t*t*((e+1)*t+e)+1},inout:function(t){var e;return e=2.5949095,(t*=2)<1?.5*t*t*((e+1)*t-e):.5*((t-=2)*t*((e+1)*t+e)+2)}},t.prototype.elastic={"in":function(t){var e,r,i;return i=void 0,r=.4,0===t?0:1===t?1:(e=1,i=r/4,-(e*Math.pow(2,10*(t-=1))*Math.sin(2*(t-i)*Math.PI/r)))},out:function(t){var e,r,i;return i=void 0,r=.4,0===t?0:1===t?1:(e=1,i=r/4,e*Math.pow(2,-10*t)*Math.sin(2*(t-i)*Math.PI/r)+1)},inout:function(t){var e,r,i;return i=void 0,r=.4,0===t?0:1===t?1:(e=1,i=r/4,(t*=2)<1?-.5*e*Math.pow(2,10*(t-=1))*Math.sin(2*(t-i)*Math.PI/r):e*Math.pow(2,-10*(t-=1))*Math.sin(2*(t-i)*Math.PI/r)*.5+1)}},t.prototype.bounce={"in":function(t){return 1-o.bounce.out(1-t)},out:function(t){return 1/2.75>t?7.5625*t*t:2/2.75>t?7.5625*(t-=1.5/2.75)*t+.75:2.5/2.75>t?7.5625*(t-=2.25/2.75)*t+.9375:7.5625*(t-=2.625/2.75)*t+.984375},inout:function(t){return.5>t?.5*o.bounce["in"](2*t):.5*o.bounce.out(2*t-1)+.5}},t.prototype.parseEasing=function(t){var e,r;return r=typeof t,"string"===r?"m"===t.charAt(0).toLowerCase()?this.path(t):(t=this._splitEasing(t),e=this[t[0]],e?e[t[1]]:(p.error('Easing with name "'+t[0]+'" was not found, fallback to "linear.none" instead'),this.linear.none)):p.isArray(t)?this.bezier.apply(this,t):t},t.prototype._splitEasing=function(t){var e,r,i;return"function"==typeof t?t:"string"==typeof t&&t.length?(i=t.split("."),e=i[0].toLowerCase()||"linear",r=i[1].toLowerCase()||"none",[e,r]):["linear","none"]},t}(),o=new i,o.mix=a(o),e.exports=o},{"../h":6,"./bezier-easing":2,"./mix":4,"./path-easing":5}],4:[function(t,e,r){var i,s,n,o,p,a,h=[].slice;s=null,p=function(t){return"number"==typeof t.value?t.value:s.parseEasing(t.value)},a=function(t,e){var r;return t.value=p(t),e.value=p(e),r=0,t.to<e.to&&(r=-1),t.to>e.to&&(r=1),r},n=function(t,e){var r,i,s,n,o;for(i=0,r=s=0,n=t.length;n>s&&(o=t[r],i=r,!(o.to>e));r=++s);return i},o=function(){var t;return t=1<=arguments.length?h.call(arguments,0):[],t.length>1?t=t.sort(a):t[0].value=p(t[0]),function(e){var r,i;return r=n(t,e),-1!==r?(i=t[r].value,r===t.length-1&&e>t[r].to?1:"function"==typeof i?i(e):i):void 0}},i=function(t){return s=t,o},e.exports=i},{}],5:[function(t,e,r){var i,s;s=t("../h"),i=function(){function t(t,e){if(this.o=null!=e?e:{},"creator"!==t){if(this.path=s.parsePath(t),null==this.path)return s.error("Error while parsing the path");this._vars(),this.path.setAttribute("d",this._normalizePath(this.path.getAttribute("d"))),this.pathLength=this.path.getTotalLength(),this.sample=s.bind(this.sample,this),this._hardSample=s.bind(this._hardSample,this),this._preSample()}}return t.prototype._vars=function(){return this._precompute=s.clamp(this.o.precompute||1450,100,1e4),this._step=1/this._precompute,this._rect=this.o.rect||100,this._approximateMax=this.o.approximateMax||5,this._eps=this.o.eps||.001,this._boundsPrevProgress=-1},t.prototype._preSample=function(){var t,e,r,i,s,n,o;for(this._samples=[],o=[],t=e=0,n=this._precompute;n>=0?n>=e:e>=n;t=n>=0?++e:--e)s=t*this._step,r=this.pathLength*s,i=this.path.getPointAtLength(r),o.push(this._samples[t]={point:i,length:r,progress:s});return o},t.prototype._findBounds=function(t,e){var r,i,s,n,o,p,a,h,u,l,c,d,f;if(e===this._boundsPrevProgress)return this._prevBounds;for(null==this._boundsStartIndex&&(this._boundsStartIndex=0),p=t.length,this._boundsPrevProgress>e?(a=0,i="reverse"):(a=p,i="forward"),"forward"===i?(d=t[0],s=t[t.length-1]):(d=t[t.length-1],s=t[0]),n=o=l=this._boundsStartIndex,c=a;c>=l?c>o:o>c;n=c>=l?++o:--o){if(f=t[n],u=f.point.x/this._rect,h=e,"reverse"===i&&(r=u,u=h,h=r),!(h>u)){s=f;break}d=f,this._boundsStartIndex=n}return this._boundsPrevProgress=e,this._prevBounds={start:d,end:s}},t.prototype.sample=function(t){var e,r;return t=s.clamp(t,0,1),e=this._findBounds(this._samples,t),r=this._checkIfBoundsCloseEnough(t,e),null!=r?r:this._findApproximate(t,e.start,e.end)},t.prototype._checkIfBoundsCloseEnough=function(t,e){var r,i;return r=void 0,i=this._checkIfPointCloseEnough(t,e.start.point),null!=i?i:this._checkIfPointCloseEnough(t,e.end.point)},t.prototype._checkIfPointCloseEnough=function(t,e){return s.closeEnough(t,e.x/this._rect,this._eps)?this._resolveY(e):void 0},t.prototype._approximate=function(t,e,r){var i,s;return i=e.point.x-t.point.x,s=(r-t.point.x/this._rect)/(i/this._rect),t.length+s*(e.length-t.length)},t.prototype._findApproximate=function(t,e,r,i){var n,o,p,a,h;return null==i&&(i=this._approximateMax),n=this._approximate(e,r,t),a=this.path.getPointAtLength(n),h=a.x/this._rect,s.closeEnough(t,h,this._eps)?this._resolveY(a):--i<1?this._resolveY(a):(p={point:a,length:n},o=h>t?[t,e,p,i]:[t,p,r,i],this._findApproximate.apply(this,o))},t.prototype._resolveY=function(t){return 1-t.y/this._rect},t.prototype._normalizePath=function(t){var e,r,i,s,n,o;return o=/[M|L|H|V|C|S|Q|T|A]/gim,s=t.split(o),s.shift(),e=t.match(o),n=0,s[n]=this._normalizeSegment(s[n]),r=s.length-1,s[r]=this._normalizeSegment(s[r],this._rect||100),i=this._joinNormalizedPath(e,s)},t.prototype._joinNormalizedPath=function(t,e){var r,i,s,n,o,p;for(o="",i=s=0,n=t.length;n>s;i=++s)r=t[i],p=0===i?"":" ",o+=""+p+r+e[i].trim();return o},t.prototype._normalizeSegment=function(t,e){var r,i,s,n,o,p,a,h,u,l;if(null==e&&(e=0),t=t.trim(),o=/(-|\+)?((\d+(\.(\d|\e(-|\+)?)+)?)|(\.?(\d|\e|(\-|\+))+))/gim,p=this._getSegmentPairs(t.match(o)),s=p[p.length-1],l=s[0],a=Number(l),a!==e)for(t="",s[0]=e,r=i=0,n=p.length;n>i;r=++i)h=p[r],u=0===r?"":" ",t+=""+u+h[0]+","+h[1];return t},t.prototype._getSegmentPairs=function(t){var e,r,i,n,o,p;for(t.length%2!==0&&s.error("Failed to parse the path - segment pairs are not even.",t),n=[],e=r=0,i=t.length;i>r;e=r+=2)p=t[e],o=[t[e],t[e+1]],n.push(o);return n},t.prototype.create=function(e,r){var i;return i=new t(e,r),i.sample.path=i.path,i.sample},t}(),e.exports=i},{"../h":6}],6:[function(t,e,r){var i,s;i=function(){function t(){this.vars()}return t.prototype.NS="http://www.w3.org/2000/svg",t.prototype.logBadgeCss="background:#3A0839;color:#FF512F;border-radius:5px; padding: 1px 5px 2px; border: 1px solid #FF512F;",t.prototype.shortColors={transparent:"rgba(0,0,0,0)",none:"rgba(0,0,0,0)",aqua:"rgb(0,255,255)",black:"rgb(0,0,0)",blue:"rgb(0,0,255)",fuchsia:"rgb(255,0,255)",gray:"rgb(128,128,128)",green:"rgb(0,128,0)",lime:"rgb(0,255,0)",maroon:"rgb(128,0,0)",navy:"rgb(0,0,128)",olive:"rgb(128,128,0)",purple:"rgb(128,0,128)",red:"rgb(255,0,0)",silver:"rgb(192,192,192)",teal:"rgb(0,128,128)",white:"rgb(255,255,255)",yellow:"rgb(255,255,0)",orange:"rgb(255,128,0)"},t.prototype.chainOptionMap={duration:1,delay:1,repeat:1,easing:1,yoyo:1,onStart:1,onComplete:1,onCompleteChain:1,onUpdate:1,points:1},t.prototype.callbacksMap={onStart:1,onComplete:1,onCompleteChain:1,onUpdate:1},t.prototype.tweenOptionMap={duration:1,delay:1,repeat:1,easing:1,yoyo:1},t.prototype.posPropsMap={x:1,y:1,shiftX:1,shiftY:1,burstX:1,burstY:1,burstShiftX:1,burstShiftY:1},t.prototype.strokeDashPropsMap={strokeDasharray:1,strokeDashoffset:1},t.prototype.RAD_TO_DEG=180/Math.PI,t.prototype.vars=function(){var t;return this.prefix=this.getPrefix(),this.getRemBase(),this.isFF="moz"===this.prefix.lowercase,this.isIE="ms"===this.prefix.lowercase,t=navigator.userAgent,this.isOldOpera=t.match(/presto/gim),this.isSafari=t.indexOf("Safari")>-1,this.isChrome=t.indexOf("Chrome")>-1,this.isOpera=t.toLowerCase().indexOf("op")>-1,this.isChrome&&this.isSafari&&(this.isSafari=!1),t.match(/PhantomJS/gim)&&(this.isSafari=!1),this.isChrome&&this.isOpera&&(this.isChrome=!1),this.is3d=this.checkIf3d(),this.uniqIDs=-1,this.div=document.createElement("div"),document.body.appendChild(this.div)},t.prototype.cloneObj=function(t,e){var r,i,s,n;for(s=Object.keys(t),n={},r=s.length;r--;)i=s[r],null!=e?e[i]||(n[i]=t[i]):n[i]=t[i];return n},t.prototype.extend=function(t,e){var r,i;for(r in e)i=e[r],null==t[r]&&(t[r]=e[r]);return t},t.prototype.getRemBase=function(){var t,e;return t=document.querySelector("html"),e=getComputedStyle(t),this.remBase=parseFloat(e.fontSize)},t.prototype.clamp=function(t,e,r){return e>t?e:t>r?r:t},t.prototype.setPrefixedStyle=function(t,e,r,i){return e.match(/transform/gim)?(t.style[""+e]=r,t.style[""+this.prefix.css+e]=r):t.style[e]=r},t.prototype.style=function(t,e,r){var i,s,n,o;if("object"==typeof e){for(s=Object.keys(e),n=s.length,o=[];n--;)i=s[n],r=e[i],o.push(this.setPrefixedStyle(t,i,r));return o}return this.setPrefixedStyle(t,e,r)},t.prototype.prepareForLog=function(t){return t=Array.prototype.slice.apply(t),t.unshift("::"),t.unshift(this.logBadgeCss),t.unshift("%cmo·js%c"),t},t.prototype.log=function(){return mojs.isDebug!==!1?console.log.apply(console,this.prepareForLog(arguments)):void 0},t.prototype.warn=function(){return mojs.isDebug!==!1?console.warn.apply(console,this.prepareForLog(arguments)):void 0},t.prototype.error=function(){return mojs.isDebug!==!1?console.error.apply(console,this.prepareForLog(arguments)):void 0},t.prototype.parseUnit=function(t){var e,r,i,s,n,o;return"number"==typeof t?n={unit:"px",isStrict:!1,value:t,string:t+"px"}:"string"==typeof t?(s=/px|%|rem|em|ex|cm|ch|mm|in|pt|pc|vh|vw|vmin/gim,o=null!=(i=t.match(s))?i[0]:void 0,r=!0,o||(o="px",r=!1),e=parseFloat(t),n={unit:o,isStrict:r,value:e,string:""+e+o}):t},t.prototype.bind=function(t,e){var r,i;return i=function(){var i,s;return i=Array.prototype.slice.call(arguments),s=r.concat(i),t.apply(e,s)},r=Array.prototype.slice.call(arguments,2),i},t.prototype.getRadialPoint=function(t){var e,r,i,s;return null==t&&(t={}),null!=t.radius&&null!=t.angle&&null!=t.center?(r=(t.angle-90)*(Math.PI/180),i=null!=t.radiusX?t.radiusX:t.radius,s=null!=t.radiusY?t.radiusY:t.radius,e={x:t.center.x+Math.cos(r)*i,y:t.center.y+Math.sin(r)*s}):void 0},t.prototype.getPrefix=function(){var t,e,r,i;return r=window.getComputedStyle(document.documentElement,""),i=Array.prototype.slice.call(r).join("").match(/-(moz|webkit|ms)-/),e=(i||""===r.OLink&&["","o"])[1],t="WebKit|Moz|MS|O".match(new RegExp("("+e+")","i"))[1],{dom:t,lowercase:e,css:"-"+e+"-",js:e[0].toUpperCase()+e.substr(1)}},t.prototype.strToArr=function(t){var e;return e=[],"number"!=typeof t||isNaN(t)?(t.trim().split(/\s+/gim).forEach(function(t){return function(r){return e.push(t.parseUnit(t.parseIfRand(r)))}}(this)),e):(e.push(this.parseUnit(t)),e)},t.prototype.calcArrDelta=function(t,e){var r,i,s,n,o;for(r=[],i=s=0,n=t.length;n>s;i=++s)o=t[i],r[i]=this.parseUnit(""+(e[i].value-t[i].value)+e[i].unit);return r},t.prototype.isArray=function(t){return t instanceof Array},t.prototype.normDashArrays=function(t,e){var r,i,s,n,o,p,a,h,u,l;if(r=t.length,i=e.length,r>i)for(a=r-i,l=e.length,n=o=0,h=a;h>=0?h>o:o>h;n=h>=0?++o:--o)s=n+l,e.push(this.parseUnit("0"+t[s].unit));else if(i>r)for(a=i-r,l=t.length,n=p=0,u=a;u>=0?u>p:p>u;n=u>=0?++p:--p)s=n+l,t.push(this.parseUnit("0"+e[s].unit));return[t,e]},t.prototype.makeColorObj=function(t){var e,r,i,s,n,o,p,a,h,u;return"#"===t[0]&&(h=/^#?([a-f\d]{1,2})([a-f\d]{1,2})([a-f\d]{1,2})$/i.exec(t),i={},h&&(o=2===h[1].length?h[1]:h[1]+h[1],s=2===h[2].length?h[2]:h[2]+h[2],r=2===h[3].length?h[3]:h[3]+h[3],i={r:parseInt(o,16),g:parseInt(s,16),b:parseInt(r,16),a:1})),"#"!==t[0]&&(n="r"===t[0]&&"g"===t[1]&&"b"===t[2],n&&(u=t),n||(u=this.shortColors[t]?this.shortColors[t]:(this.div.style.color=t,this.computedStyle(this.div).color)),p="^rgba?\\((\\d{1,3}),\\s?(\\d{1,3}),",a="\\s?(\\d{1,3}),?\\s?(\\d{1}|0?\\.\\d{1,})?\\)$",h=new RegExp(p+a,"gi").exec(u),i={},e=parseFloat(h[4]||1),h&&(i={r:parseInt(h[1],10),g:parseInt(h[2],10),b:parseInt(h[3],10),a:null==e||isNaN(e)?1:e})),i},t.prototype.computedStyle=function(t){return getComputedStyle(t)},t.prototype.capitalize=function(t){if("string"!=typeof t)throw Error("String expected - nothing to capitalize");return t.charAt(0).toUpperCase()+t.substring(1)},t.prototype.parseRand=function(t){var e,r,i;return r=t.split(/rand\(|\,|\)/),i=this.parseUnit(r[2]),e=this.rand(parseFloat(r[1]),parseFloat(r[2])),i.unit&&r[2].match(i.unit)?e+i.unit:e},t.prototype.parseStagger=function(t,e){var r,i,s,n,o,p;return p=t.split(/stagger\(|\)$/)[1].toLowerCase(),s=p.split(/(rand\(.*?\)|[^\(,\s]+)(?=\s*,|\s*$)/gim),p=s.length>3?(r=this.parseUnit(this.parseIfRand(s[1])),s[3]):(r=this.parseUnit(0),s[1]),p=this.parseIfRand(p),o=this.parseUnit(p),i=e*o.value+r.value,n=r.isStrict?r.unit:o.isStrict?o.unit:"",n?""+i+n:i},t.prototype.parseIfStagger=function(t,e){return"string"==typeof t&&t.match(/stagger/g)?this.parseStagger(t,e):t},t.prototype.parseIfRand=function(t){return"string"==typeof t&&t.match(/rand\(/)?this.parseRand(t):t},t.prototype.parseDelta=function(t,e){var r,i,s,n,o,p,a,h,u,l;if(h=Object.keys(e)[0],i=e[h],r={start:h},isNaN(parseFloat(h))&&!h.match(/rand\(/)){if("strokeLinecap"===t)return this.warn("Sorry, stroke-linecap property is not animatable yet, using the start("+h+") value instead",e),r;l=this.makeColorObj(h),n=this.makeColorObj(i),r={start:l,end:n,type:"color",delta:{r:n.r-l.r,g:n.g-l.g,b:n.b-l.b,a:n.a-l.a}}}else if("strokeDasharray"===t||"strokeDashoffset"===t){for(u=this.strToArr(h),s=this.strToArr(i),this.normDashArrays(u,s),o=p=0,a=u.length;a>p;o=++p)h=u[o],i=s[o],this.mergeUnits(h,i,t);r={start:u,end:s,delta:this.calcArrDelta(u,s),type:"array"}}else this.chainOptionMap[t]||(this.posPropsMap[t]?(i=this.parseUnit(this.parseIfRand(i)),h=this.parseUnit(this.parseIfRand(h)),this.mergeUnits(h,i,t),r={start:h,end:i,delta:i.value-h.value,type:"unit"}):(i=parseFloat(this.parseIfRand(i)),h=parseFloat(this.parseIfRand(h)),r={start:h,end:i,delta:i-h,type:"number"}));return r},t.prototype.mergeUnits=function(t,e,r){return!e.isStrict&&t.isStrict?(e.unit=t.unit,e.string=""+e.value+e.unit):e.isStrict&&!t.isStrict?(t.unit=e.unit,t.string=""+t.value+t.unit):e.isStrict&&t.isStrict&&e.unit!==t.unit?(t.unit=e.unit,t.string=""+t.value+t.unit,this.warn('Two different units were specified on "'+r+'" delta property, mo · js will fallback to end "'+e.unit+'" unit ')):void 0},t.prototype.rand=function(t,e){return Math.random()*(e-t)+t},t.prototype.isDOM=function(t){var e;return null==t?!1:(e="number"==typeof t.nodeType&&"string"==typeof t.nodeName,"object"==typeof t&&e)},t.prototype.getChildElements=function(t){var e,r,i;for(e=t.childNodes,r=[],i=e.length;i--;)1===e[i].nodeType&&r.unshift(e[i]);return r},t.prototype.delta=function(t,e){var r,i,s,n,o;return n=typeof t,o=typeof e,r="string"===n||"number"===n&&!isNaN(t),i="string"===o||"number"===o&&!isNaN(e),r&&i?(s={},s[t]=e,s):void this.error("delta method expects Strings or Numbers at input but got - "+t+", "+e)},t.prototype.getUniqID=function(){return++this.uniqIDs},t.prototype.parsePath=function(t){var e;return"string"==typeof t?"m"===t.charAt(0).toLowerCase()?(e=document.createElementNS(this.NS,"path"),e.setAttributeNS(null,"d",t),e):document.querySelector(t):t.style?t:void 0},t.prototype.closeEnough=function(t,e,r){return Math.abs(t-e)<r},t.prototype.checkIf3d=function(){var t,e,r,i;return t=document.createElement("div"),this.style(t,"transform","translateZ(0)"),r=t.style,e=this.prefix.css+"transform",i=null!=r[e]?r[e]:r.transform,""!==i},t}(),s=new i,e.exports=s},{}],7:[function(e,r,i){window.mojs={revision:"0.147.4",isDebug:!0,helpers:e("./h"),Bit:e("./shapes/bit"),bitsMap:e("./shapes/bitsMap"),Circle:e("./shapes/circle"),Cross:e("./shapes/cross"),Line:e("./shapes/line"),Rect:e("./shapes/rect"),Polygon:e("./shapes/polygon"),Equal:e("./shapes/equal"),Zigzag:e("./shapes/zigzag"),Burst:e("./burst"),Transit:e("./transit"),Swirl:e("./swirl"),Stagger:e("./stagger"),Spriter:e("./spriter"),MotionPath:e("./motion-path"),Tween:e("./tween/tween"),Timeline:e("./tween/timeline"),tweener:e("./tween/tweener"),easing:e("./easing/easing")},mojs.h=mojs.helpers,mojs.delta=mojs.h.delta,"function"==typeof t&&t.amd&&t("mojs",[],function(){return mojs}),"object"==typeof r&&"object"==typeof r.exports&&(r.exports=mojs)},{"./burst":1,"./easing/easing":3,"./h":6,"./motion-path":8,"./shapes/bit":11,"./shapes/bitsMap":12,"./shapes/circle":13,"./shapes/cross":14,"./shapes/equal":15,"./shapes/line":16,"./shapes/polygon":17,"./shapes/rect":18,"./shapes/zigzag":19,"./spriter":20,"./stagger":21,"./swirl":22,"./transit":23,"./tween/timeline":24,"./tween/tween":25,"./tween/tweener":26}],8:[function(t,e,r){var i,s,n,o,p,a=function(t,e){return function(){return t.apply(e,arguments)}};o=t("./h"),p=t("./vendor/resize"),n=t("./tween/tween"),s=t("./tween/timeline"),i=function(){function t(t){this.o=null!=t?t:{},this.calcHeight=a(this.calcHeight,this),this.vars()||this.createTween()}return t.prototype.defaults={path:null,curvature:{x:"75%",y:"50%"},isCompositeLayer:!0,delay:0,duration:1e3,easing:null,repeat:0,yoyo:!1,offsetX:0,offsetY:0,angleOffset:null,pathStart:0,pathEnd:1,motionBlur:0,transformOrigin:null,isAngle:!1,isReverse:!1,isRunLess:!1,isPresetPosition:!0,onStart:null,onComplete:null,onUpdate:null},t.prototype.vars=function(){return this.getScaler=o.bind(this.getScaler,this),this.resize=p,this.props=o.cloneObj(this.defaults),this.extendOptions(this.o),this.isMotionBlurReset=o.isSafari||o.isIE,this.isMotionBlurReset&&(this.props.motionBlur=0),this.history=[o.cloneObj(this.props)],this.postVars()},t.prototype.curveToPath=function(t){var e,r,i,s,n,p,a,h,u,l,c,d,f;return l=document.createElementNS(o.NS,"path"),f=t.start,u={x:f.x+t.shift.x,y:f.x+t.shift.y},r=t.curvature,a=t.shift.x,h=t.shift.y,d=Math.sqrt(a*a+h*h),c=d/100,e=Math.atan(h/a)*(180/Math.PI)+90,t.shift.x<0&&(e+=180),i=o.parseUnit(r.x),i="%"===i.unit?i.value*c:i.value,p=o.getRadialPoint({center:{x:f.x,y:f.y},radius:i,angle:e}),s=o.parseUnit(r.y),s="%"===s.unit?s.value*c:s.value,n=o.getRadialPoint({center:{x:p.x,y:p.y},radius:s,angle:e+90}),l.setAttribute("d","M"+f.x+","+f.y+" Q"+n.x+","+n.y+" "+u.x+","+u.y),l},t.prototype.postVars=function(){return this.props.pathStart=o.clamp(this.props.pathStart,0,1),this.props.pathEnd=o.clamp(this.props.pathEnd,this.props.pathStart,1),this.angle=0,this.speedX=0,this.speedY=0,this.blurX=0,this.blurY=0,this.prevCoords={},this.blurAmount=20,this.props.motionBlur=o.clamp(this.props.motionBlur,0,1),this.onUpdate=this.props.onUpdate,this.o.el?(this.el=this.parseEl(this.props.el),this.props.motionBlur>0&&this.createFilter(),this.path=this.getPath(),this.path.getAttribute("d")?(this.len=this.path.getTotalLength(),this.slicedLen=this.len*(this.props.pathEnd-this.props.pathStart),this.startLen=this.props.pathStart*this.len,this.fill=this.props.fill,null!=this.fill&&(this.container=this.parseEl(this.props.fill.container),this.fillRule=this.props.fill.fillRule||"all",this.getScaler(),null!=this.container)?(this.removeEvent(this.container,"onresize",this.getScaler),this.addEvent(this.container,"onresize",this.getScaler)):void 0):(o.error("Path has no coordinates to work with, aborting"),!0)):(o.error('Missed "el" option. It could be a selector, DOMNode or another module.'),!0)},t.prototype.addEvent=function(t,e,r){return t.addEventListener(e,r,!1)},t.prototype.removeEvent=function(t,e,r){return t.removeEventListener(e,r,!1)},t.prototype.createFilter=function(){var t,e;return t=document.createElement("div"),this.filterID="filter-"+o.getUniqID(),t.innerHTML='<svg id="svg-'+this.filterID+'"\n    style="visibility:hidden; width:0px; height:0px">\n  <filter id="'+this.filterID+'" y="-20" x="-20" width="40" height="40">\n    <feOffset\n      id="blur-offset" in="SourceGraphic"\n      dx="0" dy="0" result="offset2"></feOffset>\n    <feGaussianblur\n      id="blur" in="offset2"\n      stdDeviation="0,0" result="blur2"></feGaussianblur>\n    <feMerge>\n      <feMergeNode in="SourceGraphic"></feMergeNode>\n      <feMergeNode in="blur2"></feMergeNode>\n    </feMerge>\n  </filter>\n</svg>',e=t.querySelector("#svg-"+this.filterID),this.filter=e.querySelector("#blur"),this.filterOffset=e.querySelector("#blur-offset"),document.body.insertBefore(e,document.body.firstChild),this.el.style.filter="url(#"+this.filterID+")",this.el.style[o.prefix.css+"filter"]="url(#"+this.filterID+")"},t.prototype.parseEl=function(t){return"string"==typeof t?document.querySelector(t):t instanceof HTMLElement?t:null!=t.setProp?(this.isModule=!0,t):void 0},t.prototype.getPath=function(){var t;return t=o.parsePath(this.props.path),t?t:this.props.path.x||this.props.path.y?this.curveToPath({start:{x:0,y:0},shift:{x:this.props.path.x||0,y:this.props.path.y||0},curvature:{x:this.props.curvature.x||this.defaults.curvature.x,y:this.props.curvature.y||this.defaults.curvature.y}}):void 0},t.prototype.getScaler=function(){var t,e,r;switch(this.cSize={width:this.container.offsetWidth||0,height:this.container.offsetHeight||0},r=this.path.getPointAtLength(0),t=this.path.getPointAtLength(this.len),e={},this.scaler={},e.width=t.x>=r.x?t.x-r.x:r.x-t.x,e.height=t.y>=r.y?t.y-r.y:r.y-t.y,this.fillRule){case"all":return this.calcWidth(e),this.calcHeight(e);case"width":return this.calcWidth(e),this.scaler.y=this.scaler.x;case"height":return this.calcHeight(e),this.scaler.x=this.scaler.y}},t.prototype.calcWidth=function(t){return this.scaler.x=this.cSize.width/t.width,!isFinite(this.scaler.x)&&(this.scaler.x=1)},t.prototype.calcHeight=function(t){return this.scaler.y=this.cSize.height/t.height,!isFinite(this.scaler.y)&&(this.scaler.y=1)},t.prototype.run=function(t){var e,r,i;if(t){e=this.history[0];for(r in t)i=t[r],o.callbacksMap[r]||o.tweenOptionMap[r]?(o.warn('the property "'+r+'" property can not be overridden on run yet'),delete t[r]):this.history[0][r]=i;this.tuneOptions(t)}return this.startTween()},t.prototype.createTween=function(){return this.tween=new n({duration:this.props.duration,delay:this.props.delay,yoyo:this.props.yoyo,repeat:this.props.repeat,easing:this.props.easing,onStart:function(t){return function(){var e;return null!=(e=t.props.onStart)?e.apply(t):void 0}}(this),onComplete:function(t){return function(){var e;return t.props.motionBlur&&t.setBlur({blur:{x:0,y:0},offset:{x:0,y:0}}),null!=(e=t.props.onComplete)?e.apply(t):void 0;

}}(this),onUpdate:function(t){return function(e){return t.setProgress(e)}}(this),onFirstUpdateBackward:function(t){return function(){return t.history.length>1&&t.tuneOptions(t.history[0])}}(this)}),this.timeline=new s,this.timeline.add(this.tween),!this.props.isRunLess&&this.startTween(),this.props.isPresetPosition&&this.setProgress(0,!0)},t.prototype.startTween=function(){return setTimeout(function(t){return function(){var e;return null!=(e=t.timeline)?e.start():void 0}}(this),1)},t.prototype.setProgress=function(t,e){var r,i,s,n;return r=this.startLen+(this.props.isReverse?(1-t)*this.slicedLen:t*this.slicedLen),i=this.path.getPointAtLength(r),s=i.x+this.props.offsetX,n=i.y+this.props.offsetY,this._getCurrentAngle(i,r,t),this._setTransformOrigin(t),this._setTransform(s,n,t,e),this.props.motionBlur&&this.makeMotionBlur(s,n)},t.prototype.setElPosition=function(t,e,r){var i,s,n,p;return n=0!==this.angle?"rotate("+this.angle+"deg)":"",s=this.props.isCompositeLayer&&o.is3d,i=s?"translateZ(0)":"",p="translate("+t+"px,"+e+"px) "+n+" "+i,o.setPrefixedStyle(this.el,"transform",p)},t.prototype.setModulePosition=function(t,e){return this.el.setProp({shiftX:t+"px",shiftY:e+"px",angle:this.angle}),this.el.draw()},t.prototype._getCurrentAngle=function(t,e,r){var i,s,n,p,a;return s="function"==typeof this.props.transformOrigin,this.props.isAngle||null!=this.props.angleOffset||s?(n=this.path.getPointAtLength(e-1),p=t.y-n.y,a=t.x-n.x,i=Math.atan(p/a),!isFinite(i)&&(i=0),this.angle=i*o.RAD_TO_DEG,"function"!=typeof this.props.angleOffset?this.angle+=this.props.angleOffset||0:this.angle=this.props.angleOffset.call(this,this.angle,r)):this.angle=0},t.prototype._setTransform=function(t,e,r,i){var s;return this.scaler&&(t*=this.scaler.x,e*=this.scaler.y),s=null,i||(s="function"==typeof this.onUpdate?this.onUpdate(r,{x:t,y:e,angle:this.angle}):void 0),this.isModule?this.setModulePosition(t,e):"string"!=typeof s?this.setElPosition(t,e,r):o.setPrefixedStyle(this.el,"transform",s)},t.prototype._setTransformOrigin=function(t){var e,r;return this.props.transformOrigin?(e="function"==typeof this.props.transformOrigin,r=e?this.props.transformOrigin(this.angle,t):this.props.transformOrigin,o.setPrefixedStyle(this.el,"transform-origin",r)):void 0},t.prototype.makeMotionBlur=function(t,e){var r,i,s,n,p,a,h;return h=0,p=1,a=1,null==this.prevCoords.x||null==this.prevCoords.y?(this.speedX=0,this.speedY=0):(s=t-this.prevCoords.x,n=e-this.prevCoords.y,s>0&&(p=-1),0>p&&(a=-1),this.speedX=Math.abs(s),this.speedY=Math.abs(n),h=Math.atan(n/s)*(180/Math.PI)+90),r=h-this.angle,i=this.angToCoords(r),this.blurX=o.clamp(this.speedX/16*this.props.motionBlur,0,1),this.blurY=o.clamp(this.speedY/16*this.props.motionBlur,0,1),this.setBlur({blur:{x:3*this.blurX*this.blurAmount*Math.abs(i.x),y:3*this.blurY*this.blurAmount*Math.abs(i.y)},offset:{x:3*p*this.blurX*i.x*this.blurAmount,y:3*a*this.blurY*i.y*this.blurAmount}}),this.prevCoords.x=t,this.prevCoords.y=e},t.prototype.setBlur=function(t){return this.isMotionBlurReset?void 0:(this.filter.setAttribute("stdDeviation",t.blur.x+","+t.blur.y),this.filterOffset.setAttribute("dx",t.offset.x),this.filterOffset.setAttribute("dy",t.offset.y))},t.prototype.extendDefaults=function(t){var e,r,i;r=[];for(e in t)i=t[e],r.push(this[e]=i);return r},t.prototype.extendOptions=function(t){var e,r,i;r=[];for(e in t)i=t[e],r.push(this.props[e]=i);return r},t.prototype.then=function(t){var e,r,i,s,p;s=this.history[this.history.length-1],i={};for(r in s)p=s[r],!o.callbacksMap[r]&&!o.tweenOptionMap[r]||"duration"===r?null==t[r]&&(t[r]=p):null==t[r]&&(t[r]=void 0),o.tweenOptionMap[r]&&(i[r]="duration"!==r?t[r]:null!=t[r]?t[r]:s[r]);return this.history.push(t),e=this,i.onUpdate=function(t){return function(e){return t.setProgress(e)}}(this),i.onStart=function(t){return function(){var e;return null!=(e=t.props.onStart)?e.apply(t):void 0}}(this),i.onComplete=function(t){return function(){var e;return null!=(e=t.props.onComplete)?e.apply(t):void 0}}(this),i.onFirstUpdate=function(){return e.tuneOptions(e.history[this.index])},i.isChained=!t.delay,this.timeline.append(new n(i)),this},t.prototype.tuneOptions=function(t){return this.extendOptions(t),this.postVars()},t.prototype.angToCoords=function(t){var e,r,i;return t%=360,e=(t-90)*Math.PI/180,r=Math.cos(e),i=Math.sin(e),r=0>r?Math.max(r,-.7):Math.min(r,.7),i=0>i?Math.max(i,-.7):Math.min(i,.7),{x:1.428571429*r,y:1.428571429*i}},t}(),e.exports=i},{"./h":6,"./tween/timeline":24,"./tween/tween":25,"./vendor/resize":27}],9:[function(t,e,r){!function(t){var e,r,i;return null==t.performance&&(t.performance={}),Date.now=Date.now||function(){return(new Date).getTime()},null==t.performance.now?(e=(null!=(r=t.performance)&&null!=(i=r.timing)?i.navigationStart:void 0)?performance.timing.navigationStart:Date.now(),t.performance.now=function(){return Date.now()-e}):void 0}(window)},{}],10:[function(t,e,r){!function(){"use strict";var t,e,r,i,s,n,o;for(s=["webkit","moz"],e=0,o=window;e<s.length&&!o.requestAnimationFrame;)n=s[e],o.requestAnimationFrame=o[n+"RequestAnimationFrame"],t=o[n+"CancelAnimationFrame"],o.cancelAnimationFrame=t||o[n+"CancelRequestAnimationFrame"],++e;r=!o.requestAnimationFrame||!o.cancelAnimationFrame,(/iP(ad|hone|od).*OS 6/.test(o.navigator.userAgent)||r)&&(i=0,o.requestAnimationFrame=function(t){var e,r;return r=Date.now(),e=Math.max(i+16,r),setTimeout(function(){t(i=e)},e-r)},o.cancelAnimationFrame=clearTimeout)}()},{}],11:[function(t,e,r){var i,s;s=t("../h"),i=function(){function t(t){this.o=null!=t?t:{},this.init()}return t.prototype.ns="http://www.w3.org/2000/svg",t.prototype.type="line",t.prototype.ratio=1,t.prototype.defaults={radius:50,radiusX:void 0,radiusY:void 0,points:3,x:0,y:0,angle:0,stroke:"hotpink","stroke-width":2,"stroke-opacity":1,fill:"transparent","fill-opacity":1,"stroke-dasharray":"","stroke-dashoffset":"","stroke-linecap":""},t.prototype.init=function(){return this.vars(),this.render(),this},t.prototype.vars=function(){return this.o.ctx&&"svg"===this.o.ctx.tagName?this.ctx=this.o.ctx:this.o.el||s.error("You should pass a real context(ctx) to the bit"),this.state={},this.drawMapLength=this.drawMap.length,this.extendDefaults(),this.calcTransform()},t.prototype.calcTransform=function(){var t;return t="rotate("+this.props.angle+", "+this.props.x+", "+this.props.y+")",this.props.transform=""+t},t.prototype.extendDefaults=function(){var t,e,r,i;null==this.props&&(this.props={}),e=this.defaults,r=[];for(t in e)i=e[t],r.push(this.props[t]=null!=this.o[t]?this.o[t]:i);return r},t.prototype.setAttr=function(t,e){var r,i,s,n,o,p;if("object"==typeof t){for(s=Object.keys(t),n=s.length,r=e||this.el,o=[];n--;)i=s[n],p=t[i],o.push(r.setAttribute(i,p));return o}return this.el.setAttribute(t,e)},t.prototype.setProp=function(t,e){var r,i,s;if("object"==typeof t){i=[];for(r in t)s=t[r],i.push(this.props[r]=s);return i}return this.props[t]=e},t.prototype.render=function(){return this.isRendered=!0,null!=this.o.el?(this.el=this.o.el,this.isForeign=!0):(this.el=document.createElementNS(this.ns,this.type||"line"),!this.o.isDrawLess&&this.draw(),this.ctx.appendChild(this.el))},t.prototype.drawMap=["stroke","stroke-width","stroke-opacity","stroke-dasharray","fill","stroke-dashoffset","stroke-linecap","fill-opacity","transform"],t.prototype.draw=function(){var t,e;for(this.props.length=this.getLength(),t=this.drawMapLength;t--;){switch(e=this.drawMap[t]){case"stroke-dasharray":case"stroke-dashoffset":this.castStrokeDash(e)}this.setAttrsIfChanged(e,this.props[e])}return this.state.radius=this.props.radius},t.prototype.castStrokeDash=function(t){var e,r,i,n,o,p,a;if(s.isArray(this.props[t])){for(a="",p=this.props[t],i=n=0,o=p.length;o>n;i=++n)r=p[i],e="%"===r.unit?this.castPercent(r.value):r.value,a+=e+" ";return this.props[t]="0 "===a?a="":a,this.props[t]=a}return"object"==typeof this.props[t]?(a="%"===this.props[t].unit?this.castPercent(this.props[t].value):this.props[t].value,this.props[t]=0===a?a="":a):void 0},t.prototype.castPercent=function(t){return t*(this.props.length/100)},t.prototype.setAttrsIfChanged=function(t,e){var r,i,s,n;if("object"==typeof t){for(i=Object.keys(t),s=i.length,n=[];s--;)r=i[s],e=t[r],n.push(this.setAttrIfChanged(r,e));return n}return null==e&&(e=this.props[t]),this.setAttrIfChanged(t,e)},t.prototype.setAttrIfChanged=function(t,e){return this.isChanged(t,e)?(this.el.setAttribute(t,e),this.state[t]=e):void 0},t.prototype.isChanged=function(t,e){return null==e&&(e=this.props[t]),this.state[t]!==e},t.prototype.getLength=function(){var t;return null!=(null!=(t=this.el)?t.getTotalLength:void 0)&&this.el.getAttribute("d")?this.el.getTotalLength():2*(null!=this.props.radiusX?this.props.radiusX:this.props.radius)},t}(),e.exports=i},{"../h":6}],12:[function(t,e,r){var i,s,n,o,p,a,h,u,l,c;i=t("./bit"),n=t("./circle"),a=t("./line"),l=t("./zigzag"),u=t("./rect"),h=t("./polygon"),o=t("./cross"),p=t("./equal"),c=t("../h"),s=function(){function t(){}return t.prototype.h=c,t.prototype.map={bit:i,circle:n,line:a,zigzag:l,rect:u,polygon:h,cross:o,equal:p},t.prototype.getBit=function(t){return this.map[t]||this.h.error('no "'+t+'" shape available yet, please choose from this list:',this.map)},t}(),e.exports=new s},{"../h":6,"./bit":11,"./circle":13,"./cross":14,"./equal":15,"./line":16,"./polygon":17,"./rect":18,"./zigzag":19}],13:[function(t,e,r){var i,s,n=function(t,e){function r(){this.constructor=t}for(var i in e)o.call(e,i)&&(t[i]=e[i]);return r.prototype=e.prototype,t.prototype=new r,t.__super__=e.prototype,t},o={}.hasOwnProperty;i=t("./bit"),s=function(t){function e(){return e.__super__.constructor.apply(this,arguments)}return n(e,t),e.prototype.type="ellipse",e.prototype.draw=function(){var t,r;return t=null!=this.props.radiusX?this.props.radiusX:this.props.radius,r=null!=this.props.radiusY?this.props.radiusY:this.props.radius,this.setAttrsIfChanged({rx:t,ry:r,cx:this.props.x,cy:this.props.y}),e.__super__.draw.apply(this,arguments)},e.prototype.getLength=function(){var t,e;return t=null!=this.props.radiusX?this.props.radiusX:this.props.radius,e=null!=this.props.radiusY?this.props.radiusY:this.props.radius,2*Math.PI*Math.sqrt((Math.pow(t,2)+Math.pow(e,2))/2)},e}(i),e.exports=s},{"./bit":11}],14:[function(t,e,r){var i,s,n=function(t,e){function r(){this.constructor=t}for(var i in e)o.call(e,i)&&(t[i]=e[i]);return r.prototype=e.prototype,t.prototype=new r,t.__super__=e.prototype,t},o={}.hasOwnProperty;i=t("./bit"),s=function(t){function e(){return e.__super__.constructor.apply(this,arguments)}return n(e,t),e.prototype.type="path",e.prototype.draw=function(){var t,r,i,s,n,o,p,a,h;return e.__super__.draw.apply(this,arguments),s=null!=this.props.radiusX?this.props.radiusX:this.props.radius,n=null!=this.props.radiusY?this.props.radiusY:this.props.radius,o=this.props.x-s,p=this.props.x+s,r="M"+o+","+this.props.y+" L"+p+","+this.props.y,a=this.props.y-n,h=this.props.y+n,i="M"+this.props.x+","+a+" L"+this.props.x+","+h,t=r+" "+i,this.setAttr({d:t})},e.prototype.getLength=function(){var t,e;return t=null!=this.props.radiusX?this.props.radiusX:this.props.radius,e=null!=this.props.radiusY?this.props.radiusY:this.props.radius,2*(t+e)},e}(i),e.exports=s},{"./bit":11}],15:[function(t,e,r){var i,s,n=function(t,e){function r(){this.constructor=t}for(var i in e)o.call(e,i)&&(t[i]=e[i]);return r.prototype=e.prototype,t.prototype=new r,t.__super__=e.prototype,t},o={}.hasOwnProperty;i=t("./bit"),s=function(t){function e(){return e.__super__.constructor.apply(this,arguments)}return n(e,t),e.prototype.type="path",e.prototype.ratio=1.43,e.prototype.draw=function(){var t,r,i,s,n,o,p,a,h,u,l;if(e.__super__.draw.apply(this,arguments),this.props.points){for(s=null!=this.props.radiusX?this.props.radiusX:this.props.radius,n=null!=this.props.radiusY?this.props.radiusY:this.props.radius,p=this.props.x-s,a=this.props.x+s,t="",l=2*n/(this.props.points-1),u=this.props.y-n,r=i=0,o=this.props.points;o>=0?o>i:i>o;r=o>=0?++i:--i)h=""+(r*l+u),t+="M"+p+", "+h+" L"+a+", "+h+" ";return this.setAttr({d:t})}},e.prototype.getLength=function(){return 2*(null!=this.props.radiusX?this.props.radiusX:this.props.radius)},e}(i),e.exports=s},{"./bit":11}],16:[function(t,e,r){var i,s,n=function(t,e){function r(){this.constructor=t}for(var i in e)o.call(e,i)&&(t[i]=e[i]);return r.prototype=e.prototype,t.prototype=new r,t.__super__=e.prototype,t},o={}.hasOwnProperty;i=t("./bit"),s=function(t){function e(){return e.__super__.constructor.apply(this,arguments)}return n(e,t),e.prototype.draw=function(){var t;return t=null!=this.props.radiusX?this.props.radiusX:this.props.radius,this.setAttrsIfChanged({x1:this.props.x-t,x2:this.props.x+t,y1:this.props.y,y2:this.props.y}),e.__super__.draw.apply(this,arguments)},e}(i),e.exports=s},{"./bit":11}],17:[function(t,e,r){var i,s,n,o=function(t,e){function r(){this.constructor=t}for(var i in e)p.call(e,i)&&(t[i]=e[i]);return r.prototype=e.prototype,t.prototype=new r,t.__super__=e.prototype,t},p={}.hasOwnProperty;i=t("./bit"),n=t("../h"),s=function(t){function e(){return e.__super__.constructor.apply(this,arguments)}return o(e,t),e.prototype.type="path",e.prototype.draw=function(){return this.drawShape(),e.__super__.draw.apply(this,arguments)},e.prototype.drawShape=function(){var t,e,r,i,s,o,p,a,h,u;for(u=360/this.props.points,this.radialPoints=[],r=i=0,a=this.props.points;a>=0?a>i:i>a;r=a>=0?++i:--i)this.radialPoints.push(n.getRadialPoint({radius:this.props.radius,radiusX:this.props.radiusX,radiusY:this.props.radiusY,angle:r*u,center:{x:this.props.x,y:this.props.y}}));for(e="",h=this.radialPoints,r=s=0,o=h.length;o>s;r=++s)p=h[r],t=0===r?"M":"L",e+=""+t+p.x.toFixed(4)+","+p.y.toFixed(4)+" ";return this.setAttr({d:e+="z"})},e.prototype.getLength=function(){return this.el.getTotalLength()},e}(i),e.exports=s},{"../h":6,"./bit":11}],18:[function(t,e,r){var i,s,n=function(t,e){function r(){this.constructor=t}for(var i in e)o.call(e,i)&&(t[i]=e[i]);return r.prototype=e.prototype,t.prototype=new r,t.__super__=e.prototype,t},o={}.hasOwnProperty;i=t("./bit"),s=function(t){function e(){return e.__super__.constructor.apply(this,arguments)}return n(e,t),e.prototype.type="rect",e.prototype.ratio=1.43,e.prototype.draw=function(){var t,r;return e.__super__.draw.apply(this,arguments),t=null!=this.props.radiusX?this.props.radiusX:this.props.radius,r=null!=this.props.radiusY?this.props.radiusY:this.props.radius,this.setAttrsIfChanged({width:2*t,height:2*r,x:this.props.x-t,y:this.props.y-r})},e.prototype.getLength=function(){var t,e;return t=null!=this.props.radiusX?this.props.radiusX:this.props.radius,e=null!=this.props.radiusY?this.props.radiusY:this.props.radius,2*t+2*e},e}(i),e.exports=s},{"./bit":11}],19:[function(t,e,r){var i,s,n=function(t,e){function r(){this.constructor=t}for(var i in e)o.call(e,i)&&(t[i]=e[i]);return r.prototype=e.prototype,t.prototype=new r,t.__super__=e.prototype,t},o={}.hasOwnProperty;i=t("./bit"),s=function(t){function e(){return e.__super__.constructor.apply(this,arguments)}return n(e,t),e.prototype.type="path",e.prototype.ratio=1.43,e.prototype.draw=function(){var t,r,i,s,n,o,p,a,h,u,l,c,d,f,y,g;if(this.props.points){for(h=null!=this.props.radiusX?this.props.radiusX:this.props.radius,u=null!=this.props.radiusY?this.props.radiusY:this.props.radius,a="",c=2*h/this.props.points,d=2*u/this.props.points,f=this.props["stroke-width"],y=this.props.x-h,g=this.props.y-u,r=p=l=this.props.points;0>=l?0>p:p>0;r=0>=l?++p:--p)i=y+r*c+f,n=g+r*d+f,s=y+(r-1)*c+f,o=g+(r-1)*d+f,t=r===this.props.points?"M":"L",a+=""+t+i+","+n+" l0, -"+d+" l-"+c+", 0";return this.setAttr({d:a}),e.__super__.draw.apply(this,arguments)}},e}(i),e.exports=s},{"./bit":11}],20:[function(t,e,r){var i,s,n,o;o=t("./h"),n=t("./tween/tween"),s=t("./tween/timeline"),i=function(){function t(t){return this.o=null!=t?t:{},null==this.o.el?o.error('No "el" option specified, aborting'):(this._vars(),this._extendDefaults(),this._parseFrames(),this._frames.length<=2&&o.warn("Spriter: only "+this._frames.length+" frames found"),this._frames.length<1&&o.error("Spriter: there is no frames to animate, aborting"),void this._createTween())}return t.prototype._defaults={duration:500,delay:0,easing:"linear.none",repeat:0,yoyo:!1,isRunLess:!1,isShowEnd:!1,onStart:null,onUpdate:null,onComplete:null},t.prototype._vars=function(){return this._props=o.cloneObj(this.o),this.el=this.o.el,this._frames=[]},t.prototype.run=function(t){return this._timeline.start()},t.prototype._extendDefaults=function(){return o.extend(this._props,this._defaults)},t.prototype._parseFrames=function(){var t,e,r,i,s;for(this._frames=Array.prototype.slice.call(this.el.children,0),s=this._frames,e=r=0,i=s.length;i>r;e=++r)t=s[e],t.style.opacity=0;return this._frameStep=1/this._frames.length},t.prototype._createTween=function(){return this._tween=new n({duration:this._props.duration,delay:this._props.delay,yoyo:this._props.yoyo,repeat:this._props.repeat,easing:this._props.easing,onStart:function(t){return function(){var e;return"function"==typeof(e=t._props).onStart?e.onStart():void 0}}(this),onComplete:function(t){return function(){var e;return"function"==typeof(e=t._props).onComplete?e.onComplete():void 0}}(this),onUpdate:function(t){return function(e){return t._setProgress(e)}}(this)}),this._timeline=new s,this._timeline.add(this._tween),!this._props.isRunLess&&this._startTween()},t.prototype._startTween=function(){return setTimeout(function(t){return function(){return t._timeline.start()}}(this),1)},t.prototype._setProgress=function(t){var e,r,i,s,n;return i=Math.floor(t/this._frameStep),this._prevFrame!==this._frames[i]&&(null!=(s=this._prevFrame)&&(s.style.opacity=0),r=1===t&&this._props.isShowEnd?i-1:i,null!=(n=this._frames[r])&&(n.style.opacity=1),this._prevFrame=this._frames[i]),"function"==typeof(e=this._props).onUpdate?e.onUpdate(t):void 0},t}(),e.exports=i},{"./h":6,"./tween/timeline":24,"./tween/tween":25}],21:[function(t,e,r){var i,s,n,o;o=t("./h"),n=t("./tween/timeline"),i=function(){function t(t,e){this.init(t,e)}return t.prototype._getOptionByMod=function(t,e,r){var i,s;return i=r[t],i+""=="[object NodeList]"&&(i=Array.prototype.slice.call(i,0)),i+""=="[object HTMLCollection]"&&(i=Array.prototype.slice.call(i,0)),s=o.isArray(i)?i[e%i.length]:i,o.parseIfStagger(s,e)},t.prototype._getOptionByIndex=function(t,e){var r,i,s;i={};for(r in e)s=e[r],i[r]=this._getOptionByMod(r,t,e);return i},t.prototype._getChildQuantity=function(t,e){var r,i;return"number"==typeof t?t:(i=e[t],o.isArray(i)?i.length:i+""=="[object NodeList]"?i.length:i+""=="[object HTMLCollection]"?(r=Array.prototype.slice.call(i,0),r.length):i instanceof HTMLElement?1:"string"==typeof i?1:void 0)},t.prototype._createTimeline=function(t){return null==t&&(t={}),this.timeline=new n({onStart:t.onStaggerStart,onUpdate:t.onStaggerUpdate,onComplete:t.onStaggerComplete,onReverseComplete:t.onStaggerReverseComplete,delay:t.moduleDelay})},t.prototype.init=function(t,e){var r,i,s,n,o,p;for(r=this._getChildQuantity(t.quantifier||"el",t),this._createTimeline(t),this.childModules=[],i=s=0,p=r;p>=0?p>s:s>p;i=p>=0?++s:--s)o=this._getOptionByIndex(i,t),o.isRunLess=!0,n=new e(o),this.childModules.push(n),this.timeline.add(n);return this},t.prototype.run=function(){return this.timeline.start()},t}(),s=function(){function t(t){var e;return e=t,function(t){return new i(t,e)}}return t}(),e.exports=s},{"./h":6,"./tween/timeline":24}],22:[function(t,e,r){var i,s,n=function(t,e){function r(){this.constructor=t}for(var i in e)o.call(e,i)&&(t[i]=e[i]);return r.prototype=e.prototype,t.prototype=new r,t.__super__=e.prototype,t},o={}.hasOwnProperty;s=t("./transit"),i=function(t){function e(){return e.__super__.constructor.apply(this,arguments)}return n(e,t),e.prototype.skipPropsDelta={x:1,y:1},e.prototype.vars=function(){return e.__super__.vars.apply(this,arguments),!this.o.isSwirlLess&&this.generateSwirl()},e.prototype.extendDefaults=function(){var t,r,i,s;return e.__super__.extendDefaults.apply(this,arguments),i=this.getPosValue("x"),s=this.getPosValue("y"),t=90+Math.atan(s.delta/i.delta||0)*(180/Math.PI),i.delta<0&&(t+=180),this.positionDelta={radius:Math.sqrt(i.delta*i.delta+s.delta*s.delta),angle:t,x:i,y:s},null==(r=this.o).radiusScale&&(r.radiusScale=1),this.props.angleShift=this.h.parseIfRand(this.o.angleShift||0),this.props.radiusScale=this.h.parseIfRand(this.o.radiusScale)},e.prototype.getPosValue=function(t){var e,r;return e=this.o[t],e&&"object"==typeof e?(r=this.h.parseDelta(t,e),{start:r.start.value,end:r.end.value,delta:r.delta,units:r.end.unit}):(r=parseFloat(e||this.defaults[t]),{start:r,end:r,delta:0,units:"px"})},e.prototype.setProgress=function(t){var r,i,s,n;return r=this.positionDelta.angle,this.o.isSwirl&&(r+=this.getSwirl(t)),i=this.h.getRadialPoint({angle:r,radius:this.positionDelta.radius*t*this.props.radiusScale,center:{x:this.positionDelta.x.start,y:this.positionDelta.y.start}}),s=i.x.toFixed(4),n=i.y.toFixed(4),this.props.x=this.o.ctx?s:s+this.positionDelta.x.units,this.props.y=this.o.ctx?n:n+this.positionDelta.y.units,e.__super__.setProgress.apply(this,arguments)},e.prototype.generateSwirl=function(){var t,e;return this.props.signRand=Math.round(this.h.rand(0,1))?-1:1,null==(t=this.o).swirlSize&&(t.swirlSize=10),null==(e=this.o).swirlFrequency&&(e.swirlFrequency=3),this.props.swirlSize=this.h.parseIfRand(this.o.swirlSize),this.props.swirlFrequency=this.h.parseIfRand(this.o.swirlFrequency)},e.prototype.getSwirl=function(t){return this.props.signRand*this.props.swirlSize*Math.sin(this.props.swirlFrequency*t)},e}(s),e.exports=i},{"./transit":23}],23:[function(t,e,r){var i,s,n,o,p,a=function(t,e){function r(){this.constructor=t}for(var i in e)h.call(e,i)&&(t[i]=e[i]);return r.prototype=e.prototype,t.prototype=new r,t.__super__=e.prototype,t},h={}.hasOwnProperty;p=t("./h"),o=t("./shapes/bitsMap"),n=t("./tween/tween"),i=t("./tween/timeline"),s=function(t){function e(){return e.__super__.constructor.apply(this,arguments)}return a(e,t),e.prototype.progress=0,e.prototype.defaults={strokeWidth:2,strokeOpacity:1,strokeDasharray:0,strokeDashoffset:0,stroke:"transparent",fill:"deeppink",fillOpacity:"transparent",strokeLinecap:"",points:3,x:0,y:0,shiftX:0,shiftY:0,opacity:1,radius:{0:50},radiusX:void 0,radiusY:void 0,angle:0,size:null,sizeGap:0,onStart:null,onComplete:null,onUpdate:null,duration:500,delay:0,repeat:0,yoyo:!1,easing:"Linear.None"},e.prototype.vars=function(){var t;return null==this.h&&(this.h=p),null==this.lastSet&&(this.lastSet={}),this.index=this.o.index||0,null==this.runCount&&(this.runCount=0),this.extendDefaults(),t=this.h.cloneObj(this.o),this.h.extend(t,this.defaults),this.history=[t],this.isForeign=!!this.o.ctx,this.isForeignBit=!!this.o.bit,this.timelines=[]},e.prototype.render=function(){return this.isRendered||(this.isForeign||this.isForeignBit?(this.ctx=this.o.ctx,this.createBit(),this.calcSize()):(this.ctx=document.createElementNS(this.ns,"svg"),this.ctx.style.position="absolute",this.ctx.style.width="100%",this.ctx.style.height="100%",this.createBit(),this.calcSize(),this.el=document.createElement("div"),this.el.appendChild(this.ctx),(this.o.parent||document.body).appendChild(this.el)),this.isRendered=!0),this.setElStyles(),this.setProgress(0,!0),this.createTween(),this},e.prototype.setElStyles=function(){var t,e,r;return this.isForeign||(r=this.props.size+"px",t=-this.props.size/2+"px",this.el.style.position="absolute",this.el.style.top=this.props.y,this.el.style.left=this.props.x,this.el.style.width=r,this.el.style.height=r,this.el.style["margin-left"]=t,this.el.style["margin-top"]=t,this.el.style.marginLeft=t,this.el.style.marginTop=t),null!=(e=this.el)&&(e.style.opacity=this.props.opacity),this.o.isShowInit?this.show():this.hide()},e.prototype.show=function(){return this.isShown||null==this.el?void 0:(this.el.style.display="block",this.isShown=!0)},e.prototype.hide=function(){return this.isShown!==!1&&null!=this.el?(this.el.style.display="none",this.isShown=!1):void 0},e.prototype.draw=function(){return this.bit.setProp({x:this.origin.x,y:this.origin.y,stroke:this.props.stroke,"stroke-width":this.props.strokeWidth,"stroke-opacity":this.props.strokeOpacity,"stroke-dasharray":this.props.strokeDasharray,"stroke-dashoffset":this.props.strokeDashoffset,"stroke-linecap":this.props.strokeLinecap,fill:this.props.fill,"fill-opacity":this.props.fillOpacity,radius:this.props.radius,radiusX:this.props.radiusX,radiusY:this.props.radiusY,points:this.props.points,transform:this.calcTransform()}),this.bit.draw(),this.drawEl()},e.prototype.drawEl=function(){return null==this.el?!0:(this.isPropChanged("opacity")&&(this.el.style.opacity=this.props.opacity),!this.isForeign&&(this.isPropChanged("x")&&(this.el.style.left=this.props.x),this.isPropChanged("y")&&(this.el.style.top=this.props.y),this.isNeedsTransform())?this.h.setPrefixedStyle(this.el,"transform",this.fillTransform()):void 0)},e.prototype.fillTransform=function(){return"translate("+this.props.shiftX+", "+this.props.shiftY+")"},e.prototype.isNeedsTransform=function(){var t,e;return t=this.isPropChanged("shiftX"),e=this.isPropChanged("shiftY"),t||e},e.prototype.isPropChanged=function(t){var e;return null==(e=this.lastSet)[t]&&(e[t]={}),this.lastSet[t].value!==this.props[t]?(this.lastSet[t].value=this.props[t],!0):!1},e.prototype.calcTransform=function(){return this.props.transform="rotate("+this.props.angle+","+this.origin.x+","+this.origin.y+")"},e.prototype.calcSize=function(){var t,e,r,i;if(!this.o.size){switch(r=this.calcMaxRadius(),e=this.deltas.strokeWidth,i=null!=e?Math.max(Math.abs(e.start),Math.abs(e.end)):this.props.strokeWidth,this.props.size=2*r+2*i,"function"==typeof(t=this.props.easing).toLowerCase?t.toLowerCase():void 0){case"elastic.out":case"elastic.inout":this.props.size*=1.25;break;case"back.out":case"back.inout":this.props.size*=1.1}return this.props.size*=this.bit.ratio,this.props.size+=2*this.props.sizeGap,this.props.center=this.props.size/2}},e.prototype.calcMaxRadius=function(){var t,e,r;return t=this.getRadiusSize({key:"radius"}),e=this.getRadiusSize({key:"radiusX",fallback:t}),r=this.getRadiusSize({key:"radiusY",fallback:t}),Math.max(e,r)},e.prototype.getRadiusSize=function(t){return null!=this.deltas[t.key]?Math.max(Math.abs(this.deltas[t.key].end),Math.abs(this.deltas[t.key].start)):null!=this.props[t.key]?parseFloat(this.props[t.key]):t.fallback||0},e.prototype.createBit=function(){var t;return t=o.getBit(this.o.type||this.type),this.bit=new t({ctx:this.ctx,el:this.o.bit,isDrawLess:!0}),this.isForeign||this.isForeignBit?this.el=this.bit.el:void 0},e.prototype.setProgress=function(t,e){return e||(this.show(),"function"==typeof this.onUpdate&&this.onUpdate(t)),this.progress=0>t||!t?0:t>1?1:t,this.calcCurrentProps(t),this.calcOrigin(),this.draw(t),this},e.prototype.calcCurrentProps=function(t){var e,r,i,s,n,o,p,a,h,u,l,c,d,f;for(a=Object.keys(this.deltas),h=a.length,l=[];h--;)p=a[h],f=this.deltas[p],l.push(this.props[p]=function(){var p,a,h;switch(f.type){case"array":for(c=[],h=f.delta,n=p=0,a=h.length;a>p;n=++p)o=h[n],i=f.start[n].value+o.value*this.progress,c.push({value:i,unit:o.unit});return c;case"number":return f.start+f.delta*t;case"unit":return d=f.end.unit,""+(f.start.value+f.delta*t)+d;case"color":return u=parseInt(f.start.r+f.delta.r*t,10),s=parseInt(f.start.g+f.delta.g*t,10),r=parseInt(f.start.b+f.delta.b*t,10),e=parseInt(f.start.a+f.delta.a*t,10),"rgba("+u+","+s+","+r+","+e+")"}}.call(this));return l},e.prototype.calcOrigin=function(){return this.origin=this.o.ctx?{x:parseFloat(this.props.x),y:parseFloat(this.props.y)}:{x:this.props.center,y:this.props.center}},e.prototype.extendDefaults=function(t){var e,r,i,s,n,o,p,a,h,u,l,c,d,f;for(null==this.props&&(this.props={}),i=t||this.defaults,null==t&&(this.deltas={}),p=Object.keys(i),a=p.length;a--;)if(o=p[a],r=i[o],null!=(c=this.skipProps)?!c[o]:!0)if(t?(this.o[o]=r,u=r,delete this.deltas[o]):u=null!=this.o[o]?this.o[o]:r,this.isDelta(u))this.isSkipDelta||this.getDelta(o,u);else if("string"==typeof u&&u.match(/stagger/)&&(u=this.h.parseStagger(u,this.index)),"string"==typeof u&&u.match(/rand/)&&(u=this.h.parseRand(u)),this.props[o]=u,"radius"===o&&(null==this.o.radiusX&&(this.props.radiusX=u),null==this.o.radiusY&&(this.props.radiusY=u)),this.h.posPropsMap[o]&&(this.props[o]=this.h.parseUnit(this.props[o]).string),this.h.strokeDashPropsMap[o]){switch(l=this.props[o],f=[],typeof l){case"number":f.push(this.h.parseUnit(l));break;case"string":for(e=this.props[o].split(" "),s=n=0,h=e.length;h>n;s=++n)d=e[s],f.push(this.h.parseUnit(d))}this.props[o]=f}return this.onUpdate=this.props.onUpdate},e.prototype.isDelta=function(t){var e;return e=null!=t&&"object"==typeof t,e=e&&!t.unit,!(!e||this.h.isArray(t)||p.isDOM(t))},e.prototype.getDelta=function(t,e){var r,i;return"x"!==t&&"y"!==t||this.o.ctx||this.h.warn("Consider to animate shiftX/shiftY properties instead of x/y, as it would be much more performant",e),(null!=(i=this.skipPropsDelta)?i[t]:0)?void 0:(r=this.h.parseDelta(t,e,this.defaults[t]),null!=r.type&&(this.deltas[t]=r),this.props[t]=r.start)},e.prototype.mergeThenOptions=function(t,e){var r,i,s,n,o,p,a,h,u;p={};for(n in t)u=t[n],p[n]=!this.h.tweenOptionMap[n]&&!this.h.callbacksMap[n]||"duration"===n?u:"easing"===n?"":void 0;for(o=Object.keys(e),i=o.length;i--;)n=o[i],r=e[n],s="function"==typeof r,this.h.tweenOptionMap[n]||"object"==typeof r||s?p[n]=null!=r?r:t[n]:(a=t[n],null==a&&(a=this.defaults[n]),"radiusX"!==n&&"radiusY"!==n||null!=a||(a=t.radius),"object"==typeof a&&null!=a&&(h=Object.keys(a),a=a[h[0]]),null!=r&&(p[n]={},p[n][a]=r));return p},e.prototype.then=function(t){var e,r,i,s,o,p;if(null!=t&&Object.keys(t)){for(o=this.mergeThenOptions(this.history[this.history.length-1],t),this.history.push(o),i=Object.keys(this.h.tweenOptionMap),e=i.length,p={};e--;)p[i[e]]=o[i[e]];return r=this,s=r.history.length,function(e){return function(i){return p.onUpdate=function(t){return e.setProgress(t)},p.onStart=function(){var t;return null!=(t=e.props.onStart)?t.apply(e):void 0},p.onComplete=function(){var t;return null!=(t=e.props.onComplete)?t.apply(e):void 0},p.onFirstUpdate=function(){return r.tuneOptions(r.history[this.index])},p.isChained=!t.delay,e.timeline.append(new n(p))}}(this)(s),this}},e.prototype.tuneOptions=function(t){return this.extendDefaults(t),this.calcSize(),this.setElStyles()},e.prototype.createTween=function(){var t;return t=this,this.createTimeline(),this.timeline=new i({onComplete:function(t){return function(){var e;return!t.o.isShowEnd&&t.hide(),null!=(e=t.props.onComplete)?e.apply(t):void 0}}(this)}),this.timeline.add(this.tween),!this.o.isRunLess&&this.startTween()},e.prototype.createTimeline=function(){return this.tween=new n({duration:this.props.duration,delay:this.props.delay,repeat:this.props.repeat,yoyo:this.props.yoyo,easing:this.props.easing,onUpdate:function(t){return function(e){return t.setProgress(e)}}(this),onStart:function(t){return function(){var e;return t.show(),null!=(e=t.props.onStart)?e.apply(t):void 0}}(this),onFirstUpdateBackward:function(t){return function(){return t.history.length>1&&t.tuneOptions(t.history[0])}}(this),onReverseComplete:function(t){return function(){var e;return!t.o.isShowInit&&t.hide(),null!=(e=t.props.onReverseComplete)?e.apply(t):void 0}}(this)})},e.prototype.run=function(t){var e,r,i;if(this.runCount++,t&&Object.keys(t).length){if(this.history.length>1)for(r=Object.keys(t),i=r.length;i--;)e=r[i],(p.callbacksMap[e]||p.tweenOptionMap[e])&&(p.warn('the property "'+e+'" property can not be overridden on run with "then" chain yet'),delete t[e]);this.transformHistory(t),this.tuneNewOption(t),t=this.h.cloneObj(this.o),this.h.extend(t,this.defaults),this.history[0]=t,!this.o.isDrawLess&&this.setProgress(0,!0)}else this.tuneNewOption(this.history[0]);return this.startTween()},e.prototype.transformHistory=function(t){var e,r,i,s,n,o,p,a,h,u,l,c;for(n=Object.keys(t),r=-1,o=n.length,e=this.history.length,a=[];++r<o;)s=n[r],i=0,a.push(function(){var r;for(r=[];++i<e;){if(p=this.history[i][s],
"object"==typeof p){l=Object.keys(p),h=p[l[0]],delete this.history[i][s][l[0]],"object"==typeof t[s]?(c=Object.keys(t[s]),u=t[s][c[0]],this.history[i][s][u]=h):this.history[i][s][t[s]]=h;break}r.push(this.history[i][s]=t[s])}return r}.call(this));return a},e.prototype.tuneNewOption=function(t,e){return null!=t&&null!=t.type&&t.type!==(this.o.type||this.type)&&(this.h.warn("Sorry, type can not be changed on run"),delete t.type),null!=t&&Object.keys(t).length?(this.extendDefaults(t),this.resetTimeline(),!e&&this.timeline.recalcDuration(),this.calcSize(),!e&&this.setElStyles()):void 0},e.prototype.startTween=function(){return setTimeout(function(t){return function(){var e;return null!=(e=t.timeline)?e.start():void 0}}(this),1)},e.prototype.resetTimeline=function(){var t,e,r,i,s,n;for(n={},s=Object.keys(this.h.tweenOptionMap),t=e=0,i=s.length;i>e;t=++e)r=s[t],n[r]=this.props[r];return n.onStart=this.props.onStart,n.onComplete=this.props.onComplete,this.tween.setProp(n)},e.prototype.getBitLength=function(){return this.props.bitLength=this.bit.getLength(),this.props.bitLength},e}(o.map.bit),e.exports=s},{"./h":6,"./shapes/bitsMap":12,"./tween/timeline":24,"./tween/tween":25}],24:[function(t,e,r){var i,s,n,o=[].slice;s=t("../h"),n=t("./tweener"),i=function(){function t(t){this.o=null!=t?t:{},this.vars(),this._extendDefaults()}return t.prototype.state="stop",t.prototype.defaults={repeat:0,delay:0},t.prototype.vars=function(){return this.timelines=[],this.props={time:0,repeatTime:0,shiftedRepeatTime:0},this.loop=s.bind(this.loop,this),this.onUpdate=this.o.onUpdate},t.prototype.add=function(){var t;return t=1<=arguments.length?o.call(arguments,0):[],this.pushTimelineArray(t),this},t.prototype.pushTimelineArray=function(t){var e,r,i,n,o;for(n=[],e=r=0,i=t.length;i>r;e=++r)o=t[e],n.push(s.isArray(o)?this.pushTimelineArray(o):this.pushTimeline(o));return n},t.prototype._extendDefaults=function(){var t,e,r,i;e=this.defaults,r=[];for(t in e)i=e[t],r.push(this.props[t]=null!=this.o[t]?this.o[t]:i);return r},t.prototype.setProp=function(t){var e,r;for(e in t)r=t[e],this.props[e]=r;return this.recalcDuration()},t.prototype.pushTimeline=function(e,r){return e.timeline instanceof t&&(e=e.timeline),null!=r&&e.setProp({shiftTime:r}),this.timelines.push(e),this._recalcTimelineDuration(e)},t.prototype.remove=function(t){var e;return e=this.timelines.indexOf(t),-1!==e?this.timelines.splice(e,1):void 0},t.prototype.append=function(){var t,e,r,i,n;for(i=1<=arguments.length?o.call(arguments,0):[],t=e=0,r=i.length;r>e;t=++e)n=i[t],s.isArray(n)?this._appendTimelineArray(n):this.appendTimeline(n,this.timelines.length);return this},t.prototype._appendTimelineArray=function(t){var e,r,i,s;for(e=t.length,s=this.props.repeatTime-this.props.delay,r=this.timelines.length,i=[];e--;)i.push(this.appendTimeline(t[e],r,s));return i},t.prototype.appendTimeline=function(t,e,r){var i;return i=null!=r?r:this.props.time,i+=t.props.shiftTime||0,t.index=e,this.pushTimeline(t,i)},t.prototype.recalcDuration=function(){var t,e;for(t=this.timelines.length,this.props.time=0,this.props.repeatTime=0,this.props.shiftedRepeatTime=0,e=[];t--;)e.push(this._recalcTimelineDuration(this.timelines[t]));return e},t.prototype._recalcTimelineDuration=function(t){var e;return e=t.props.repeatTime+(t.props.shiftTime||0),this.props.time=Math.max(e,this.props.time),this.props.repeatTime=(this.props.time+this.props.delay)*(this.props.repeat+1),this.props.shiftedRepeatTime=this.props.repeatTime+(this.props.shiftTime||0),this.props.shiftedRepeatTime-=this.props.delay},t.prototype.update=function(t,e){return t>this.props.endTime&&(t=this.props.endTime),t===this.props.endTime&&this.isCompleted?!0:(this._updateTimelines(t,e),this._checkCallbacks(t))},t.prototype._updateTimelines=function(t,e){var r,i,s,n,o;if(n=this.props.startTime-this.props.delay,r=(t-n)%(this.props.delay+this.props.time),o=t===this.props.endTime?this.props.endTime:n+r>=this.props.startTime?t>=this.props.endTime?this.props.endTime:n+r:t>this.props.startTime+this.props.time?this.props.startTime+this.props.time:null,null!=o)for(i=-1,s=this.timelines.length-1;i++<s;)null==e&&(e=t>(this._previousUpdateTime||0)),this.timelines[i].update(o,e);return this._previousUpdateTime=t},t.prototype._checkCallbacks=function(t){var e,r,i;if(this.prevTime!==t)return(!this.prevTime||this.isCompleted&&!this.isStarted)&&(null!=(e=this.o.onStart)&&e.apply(this),this.isStarted=!0,this.isCompleted=!1),t>=this.props.startTime&&t<this.props.endTime&&"function"==typeof this.onUpdate&&this.onUpdate((t-this.props.startTime)/this.props.repeatTime),this.prevTime>t&&t<=this.props.startTime&&null!=(r=this.o.onReverseComplete)&&r.apply(this),this.prevTime=t,t!==this.props.endTime||this.isCompleted?void 0:("function"==typeof this.onUpdate&&this.onUpdate(1),null!=(i=this.o.onComplete)&&i.apply(this),this.isCompleted=!0,this.isStarted=!1,!0)},t.prototype.start=function(t){return this.setStartTime(t),!t&&(n.add(this),this.state="play"),this},t.prototype.pause=function(){return this.removeFromTweener(),this.state="pause",this},t.prototype.stop=function(){return this.removeFromTweener(),this.setProgress(0),this.state="stop",this},t.prototype.restart=function(){return this.stop(),this.start()},t.prototype.removeFromTweener=function(){return n.remove(this),this},t.prototype.setStartTime=function(t){return this.getDimentions(t),this.startTimelines(this.props.startTime)},t.prototype.startTimelines=function(t){var e,r;for(e=this.timelines.length,null==t&&(t=this.props.startTime),r=[];e--;)r.push(this.timelines[e].start(t));return r},t.prototype.setProgress=function(t){return null==this.props.startTime&&this.setStartTime(),t=s.clamp(t,0,1),this.update(this.props.startTime+t*this.props.repeatTime)},t.prototype.getDimentions=function(t){return null==t&&(t=performance.now()),this.props.startTime=t+this.props.delay+(this.props.shiftTime||0),this.props.endTime=this.props.startTime+this.props.shiftedRepeatTime,this.props.endTime-=this.props.shiftTime||0},t}(),e.exports=i},{"../h":6,"./tweener":26}],25:[function(t,e,r){var i,s,n,o;n=t("../h"),o=t("./tweener"),s=t("../easing/easing"),i=function(){function t(t){this.o=null!=t?t:{},this.extendDefaults(),this.vars()}return t.prototype.defaults={duration:600,delay:0,repeat:0,yoyo:!1,easing:"Linear.None",onStart:null,onComplete:null,onReverseComplete:null,onFirstUpdate:null,onUpdate:null,onFirstUpdateBackward:null,isChained:!1},t.prototype.vars=function(){return this.h=n,this.progress=0,this.prevTime=0,this.calcDimentions()},t.prototype.calcDimentions=function(){return this.props.time=this.props.duration+this.props.delay,this.props.repeatTime=this.props.time*(this.props.repeat+1)},t.prototype.extendDefaults=function(){var t,e,r;this.props={},e=this.defaults;for(t in e)r=e[t],this.props[t]=null!=this.o[t]?this.o[t]:r;return this.props.easing=s.parseEasing(this.o.easing||this.defaults.easing),this.onUpdate=this.props.onUpdate},t.prototype.start=function(t){return this.isCompleted=!1,this.isStarted=!1,null==t&&(t=performance.now()),this.props.startTime=t+this.props.delay+(this.props.shiftTime||0),this.props.endTime=this.props.startTime+this.props.repeatTime-this.props.delay,this},t.prototype.update=function(t,e){var r,i,s,n,o;return t>=this.props.startTime&&t<this.props.endTime?(this.isOnReverseComplete=!1,this.isCompleted=!1,this.isFirstUpdate||(null!=(r=this.props.onFirstUpdate)&&r.apply(this),this.isFirstUpdate=!0),this.isStarted||(null!=(i=this.props.onStart)&&i.apply(this),this.isStarted=!0),this._updateInActiveArea(t),t<this.prevTime&&!this.isFirstUpdateBackward&&(null!=(s=this.props.onFirstUpdateBackward)&&s.apply(this),this.isFirstUpdateBackward=!0)):(t>=this.props.endTime&&!this.isCompleted&&this._complete(),t>this.props.endTime&&(this.isFirstUpdate=!1),t>this.props.endTime&&(this.isFirstUpdateBackward=!1)),t<this.prevTime&&t<=this.props.startTime&&(this.isFirstUpdateBackward||(null!=(n=this.props.onFirstUpdateBackward)&&n.apply(this),this.isFirstUpdateBackward=!0),e?this._complete():this.isOnReverseComplete||(this.isOnReverseComplete=!0,this.setProgress(0,!this.props.isChained),null!=(o=this.props.onReverseComplete)&&o.apply(this)),this.isFirstUpdate=!1),this.prevTime=t,this.isCompleted},t.prototype._complete=function(){var t;return this.setProgress(1),null!=(t=this.props.onComplete)&&t.apply(this),this.isCompleted=!0,this.isStarted=!1,this.isOnReverseComplete=!1},t.prototype._updateInActiveArea=function(t){var e,r,i,s,n;return n=this.props.startTime-this.props.delay,r=(t-n)%(this.props.delay+this.props.duration),e=Math.floor((t-n)/(this.props.delay+this.props.duration)),n+r>=this.props.startTime?(i=(t-this.props.startTime)%(this.props.delay+this.props.duration),s=i/this.props.duration,this.setProgress(this.props.yoyo?e%2===0?s:1-(1===s?0:s):s)):this.setProgress(this.prevTime<t?1:0)},t.prototype.setProgress=function(t,e){return null==e&&(e=!0),this.progress=t,this.easedProgress=this.props.easing(this.progress),this.props.prevEasedProgress!==this.easedProgress&&e&&"function"==typeof this.onUpdate&&this.onUpdate(this.easedProgress,this.progress),this.props.prevEasedProgress=this.easedProgress},t.prototype.setProp=function(t,e){var r,i;if("object"==typeof t)for(r in t)i=t[r],this.props[r]=i,"easing"===r&&(this.props.easing=s.parseEasing(this.props.easing));else"string"==typeof t&&("easing"===t?this.props.easing=s.parseEasing(e):this.props[t]=e);return this.calcDimentions()},t.prototype.run=function(t){return this.start(t),!t&&o.add(this),this},t.prototype.stop=function(){return this.pause(),this.setProgress(0),this},t.prototype.pause=function(){return this._removeFromTweener(),this},t.prototype._removeFromTweener=function(){return o.remove(this),this},t}(),e.exports=i},{"../easing/easing":3,"../h":6,"./tweener":26}],26:[function(t,e,r){var i,s,n,o;t("../polyfills/raf"),t("../polyfills/performance"),s=t("../h"),n=0,i=function(){function t(){this.vars()}return t.prototype.vars=function(){return this.tweens=[],this.loop=s.bind(this.loop,this)},t.prototype.loop=function(){var t;return this.isRunning?(t=performance.now(),this.update(t),this.tweens.length?(requestAnimationFrame(this.loop),this):this.isRunning=!1):!1},t.prototype.startLoop=function(){return this.isRunning?void 0:(this.isRunning=!0,requestAnimationFrame(this.loop))},t.prototype.stopLoop=function(){return this.isRunning=!1},t.prototype.update=function(t){var e;for(n=this.tweens.length,e=[];n--;)e.push(this.tweens[n].update(t)===!0?this.remove(n):void 0);return e},t.prototype.add=function(t){return this.tweens.push(t),this.startLoop()},t.prototype.removeAll=function(){return this.tweens.length=0},t.prototype.remove=function(t){var e;return e="number"==typeof t?t:this.tweens.indexOf(t),-1!==e?this.tweens.splice(e,1):void 0},t}(),o=new i,e.exports=o},{"../h":6,"../polyfills/performance":9,"../polyfills/raf":10}],27:[function(e,r,i){!function(){var e;return e=function(){function t(t){this.o=null!=t?t:{},window.isAnyResizeEventInited||(this.vars(),this.redefineProto())}return t.prototype.vars=function(){return window.isAnyResizeEventInited=!0,this.allowedProtos=[HTMLDivElement,HTMLFormElement,HTMLLinkElement,HTMLBodyElement,HTMLParagraphElement,HTMLFieldSetElement,HTMLLegendElement,HTMLLabelElement,HTMLButtonElement,HTMLUListElement,HTMLOListElement,HTMLLIElement,HTMLHeadingElement,HTMLQuoteElement,HTMLPreElement,HTMLBRElement,HTMLFontElement,HTMLHRElement,HTMLModElement,HTMLParamElement,HTMLMapElement,HTMLTableElement,HTMLTableCaptionElement,HTMLImageElement,HTMLTableCellElement,HTMLSelectElement,HTMLInputElement,HTMLTextAreaElement,HTMLAnchorElement,HTMLObjectElement,HTMLTableColElement,HTMLTableSectionElement,HTMLTableRowElement],this.timerElements={img:1,textarea:1,input:1,embed:1,object:1,svg:1,canvas:1,tr:1,tbody:1,thead:1,tfoot:1,a:1,select:1,option:1,optgroup:1,dl:1,dt:1,br:1,basefont:1,font:1,col:1,iframe:1}},t.prototype.redefineProto=function(){var t,e,r,i;return e=this,i=function(){var i,s,n,o;for(n=this.allowedProtos,o=[],t=i=0,s=n.length;s>i;t=++i)r=n[t],null!=r.prototype&&o.push(function(t){var r,i;return r=t.prototype.addEventListener||t.prototype.attachEvent,function(r){var i;return i=function(){var t;return(this!==window||this!==document)&&(t="onresize"===arguments[0]&&!this.isAnyResizeEventInited,t&&e.handleResize({args:arguments,that:this})),r.apply(this,arguments)},t.prototype.addEventListener?t.prototype.addEventListener=i:t.prototype.attachEvent?t.prototype.attachEvent=i:void 0}(r),i=t.prototype.removeEventListener||t.prototype.detachEvent,function(e){var r;return r=function(){return this.isAnyResizeEventInited=!1,this.iframe&&this.removeChild(this.iframe),e.apply(this,arguments)},t.prototype.removeEventListener?t.prototype.removeEventListener=r:t.prototype.detachEvent?t.prototype.detachEvent=wrappedListener:void 0}(i)}(r));return o}.call(this)},t.prototype.handleResize=function(t){var e,r,i,s,n,o,p;return r=t.that,this.timerElements[r.tagName.toLowerCase()]?this.initTimer(r):(i=document.createElement("iframe"),r.appendChild(i),i.style.width="100%",i.style.height="100%",i.style.position="absolute",i.style.zIndex=-999,i.style.opacity=0,i.style.top=0,i.style.left=0,e=window.getComputedStyle?getComputedStyle(r):r.currentStyle,n=""===r.style.position,o="static"===e.position&&n,s=""===e.position&&""===r.style.position,(o||s)&&(r.style.position="relative"),null!=(p=i.contentWindow)&&(p.onresize=function(t){return function(e){return t.dispatchEvent(r)}}(this)),r.iframe=i),r.isAnyResizeEventInited=!0},t.prototype.initTimer=function(t){var e,r;return r=0,e=0,this.interval=setInterval(function(i){return function(){var s,n;return n=t.offsetWidth,s=t.offsetHeight,n!==r||s!==e?(i.dispatchEvent(t),r=n,e=s):void 0}}(this),this.o.interval||62.5)},t.prototype.dispatchEvent=function(t){var e;return document.createEvent?(e=document.createEvent("HTMLEvents"),e.initEvent("onresize",!1,!1),t.dispatchEvent(e)):document.createEventObject?(e=document.createEventObject(),t.fireEvent("onresize",e)):!1},t.prototype.destroy=function(){var t,e,r,i,s,n,o;for(clearInterval(this.interval),this.interval=null,window.isAnyResizeEventInited=!1,e=this,n=this.allowedProtos,o=[],t=r=0,i=n.length;i>r;t=++r)s=n[t],null!=s.prototype&&o.push(function(t){var e;return e=t.prototype.addEventListener||t.prototype.attachEvent,t.prototype.addEventListener?t.prototype.addEventListener=Element.prototype.addEventListener:t.prototype.attachEvent&&(t.prototype.attachEvent=Element.prototype.attachEvent),t.prototype.removeEventListener?t.prototype.removeEventListener=Element.prototype.removeEventListener:t.prototype.detachEvent?t.prototype.detachEvent=Element.prototype.detachEvent:void 0}(s));return o},t}(),"function"==typeof t&&t.amd?t("any-resize-event",[],function(){return new e}):"object"==typeof r&&"object"==typeof r.exports?r.exports=new e:("undefined"!=typeof window&&null!==window&&(window.AnyResizeEvent=e),"undefined"!=typeof window&&null!==window?window.anyResizeEvent=new e:void 0)}()},{}]},{},[7])(7)});
 
 /**
 * segment - A little JavaScript class (without dependencies) to draw and animate SVG path strokes
 * @version v1.0.8
 * @link https://github.com/lmgonzalves/segment
 * @license MIT
 */

(function(){
    var lastTime = 0;
    var vendors = ['ms', 'moz', 'webkit', 'o'];
    for(var x = 0; x < vendors.length && !window.requestAnimationFrame; ++x){
        window.requestAnimationFrame = window[vendors[x]+'RequestAnimationFrame'];
        window.cancelAnimationFrame = window[vendors[x]+'CancelAnimationFrame']
        || window[vendors[x]+'CancelRequestAnimationFrame'];
    }

    if(!window.requestAnimationFrame)
        window.requestAnimationFrame = function(callback, element){
            var currTime = new Date().getTime();
            var timeToCall = Math.max(0, 16 - (currTime - lastTime));
            var id = window.setTimeout(function(){ callback(currTime + timeToCall); },
                timeToCall);
            lastTime = currTime + timeToCall;
            return id;
        };

    if(!window.cancelAnimationFrame)
        window.cancelAnimationFrame = function(id){
            clearTimeout(id);
        };
}());

function Segment(path, begin, end, circular){
    this.path = path;
    this.length = path.getTotalLength();
    this.path.style.strokeDashoffset = this.length * 2;
    this.begin = typeof begin !== 'undefined' ? this.valueOf(begin) : 0;
    this.end = typeof end !== 'undefined' ? this.valueOf(end) : this.length;
    this.circular = circular !== 'undefined' ? circular : false;
    this.timer = null;
    this.animationTimer = null;
    this.draw(this.begin, this.end, 0, {circular: this.circular});
}

Segment.prototype = {
    draw: function(begin, end, duration, options){
        this.circular = options && options.hasOwnProperty('circular') ? options.circular : false;
        if(duration){
            var delay = options && options.hasOwnProperty('delay') ? parseFloat(options.delay) * 1000 : 0,
                easing = options && options.hasOwnProperty('easing') ? options.easing : null,
                callback = options && options.hasOwnProperty('callback') ? options.callback : null,
                that = this;

            this.stop();
            if(delay){
                delete options.delay;
                this.timer = setTimeout(function(){
                    that.draw(begin, end, duration, options);
                }, delay);
                return this.timer;
            }

            var startTime = new Date(),
                initBegin = this.begin,
                initEnd = this.end,
                finalBegin = this.valueOf(begin),
                finalEnd = this.valueOf(end);

            (function calc(){
                var now = new Date(),
                    elapsed = (now-startTime)/1000,
                    time = (elapsed/parseFloat(duration)),
                    t = time;

                if(typeof easing === 'function'){
                    t = easing(t);
                }

                if(time > 1){
                    t = 1;
                }else{
                    that.animationTimer = window.requestAnimationFrame(calc);
                }

                that.begin = initBegin + (finalBegin - initBegin) * t;
                that.end = initEnd + (finalEnd - initEnd) * t;

                that.begin = that.begin < 0 && !that.circular ? 0 : that.begin;
                that.begin = that.begin > that.length && !that.circular ? that.length : that.begin;
                that.end = that.end < 0 && !that.circular ? 0 : that.end;
                that.end = that.end > that.length && !that.circular ? that.length : that.end;

                if(that.end - that.begin <= that.length && that.end - that.begin > 0){
                    that.draw(that.begin, that.end, 0, {circular: that.circular});
                }else{
                    if(that.circular && that.end - that.begin > that.length){
                        that.draw(0, that.length, 0, {circular: that.circular});
                    }else{
                        that.draw(that.begin + (that.end - that.begin), that.end - (that.end - that.begin), 0, {circular: that.circular});
                    }
                }

                if(time > 1 && typeof callback === 'function'){
                    return callback.call(that);
                }
            })();
        }else{
            this.path.style.strokeDasharray = this.strokeDasharray(begin, end);
        }
    },

    strokeDasharray: function(begin, end){
        this.begin = this.valueOf(begin);
        this.end = this.valueOf(end);
        if(this.circular){
            var division = this.begin > this.end || (this.begin < 0 && this.begin < this.length * -1)
                ? parseInt(this.begin / parseInt(this.length)) : parseInt(this.end / parseInt(this.length));
            if(division !== 0){
                this.begin = this.begin - this.length * division;
                this.end = this.end - this.length * division;
            }
        }
        if(this.end > this.length){
            var plus = this.end - this.length;
            return [this.length, this.length, plus, this.begin - plus, this.end - this.begin].join(' ');
        }
        if(this.begin < 0){
            var minus = this.length + this.begin;
            if(this.end < 0){
                return [this.length, this.length + this.begin, this.end - this.begin, minus - this.end, this.end - this.begin, this.length].join(' ');
            }else{
                return [this.length, this.length + this.begin, this.end - this.begin, minus - this.end, this.length].join(' ');
            }
        }
        return [this.length, this.length + this.begin, this.end - this.begin].join(' ');
    },

    valueOf: function(input){
        var val = parseFloat(input);
        if(typeof input === 'string' || input instanceof String){
            if(~input.indexOf('%')){
                var arr;
                if(~input.indexOf('+')){
                    arr = input.split('+');
                    val = this.percent(arr[0]) + parseFloat(arr[1]);
                }else if(~input.indexOf('-')){
                    arr = input.split('-');
                    if(arr.length === 3){
                        val = -this.percent(arr[1]) - parseFloat(arr[2]);
                    }else{
                        val = arr[0] ? this.percent(arr[0]) - parseFloat(arr[1]) : -this.percent(arr[1]);
                    }
                }else{
                    val = this.percent(input);
                }
            }
        }
        return val;
    },

    stop: function(){
        window.cancelAnimationFrame(this.animationTimer);
        this.animationTimer = null;
        clearTimeout(this.timer);
        this.timer = null;
    },

    percent: function(value){
        return parseFloat(value) / 100 * this.length;
    }
}; 
 /* http://keith-wood.name/svg.html
   SVG for jQuery v1.5.0.
   Written by Keith Wood (kbwood{at}iinet.com.au) August 2007.
   Available under the MIT (http://keith-wood.name/licence.html) license. 
   Please attribute the author if you use it. */
(function($){function SVGManager(){this._settings=[];this._extensions=[];this.regional=[];this.regional['']={errorLoadingText:'Error loading'};this.local=this.regional[''];this._uuid=new Date().getTime();this._ie=!!window.ActiveXObject}$.extend(SVGManager.prototype,{markerClassName:'hasSVG',propertyName:'svgwrapper',svgNS:'http://www.w3.org/2000/svg',xlinkNS:'http://www.w3.org/1999/xlink',_wrapperClass:SVGWrapper,_attrNames:{class_:'class',in_:'in',alignmentBaseline:'alignment-baseline',baselineShift:'baseline-shift',clipPath:'clip-path',clipRule:'clip-rule',colorInterpolation:'color-interpolation',colorInterpolationFilters:'color-interpolation-filters',colorRendering:'color-rendering',dominantBaseline:'dominant-baseline',enableBackground:'enable-background',fillOpacity:'fill-opacity',fillRule:'fill-rule',floodColor:'flood-color',floodOpacity:'flood-opacity',fontFamily:'font-family',fontSize:'font-size',fontSizeAdjust:'font-size-adjust',fontStretch:'font-stretch',fontStyle:'font-style',fontVariant:'font-variant',fontWeight:'font-weight',glyphOrientationHorizontal:'glyph-orientation-horizontal',glyphOrientationVertical:'glyph-orientation-vertical',horizAdvX:'horiz-adv-x',horizOriginX:'horiz-origin-x',imageRendering:'image-rendering',letterSpacing:'letter-spacing',lightingColor:'lighting-color',markerEnd:'marker-end',markerMid:'marker-mid',markerStart:'marker-start',stopColor:'stop-color',stopOpacity:'stop-opacity',strikethroughPosition:'strikethrough-position',strikethroughThickness:'strikethrough-thickness',strokeDashArray:'stroke-dasharray',strokeDashOffset:'stroke-dashoffset',strokeLineCap:'stroke-linecap',strokeLineJoin:'stroke-linejoin',strokeMiterLimit:'stroke-miterlimit',strokeOpacity:'stroke-opacity',strokeWidth:'stroke-width',textAnchor:'text-anchor',textDecoration:'text-decoration',textRendering:'text-rendering',underlinePosition:'underline-position',underlineThickness:'underline-thickness',vertAdvY:'vert-adv-y',vertOriginY:'vert-origin-y',wordSpacing:'word-spacing',writingMode:'writing-mode'},_attachSVG:function(a,b){var c=(a.namespaceURI===this.svgNS?a:null);var a=(c?null:a);if($(a||c).hasClass(this.markerClassName)){return}if(typeof b==='string'){b={loadURL:b}}else if(typeof b==='function'){b={onLoad:b}}$(a||c).addClass(this.markerClassName);try{if(!c){c=document.createElementNS(this.svgNS,'svg');c.setAttribute('version','1.1');if(a.clientWidth>0){c.setAttribute('width',a.clientWidth)}if(a.clientHeight>0){c.setAttribute('height',a.clientHeight)}a.appendChild(c)}this._afterLoad(a,c,b||{})}catch(e){$(a).html('<p>SVG is not supported natively on this browser</p>')}},_afterLoad:function(a,b,c){var c=c||this._settings[a.id];this._settings[a?a.id:'']=null;var d=new this._wrapperClass(b,a);$.data(a||b,$.svg.propertyName,d);try{if(c.loadURL){d.load(c.loadURL,c)}if(c.settings){d.configure(c.settings)}if(c.onLoad&&!c.loadURL){c.onLoad.apply(a||b,[d])}}catch(e){alert(e)}},_getSVG:function(a){return $(a).data(this.propertyName)},_destroySVG:function(a){a=$(a);if(!a.hasClass(this.markerClassName)){return}a.removeClass(this.markerClassName).removeData(this.propertyName);if(a[0].namespaceURI!==this.svgNS){a.empty()}},addExtension:function(a,b){this._extensions.push([a,b])},isSVGElem:function(a){return(a.nodeType===1&&a.namespaceURI===$.svg.svgNS)}});function SVGWrapper(a,b){this._svg=a;this._container=b;for(var i=0;i<$.svg._extensions.length;i++){var c=$.svg._extensions[i];this[c[0]]=new c[1](this)}}$.extend(SVGWrapper.prototype,{width:function(){return(this._container?this._container.clientWidth:this._svg.width)},height:function(){return(this._container?this._container.clientHeight:this._svg.height)},root:function(){return this._svg},configure:function(a,b,c){if(!a.nodeName){c=b;b=a;a=this._svg}if(c){for(var i=a.attributes.length-1;i>=0;i--){var d=a.attributes.item(i);if(!(d.nodeName==='onload'||d.nodeName==='version'||d.nodeName.substring(0,5)==='xmlns')){a.attributes.removeNamedItem(d.nodeName)}}}for(var e in b){a.setAttribute($.svg._attrNames[e]||e,b[e])}return this},getElementById:function(a){return this._svg.ownerDocument.getElementById(a)},change:function(a,b){if(a){for(var c in b){if(b[c]==null){a.removeAttribute($.svg._attrNames[c]||c)}else{a.setAttribute($.svg._attrNames[c]||c,b[c])}}}return this},_args:function(b,c,d){c.splice(0,0,'parent');c.splice(c.length,0,'settings');var e={};var f=0;if(b[0]!=null&&b[0].jquery){b[0]=b[0][0]}if(b[0]!=null&&!(typeof b[0]==='object'&&b[0].nodeName)){e['parent']=null;f=1}for(var i=0;i<b.length;i++){e[c[i+f]]=b[i]}if(d){$.each(d,function(i,a){if(typeof e[a]==='object'){e.settings=e[a];e[a]=null}})}return e},title:function(a,b,c){var d=this._args(arguments,['text']);var e=this._makeNode(d.parent,'title',d.settings||{});e.appendChild(this._svg.ownerDocument.createTextNode(d.text));return e},describe:function(a,b,c){var d=this._args(arguments,['text']);var e=this._makeNode(d.parent,'desc',d.settings||{});e.appendChild(this._svg.ownerDocument.createTextNode(d.text));return e},defs:function(a,b,c){var d=this._args(arguments,['id'],['id']);return this._makeNode(d.parent,'defs',$.extend((d.id?{id:d.id}:{}),d.settings||{}))},symbol:function(a,b,c,d,e,f,g){var h=this._args(arguments,['id','x1','y1','width','height']);return this._makeNode(h.parent,'symbol',$.extend({id:h.id,viewBox:h.x1+' '+h.y1+' '+h.width+' '+h.height},h.settings||{}))},marker:function(a,b,c,d,e,f,g,h){var i=this._args(arguments,['id','refX','refY','mWidth','mHeight','orient'],['orient']);return this._makeNode(i.parent,'marker',$.extend({id:i.id,refX:i.refX,refY:i.refY,markerWidth:i.mWidth,markerHeight:i.mHeight,orient:i.orient||'auto'},i.settings||{}))},style:function(a,b,c){var d=this._args(arguments,['styles']);var e=this._makeNode(d.parent,'style',$.extend({type:'text/css'},d.settings||{}));e.appendChild(this._svg.ownerDocument.createTextNode(d.styles));return e},script:function(a,b,c,d){var e=this._args(arguments,['script','type'],['type']);var f=this._makeNode(e.parent,'script',$.extend({type:e.type||'text/javascript'},e.settings||{}));f.appendChild(this._svg.ownerDocument.createTextNode(e.script));if($.svg._ie){$.globalEval(e.script)}return f},linearGradient:function(a,b,c,d,e,f,g,h){var i=this._args(arguments,['id','stops','x1','y1','x2','y2'],['x1']);var j=$.extend({id:i.id},(i.x1!=null?{x1:i.x1,y1:i.y1,x2:i.x2,y2:i.y2}:{}));return this._gradient(i.parent,'linearGradient',$.extend(j,i.settings||{}),i.stops)},radialGradient:function(a,b,c,d,e,r,f,g,h){var i=this._args(arguments,['id','stops','cx','cy','r','fx','fy'],['cx']);var j=$.extend({id:i.id},(i.cx!=null?{cx:i.cx,cy:i.cy,r:i.r,fx:i.fx,fy:i.fy}:{}));return this._gradient(i.parent,'radialGradient',$.extend(j,i.settings||{}),i.stops)},_gradient:function(a,b,c,d){var e=this._makeNode(a,b,c);for(var i=0;i<d.length;i++){var f=d[i];this._makeNode(e,'stop',$.extend({offset:f[0],stopColor:f[1]},(f[2]!=null?{stopOpacity:f[2]}:{})))}return e},pattern:function(a,b,x,y,c,d,e,f,g,h,i){var j=this._args(arguments,['id','x','y','width','height','vx','vy','vwidth','vheight'],['vx']);var k=$.extend({id:j.id,x:j.x,y:j.y,width:j.width,height:j.height},(j.vx!=null?{viewBox:j.vx+' '+j.vy+' '+j.vwidth+' '+j.vheight}:{}));return this._makeNode(j.parent,'pattern',$.extend(k,j.settings||{}))},clipPath:function(a,b,c,d){var e=this._args(arguments,['id','units']);e.units=e.units||'userSpaceOnUse';return this._makeNode(e.parent,'clipPath',$.extend({id:e.id,clipPathUnits:e.units},e.settings||{}))},mask:function(a,b,x,y,c,d,e){var f=this._args(arguments,['id','x','y','width','height']);return this._makeNode(f.parent,'mask',$.extend({id:f.id,x:f.x,y:f.y,width:f.width,height:f.height},f.settings||{}))},createPath:function(){return new SVGPath()},createText:function(){return new SVGText()},svg:function(a,x,y,b,c,d,e,f,g,h){var i=this._args(arguments,['x','y','width','height','vx','vy','vwidth','vheight'],['vx']);var j=$.extend({x:i.x,y:i.y,width:i.width,height:i.height},(i.vx!=null?{viewBox:i.vx+' '+i.vy+' '+i.vwidth+' '+i.vheight}:{}));return this._makeNode(i.parent,'svg',$.extend(j,i.settings||{}))},group:function(a,b,c){var d=this._args(arguments,['id'],['id']);return this._makeNode(d.parent,'g',$.extend({id:d.id},d.settings||{}))},use:function(a,x,y,b,c,d,e){var f=this._args(arguments,['x','y','width','height','ref']);if(typeof f.x==='string'){f.ref=f.x;f.settings=f.y;f.x=f.y=f.width=f.height=null}var g=this._makeNode(f.parent,'use',$.extend({x:f.x,y:f.y,width:f.width,height:f.height},f.settings||{}));g.setAttributeNS($.svg.xlinkNS,'href',f.ref);return g},link:function(a,b,c){var d=this._args(arguments,['ref']);var e=this._makeNode(d.parent,'a',d.settings);e.setAttributeNS($.svg.xlinkNS,'href',d.ref);return e},image:function(a,x,y,b,c,d,e){var f=this._args(arguments,['x','y','width','height','ref']);var g=this._makeNode(f.parent,'image',$.extend({x:f.x,y:f.y,width:f.width,height:f.height},f.settings||{}));g.setAttributeNS($.svg.xlinkNS,'href',f.ref);return g},path:function(a,b,c){var d=this._args(arguments,['path']);return this._makeNode(d.parent,'path',$.extend({d:(d.path.path?d.path.path():d.path)},d.settings||{}))},rect:function(a,x,y,b,c,d,e,f){var g=this._args(arguments,['x','y','width','height','rx','ry'],['rx']);return this._makeNode(g.parent,'rect',$.extend({x:g.x,y:g.y,width:g.width,height:g.height},(g.rx?{rx:g.rx,ry:g.ry}:{}),g.settings||{}))},circle:function(a,b,c,r,d){var e=this._args(arguments,['cx','cy','r']);return this._makeNode(e.parent,'circle',$.extend({cx:e.cx,cy:e.cy,r:e.r},e.settings||{}))},ellipse:function(a,b,c,d,e,f){var g=this._args(arguments,['cx','cy','rx','ry']);return this._makeNode(g.parent,'ellipse',$.extend({cx:g.cx,cy:g.cy,rx:g.rx,ry:g.ry},g.settings||{}))},line:function(a,b,c,d,e,f){var g=this._args(arguments,['x1','y1','x2','y2']);return this._makeNode(g.parent,'line',$.extend({x1:g.x1,y1:g.y1,x2:g.x2,y2:g.y2},g.settings||{}))},polyline:function(a,b,c){var d=this._args(arguments,['points']);return this._poly(d.parent,'polyline',d.points,d.settings)},polygon:function(a,b,c){var d=this._args(arguments,['points']);return this._poly(d.parent,'polygon',d.points,d.settings)},_poly:function(a,b,c,d){var e='';for(var i=0;i<c.length;i++){e+=c[i].join()+' '}return this._makeNode(a,b,$.extend({points:$.trim(e)},d||{}))},text:function(a,x,y,b,c){var d=this._args(arguments,['x','y','value']);if(typeof d.x==='string'&&arguments.length<4){d.value=d.x;d.settings=d.y;d.x=d.y=null}return this._text(d.parent,'text',d.value,$.extend({x:(d.x&&$.isArray(d.x)?d.x.join(' '):d.x),y:(d.y&&$.isArray(d.y)?d.y.join(' '):d.y)},d.settings||{}))},textpath:function(a,b,c,d){var e=this._args(arguments,['path','value']);var f=this._text(e.parent,'textPath',e.value,e.settings||{});f.setAttributeNS($.svg.xlinkNS,'href',e.path);return f},_text:function(a,b,c,d){var e=this._makeNode(a,b,d);if(typeof c==='string'){e.appendChild(e.ownerDocument.createTextNode(c))}else{for(var i=0;i<c._parts.length;i++){var f=c._parts[i];if(f[0]==='tspan'){var g=this._makeNode(e,f[0],f[2]);g.appendChild(e.ownerDocument.createTextNode(f[1]));e.appendChild(g)}else if(f[0]==='tref'){var g=this._makeNode(e,f[0],f[2]);g.setAttributeNS($.svg.xlinkNS,'href',f[1]);e.appendChild(g)}else if(f[0]==='textpath'){var h=$.extend({},f[2]);h.href=null;var g=this._makeNode(e,f[0],h);g.setAttributeNS($.svg.xlinkNS,'href',f[2].href);g.appendChild(e.ownerDocument.createTextNode(f[1]));e.appendChild(g)}else{e.appendChild(e.ownerDocument.createTextNode(f[1]))}}}return e},other:function(a,b,c){var d=this._args(arguments,['name']);return this._makeNode(d.parent,d.name,d.settings||{})},_makeNode:function(a,b,c){a=a||this._svg;var d=this._svg.ownerDocument.createElementNS($.svg.svgNS,b);for(var b in c){var e=c[b];if(e!=null&&(typeof e!=='string'||e!=='')){d.setAttribute($.svg._attrNames[b]||b,e)}}a.appendChild(d);return d},add:function(b,c){var d=this._args((arguments.length===1?[null,b]:arguments),['node']);var f=this;d.parent=d.parent||this._svg;d.node=(d.node.jquery?d.node:$(d.node));try{d.parent.appendChild(d.node.cloneNode(true))}catch(e){d.node.each(function(){var a=f._cloneAsSVG(this);if(a){d.parent.appendChild(a)}})}return this},clone:function(b,c){var d=this;var e=this._args((arguments.length===1?[null,b]:arguments),['node']);e.parent=e.parent||this._svg;e.node=(e.node.jquery?e.node:$(e.node));var f=[];e.node.each(function(){var a=d._cloneAsSVG(this);if(a){a.id='';e.parent.appendChild(a);f.push(a)}});return f},_cloneAsSVG:function(a){var b=null;if(a.nodeType===1){b=this._svg.ownerDocument.createElementNS($.svg.svgNS,this._checkName(a.nodeName));for(var i=0;i<a.attributes.length;i++){var c=a.attributes.item(i);if(c.nodeName!=='xmlns'&&c.nodeValue){if(c.prefix==='xlink'){b.setAttributeNS($.svg.xlinkNS,c.localName||c.baseName,c.nodeValue)}else{b.setAttribute(this._checkName(c.nodeName),c.nodeValue)}}}for(var i=0;i<a.childNodes.length;i++){var d=this._cloneAsSVG(a.childNodes[i]);if(d){b.appendChild(d)}}}else if(a.nodeType===3){if($.trim(a.nodeValue)){b=this._svg.ownerDocument.createTextNode(a.nodeValue)}}else if(a.nodeType===4){if($.trim(a.nodeValue)){try{b=this._svg.ownerDocument.createCDATASection(a.nodeValue)}catch(e){b=this._svg.ownerDocument.createTextNode(a.nodeValue.replace(/&/g,'&amp;').replace(/</g,'&lt;').replace(/>/g,'&gt;'))}}}return b},_checkName:function(a){a=(a.substring(0,1)>='A'&&a.substring(0,1)<='Z'?a.toLowerCase():a);return(a.substring(0,4)==='svg:'?a.substring(4):a)},load:function(l,m){m=(typeof m==='boolean'?{addTo:m}:(typeof m==='function'?{onLoad:m}:(typeof m==='string'?{parent:m}:(typeof m==='object'&&m.nodeName?{parent:m}:(typeof m==='object'&&m.jquery?{parent:m}:m||{})))));if(!m.parent&&!m.addTo){this.clear(false)}var n=[this._svg.getAttribute('width'),this._svg.getAttribute('height')];var o=this;var p=function(a){a=$.svg.local.errorLoadingText+': '+a;if(m.onLoad){m.onLoad.apply(o._container||o._svg,[o,a])}else{o.text(null,10,20,a)}};var q=function(a){var b=new ActiveXObject('Microsoft.XMLDOM');b.validateOnParse=false;b.resolveExternals=false;b.async=false;b.loadXML(a);if(b.parseError.errorCode!==0){p(b.parseError.reason);return null}return b};var r=function(b){if(!b){return}if(b.documentElement.nodeName!=='svg'){var c=b.getElementsByTagName('parsererror');var d=(c.length?c[0].getElementsByTagName('div'):[]);p(!c.length?'???':(d.length?d[0]:c[0]).firstChild.nodeValue);return}var f=(m.parent?$(m.parent)[0]:o._svg);var g={};for(var i=0;i<b.documentElement.attributes.length;i++){var h=b.documentElement.attributes.item(i);if(!(h.nodeName==='version'||h.nodeName.substring(0,5)==='xmlns')){g[h.nodeName]=h.nodeValue}}o.configure(f,g,!m.parent);var j=b.documentElement.childNodes;for(var i=0;i<j.length;i++){try{f.appendChild(o._svg.ownerDocument.importNode(j[i],true));if(j[i].nodeName==='script'){$.globalEval(j[i].textContent)}}catch(e){o.add(f,j[i])}}if(!m.keepRelativeLinks&&l.match('/')){var k=l.replace(/\/[^\/]*$/,'/');$('*',f).each(function(){var a=$(this).attr('xlink:href');if(a&&!a.match(/(^[a-z][-a-z0-9+.]*:.*$)|(^\/.*$)|(^#.*$)/i)){$(this).attr('xlink:href',k+a)}})}if(!m.changeSize){o.configure(f,{width:n[0],height:n[1]})}if(m.onLoad){m.onLoad.apply(o._container||o._svg,[o])}};if(l.match('<svg')){try{r(new DOMParser().parseFromString(l,'text/xml'))}catch(e){p(e)}}else{$.ajax({url:l,dataType:'xml',success:function(a){r(a)},error:function(a,b,c){p(b+(c?' '+c.message:''))}})}return this},remove:function(a){a=(a.jquery?a[0]:a);a.parentNode.removeChild(a);return this},clear:function(a){if(a){this.configure({},true)}while(this._svg.firstChild){this._svg.removeChild(this._svg.firstChild)}return this},toSVG:function(a){a=a||this._svg;return(typeof XMLSerializer==='undefined'?this._toSVG(a):new XMLSerializer().serializeToString(a))},_toSVG:function(a){var b='';if(!a){return b}if(a.nodeType===3){b=a.nodeValue}else if(a.nodeType===4){b='<![CDATA['+a.nodeValue+']]>'}else{b='<'+a.nodeName;if(a.attributes){for(var i=0;i<a.attributes.length;i++){var c=a.attributes.item(i);if(!($.trim(c.nodeValue)===''||c.nodeValue.match(/^\[object/)||c.nodeValue.match(/^function/))){b+=' '+(c.namespaceURI===$.svg.xlinkNS?'xlink:':'')+c.nodeName+'="'+c.nodeValue+'"'}}}if(a.firstChild){b+='>';var d=a.firstChild;while(d){b+=this._toSVG(d);d=d.nextSibling}b+='</'+a.nodeName+'>'}else{b+='/>'}}return b}});function SVGPath(){this._path=''}$.extend(SVGPath.prototype,{reset:function(){this._path='';return this},move:function(x,y,a){a=($.isArray(x)?y:a);return this._coords((a?'m':'M'),x,y)},line:function(x,y,a){a=($.isArray(x)?y:a);return this._coords((a?'l':'L'),x,y)},horiz:function(x,a){this._path+=(a?'h':'H')+($.isArray(x)?x.join(' '):x);return this},vert:function(y,a){this._path+=(a?'v':'V')+($.isArray(y)?y.join(' '):y);return this},curveC:function(a,b,c,d,x,y,e){e=($.isArray(a)?b:e);return this._coords((e?'c':'C'),a,b,c,d,x,y)},smoothC:function(a,b,x,y,c){c=($.isArray(a)?b:c);return this._coords((c?'s':'S'),a,b,x,y)},curveQ:function(a,b,x,y,c){c=($.isArray(a)?b:c);return this._coords((c?'q':'Q'),a,b,x,y)},smoothQ:function(x,y,a){a=($.isArray(x)?y:a);return this._coords((a?'t':'T'),x,y)},_coords:function(a,b,c,d,e,f,g){if($.isArray(b)){for(var i=0;i<b.length;i++){var h=b[i];this._path+=(i===0?a:' ')+h[0]+','+h[1]+(h.length<4?'':' '+h[2]+','+h[3]+(h.length<6?'':' '+h[4]+','+h[5]))}}else{this._path+=a+b+','+c+(d==null?'':' '+d+','+e+(f==null?'':' '+f+','+g))}return this},arc:function(a,b,c,d,e,x,y,f){f=($.isArray(a)?b:f);this._path+=(f?'a':'A');if($.isArray(a)){for(var i=0;i<a.length;i++){var g=a[i];this._path+=(i===0?'':' ')+g[0]+','+g[1]+' '+g[2]+' '+(g[3]?'1':'0')+','+(g[4]?'1':'0')+' '+g[5]+','+g[6]}}else{this._path+=a+','+b+' '+c+' '+(d?'1':'0')+','+(e?'1':'0')+' '+x+','+y}return this},close:function(){this._path+='z';return this},path:function(){return this._path}});SVGPath.prototype.moveTo=SVGPath.prototype.move;SVGPath.prototype.lineTo=SVGPath.prototype.line;SVGPath.prototype.horizTo=SVGPath.prototype.horiz;SVGPath.prototype.vertTo=SVGPath.prototype.vert;SVGPath.prototype.curveCTo=SVGPath.prototype.curveC;SVGPath.prototype.smoothCTo=SVGPath.prototype.smoothC;SVGPath.prototype.curveQTo=SVGPath.prototype.curveQ;SVGPath.prototype.smoothQTo=SVGPath.prototype.smoothQ;SVGPath.prototype.arcTo=SVGPath.prototype.arc;function SVGText(){this._parts=[]}$.extend(SVGText.prototype,{reset:function(){this._parts=[];return this},string:function(a){this._parts.push(['text',a]);return this},span:function(a,b){this._parts.push(['tspan',a,b]);return this},ref:function(a,b){this._parts.push(['tref',a,b]);return this},path:function(a,b,c){this._parts.push(['textpath',b,$.extend({href:a},c||{})]);return this}});$.fn.svg=function(a){var b=Array.prototype.slice.call(arguments,1);if(typeof a==='string'&&a==='get'){return $.svg['_'+a+'SVG'].apply($.svg,[this[0]].concat(b))}return this.each(function(){if(typeof a==='string'){$.svg['_'+a+'SVG'].apply($.svg,[this].concat(b))}else{$.svg._attachSVG(this,a||{})}})};$.svg=new SVGManager()})(jQuery); 
 /* http://keith-wood.name/svg.html
   SVG attribute animations for jQuery v1.5.0.
   Written by Keith Wood (kbwood{at}iinet.com.au) June 2008.
   Available under the MIT (http://keith-wood.name/licence.html) license. 
   Please attribute the author if you use it. */
(function($){var h=parseInt($.fn.jquery,10)>1||parseInt($.fn.jquery.substring(2),10)>5;$.each(['x','y','width','height','rx','ry','cx','cy','r','x1','y1','x2','y2','stroke-width','strokeWidth','opacity','fill-opacity','fillOpacity','stroke-opacity','strokeOpacity','stroke-dashoffset','strokeDashOffset','font-size','fontSize','font-weight','fontWeight','letter-spacing','letterSpacing','word-spacing','wordSpacing'],function(i,f){var g=f.charAt(0).toUpperCase()+f.substr(1);if($.cssProps){$.cssProps['svg'+g]=$.cssProps['svg-'+f]=f}$.fx.step['svg'+g]=$.fx.step['svg-'+f]=function(a){var b=$.svg._attrNames[f]||f;var c=a.elem.attributes.getNamedItem(b);if(!a.set){a.start=(c?parseFloat(c.nodeValue):0);var d=(h?'':a.options.curAnim['svg'+g]||a.options.curAnim['svg-'+f]);if(/^[+-]=/.exec(d)){a.end=a.start+parseFloat(d.replace(/=/,''))}$(a.elem).css(b,'');a.set=true}var e=(a.pos*(a.end-a.start)+a.start)+(a.unit==='%'?'%':'');(c?c.nodeValue=e:a.elem.setAttribute(b,e))}});$.fx.step['svgStrokeDashArray']=$.fx.step['svg-strokeDashArray']=$.fx.step['svgStroke-dasharray']=$.fx.step['svg-stroke-dasharray']=function(a){var b=a.elem.attributes.getNamedItem('stroke-dasharray');if(!a.set){a.start=parseDashArray(b?b.nodeValue:'');var c=(h?a.end:a.options.curAnim['svgStrokeDashArray']||a.options.curAnim['svg-strokeDashArray']||a.options.curAnim['svgStroke-dasharray']||a.options.curAnim['svg-stroke-dasharray']);a.end=parseDashArray(c);if(/^[+-]=/.exec(c)){c=c.split(/[, ]+/);if(c.length%2===1){var d=c.length;for(var i=0;i<d;i++){c.push(c[i])}}for(var i=0;i<c.length;i++){if(/^[+-]=/.exec(c[i])){a.end[i]=a.start[i]+parseFloat(c[i].replace(/=/,''))}}}a.set=true}var e=$.map(a.start,function(n,i){return(a.pos*(a.end[i]-n)+n)}).join(',');(b?b.nodeValue=e:a.elem.setAttribute('stroke-dasharray',e))};function parseDashArray(a){var b=a.split(/[, ]+/);for(var i=0;i<b.length;i++){b[i]=parseFloat(b[i]);if(isNaN(b[i])){b[i]=0}}if(b.length%2===1){var c=b.length;for(var i=0;i<c;i++){b.push(b[i])}}return b}$.fx.step['svgViewBox']=$.fx.step['svg-viewBox']=function(a){var b=a.elem.attributes.getNamedItem('viewBox');if(!a.set){a.start=parseViewBox(b?b.nodeValue:'');var c=(h?a.end:a.options.curAnim['svgViewBox']||a.options.curAnim['svg-viewBox']);a.end=parseViewBox(c);if(/^[+-]=/.exec(c)){c=c.split(/[, ]+/);while(c.length<4){c.push('0')}for(var i=0;i<4;i++){if(/^[+-]=/.exec(c[i])){a.end[i]=a.start[i]+parseFloat(c[i].replace(/=/,''))}}}a.set=true}var d=$.map(a.start,function(n,i){return(a.pos*(a.end[i]-n)+n)}).join(' ');(b?b.nodeValue=d:a.elem.setAttribute('viewBox',d))};function parseViewBox(a){var b=a.split(/[, ]+/);for(var i=0;i<b.length;i++){b[i]=parseFloat(b[i]);if(isNaN(b[i])){b[i]=0}}while(b.length<4){b.push(0)}return b}$.fx.step['svgTransform']=$.fx.step['svg-transform']=function(a){var b=a.elem.attributes.getNamedItem('transform');if(!a.set){a.start=parseTransform(b?b.nodeValue:'');a.end=parseTransform(a.end,a.start);a.set=true}var c='';for(var i=0;i<a.end.order.length;i++){switch(a.end.order.charAt(i)){case't':c+=' translate('+(a.pos*(a.end.translateX-a.start.translateX)+a.start.translateX)+','+(a.pos*(a.end.translateY-a.start.translateY)+a.start.translateY)+')';break;case's':c+=' scale('+(a.pos*(a.end.scaleX-a.start.scaleX)+a.start.scaleX)+','+(a.pos*(a.end.scaleY-a.start.scaleY)+a.start.scaleY)+')';break;case'r':c+=' rotate('+(a.pos*(a.end.rotateA-a.start.rotateA)+a.start.rotateA)+','+(a.pos*(a.end.rotateX-a.start.rotateX)+a.start.rotateX)+','+(a.pos*(a.end.rotateY-a.start.rotateY)+a.start.rotateY)+')';break;case'x':c+=' skewX('+(a.pos*(a.end.skewX-a.start.skewX)+a.start.skewX)+')';case'y':c+=' skewY('+(a.pos*(a.end.skewY-a.start.skewY)+a.start.skewY)+')';break;case'm':var d='';for(var j=0;j<6;j++){d+=','+(a.pos*(a.end.matrix[j]-a.start.matrix[j])+a.start.matrix[j])}c+=' matrix('+d.substr(1)+')';break}}(b?b.nodeValue=c:a.elem.setAttribute('transform',c))};function parseTransform(a,b){a=a||'';if(typeof a==='object'){a=a.nodeValue}var c=$.extend({translateX:0,translateY:0,scaleX:0,scaleY:0,rotateA:0,rotateX:0,rotateY:0,skewX:0,skewY:0,matrix:[0,0,0,0,0,0]},b||{});c.order='';var d=/([a-zA-Z]+)\(\s*([+-]?[\d\.]+)\s*(?:[\s,]\s*([+-]?[\d\.]+)\s*(?:[\s,]\s*([+-]?[\d\.]+)\s*(?:[\s,]\s*([+-]?[\d\.]+)\s*[\s,]\s*([+-]?[\d\.]+)\s*[\s,]\s*([+-]?[\d\.]+)\s*)?)?)?\)/g;var e=d.exec(a);while(e){switch(e[1]){case'translate':c.order+='t';c.translateX=parseFloat(e[2]);c.translateY=(e[3]?parseFloat(e[3]):0);break;case'scale':c.order+='s';c.scaleX=parseFloat(e[2]);c.scaleY=(e[3]?parseFloat(e[3]):c.scaleX);break;case'rotate':c.order+='r';c.rotateA=parseFloat(e[2]);c.rotateX=(e[3]?parseFloat(e[3]):0);c.rotateY=(e[4]?parseFloat(e[4]):0);break;case'skewX':c.order+='x';c.skewX=parseFloat(e[2]);break;case'skewY':c.order+='y';c.skewY=parseFloat(e[2]);break;case'matrix':c.order+='m';c.matrix=[parseFloat(e[2]),parseFloat(e[3]),parseFloat(e[4]),parseFloat(e[5]),parseFloat(e[6]),parseFloat(e[7])];break}e=d.exec(a)}if(c.order==='m'&&Math.abs(c.matrix[0])===Math.abs(c.matrix[3])&&c.matrix[1]!==0&&Math.abs(c.matrix[1])===Math.abs(c.matrix[2])){var f=Math.acos(c.matrix[0])*180/Math.PI;f=(c.matrix[1]<0?360-f:f);c.order='rt';c.rotateA=f;c.rotateX=c.rotateY=0;c.translateX=c.matrix[4];c.translateY=c.matrix[5]}return c}$.each(['fill','stroke'],function(i,e){var f=e.charAt(0).toUpperCase()+e.substr(1);$.fx.step['svg'+f]=$.fx.step['svg-'+e]=function(a){if(!a.set){a.start=$.svg._getColour(a.elem,e);var b=(a.end==='none');a.end=(b?$.svg._getColour(a.elem.parentNode,e):$.svg._getRGB(a.end));a.end[3]=b;$(a.elem).css(e,'');a.set=true}var c='rgb('+[Math.min(Math.max(parseInt((a.pos*(a.end[0]-a.start[0]))+a.start[0],10),0),255),Math.min(Math.max(parseInt((a.pos*(a.end[1]-a.start[1]))+a.start[1],10),0),255),Math.min(Math.max(parseInt((a.pos*(a.end[2]-a.start[2]))+a.start[2],10),0),255)].join(',')+')';c=(a.end[3]&&a.state===1?'none':c);var d=a.elem.attributes.getNamedItem(e);(d?d.nodeValue=c:a.elem.setAttribute(e,c))}});$.svg._getColour=function(a,b){a=$(a);var c;do{c=a.attr(b)||a.css(b);if((c!==''&&c!=='none')||a.hasClass($.svg.markerClassName)){break}}while(a=a.parent());return $.svg._getRGB(c)};$.svg._getRGB=function(a){var b;if(a&&a.constructor===Array){return(a.length===3||a.length===4?a:k['none'])}if(b=/^rgb\(\s*([0-9]{1,3})\s*,\s*([0-9]{1,3})\s*,\s*([0-9]{1,3})\s*\)$/.exec(a)){return[parseInt(b[1],10),parseInt(b[2],10),parseInt(b[3],10)]}if(b=/^rgb\(\s*([0-9]+(?:\.[0-9]+)?)\%\s*,\s*([0-9]+(?:\.[0-9]+)?)\%\s*,\s*([0-9]+(?:\.[0-9]+)?)\%\s*\)$/.exec(a)){return[parseFloat(b[1])*2.55,parseFloat(b[2])*2.55,parseFloat(b[3])*2.55]}if(b=/^#([a-fA-F0-9]{2})([a-fA-F0-9]{2})([a-fA-F0-9]{2})$/.exec(a)){return[parseInt(b[1],16),parseInt(b[2],16),parseInt(b[3],16)]}if(b=/^#([a-fA-F0-9])([a-fA-F0-9])([a-fA-F0-9])$/.exec(a)){return[parseInt(b[1]+b[1],16),parseInt(b[2]+b[2],16),parseInt(b[3]+b[3],16)]}return k[$.trim(a).toLowerCase()]||k['none']};var k={'':[255,255,255,1],none:[255,255,255,1],aliceblue:[240,248,255],antiquewhite:[250,235,215],aqua:[0,255,255],aquamarine:[127,255,212],azure:[240,255,255],beige:[245,245,220],bisque:[255,228,196],black:[0,0,0],blanchedalmond:[255,235,205],blue:[0,0,255],blueviolet:[138,43,226],brown:[165,42,42],burlywood:[222,184,135],cadetblue:[95,158,160],chartreuse:[127,255,0],chocolate:[210,105,30],coral:[255,127,80],cornflowerblue:[100,149,237],cornsilk:[255,248,220],crimson:[220,20,60],cyan:[0,255,255],darkblue:[0,0,139],darkcyan:[0,139,139],darkgoldenrod:[184,134,11],darkgray:[169,169,169],darkgreen:[0,100,0],darkgrey:[169,169,169],darkkhaki:[189,183,107],darkmagenta:[139,0,139],darkolivegreen:[85,107,47],darkorange:[255,140,0],darkorchid:[153,50,204],darkred:[139,0,0],darksalmon:[233,150,122],darkseagreen:[143,188,143],darkslateblue:[72,61,139],darkslategray:[47,79,79],darkslategrey:[47,79,79],darkturquoise:[0,206,209],darkviolet:[148,0,211],deeppink:[255,20,147],deepskyblue:[0,191,255],dimgray:[105,105,105],dimgrey:[105,105,105],dodgerblue:[30,144,255],firebrick:[178,34,34],floralwhite:[255,250,240],forestgreen:[34,139,34],fuchsia:[255,0,255],gainsboro:[220,220,220],ghostwhite:[248,248,255],gold:[255,215,0],goldenrod:[218,165,32],gray:[128,128,128],grey:[128,128,128],green:[0,128,0],greenyellow:[173,255,47],honeydew:[240,255,240],hotpink:[255,105,180],indianred:[205,92,92],indigo:[75,0,130],ivory:[255,255,240],khaki:[240,230,140],lavender:[230,230,250],lavenderblush:[255,240,245],lawngreen:[124,252,0],lemonchiffon:[255,250,205],lightblue:[173,216,230],lightcoral:[240,128,128],lightcyan:[224,255,255],lightgoldenrodyellow:[250,250,210],lightgray:[211,211,211],lightgreen:[144,238,144],lightgrey:[211,211,211],lightpink:[255,182,193],lightsalmon:[255,160,122],lightseagreen:[32,178,170],lightskyblue:[135,206,250],lightslategray:[119,136,153],lightslategrey:[119,136,153],lightsteelblue:[176,196,222],lightyellow:[255,255,224],lime:[0,255,0],limegreen:[50,205,50],linen:[250,240,230],magenta:[255,0,255],maroon:[128,0,0],mediumaquamarine:[102,205,170],mediumblue:[0,0,205],mediumorchid:[186,85,211],mediumpurple:[147,112,219],mediumseagreen:[60,179,113],mediumslateblue:[123,104,238],mediumspringgreen:[0,250,154],mediumturquoise:[72,209,204],mediumvioletred:[199,21,133],midnightblue:[25,25,112],mintcream:[245,255,250],mistyrose:[255,228,225],moccasin:[255,228,181],navajowhite:[255,222,173],navy:[0,0,128],oldlace:[253,245,230],olive:[128,128,0],olivedrab:[107,142,35],orange:[255,165,0],orangered:[255,69,0],orchid:[218,112,214],palegoldenrod:[238,232,170],palegreen:[152,251,152],paleturquoise:[175,238,238],palevioletred:[219,112,147],papayawhip:[255,239,213],peachpuff:[255,218,185],peru:[205,133,63],pink:[255,192,203],plum:[221,160,221],powderblue:[176,224,230],purple:[128,0,128],red:[255,0,0],rosybrown:[188,143,143],royalblue:[65,105,225],saddlebrown:[139,69,19],salmon:[250,128,114],sandybrown:[244,164,96],seagreen:[46,139,87],seashell:[255,245,238],sienna:[160,82,45],silver:[192,192,192],skyblue:[135,206,235],slateblue:[106,90,205],slategray:[112,128,144],slategrey:[112,128,144],snow:[255,250,250],springgreen:[0,255,127],steelblue:[70,130,180],tan:[210,180,140],teal:[0,128,128],thistle:[216,191,216],tomato:[255,99,71],turquoise:[64,224,208],violet:[238,130,238],wheat:[245,222,179],white:[255,255,255],whitesmoke:[245,245,245],yellow:[255,255,0],yellowgreen:[154,205,50]}})(jQuery); 
 /**
 * ILFATE PHP ENGINE
 * @autor Ilya Rubinchik ilfate@gmail.com
 * 2012
 */

Ajax = function() {
  
  this.callBack = [];
  
  /**
   * ajax request that will return json data
   */
  this.json = function(url, options)
  {
    if(!options) options = {};
    options.url = url;
    options.dataType = "json";
    if(!options.params) options.params = '';
    options.params += '_token=' + Ajax.getCSRF();
    this.execute(options);
  }
  /**
   * ajax request that will return json data
   */
  this.html = function(url, target, options)
  {
    if(!options) options = {};
	if(url.indexOf('?') == -1)
    {
		url = url + '?__html=true';
	} else {
		url = url + '&__html=true';
	}
    options.url = url;
    options.type = "GET";
    options.target = target;
    options.dataType = "html";

    this.execute(options);
  }
  
  
  this.execute = function(options)
  {
    var opt = {};
    if(options.url.indexOf('?') == -1)
    {
      opt.url = options.url + '?__ajax=true';
    } else {
      opt.url = options.url + '&__ajax=true';
    }
    if(options.params)
    {
      opt.url += '&' + options.params;
    }
    if(options.callBack)
    {
      this.callBack.push(options.callBack);
      var n_cb = this.callBack.length - 1;
    } else {
      var n_cb = -1;
    }
    if(options.data) {
      opt.data = options.data;
    }
    if(options.type) {
      opt.type = options.type;
    } else {
      opt.type = "POST";
    }

    if(options.dataType) {
      opt.dataType = options.dataType;
    } else {
      opt.dataType = "json";
    }
      
    var request = $.ajax(opt);

    if(options.dataType == "json") 
    {
      request.done(function(data){Ajax.doneJson(data, n_cb)});
    } else {
      request.done(function(data){Ajax.doneHtml(data, options.target, n_cb)});
    }
    
    request.fail(function(jqXHR, textStatus){Ajax.fail(jqXHR, textStatus)});
  }
  
  this.doneJson = function(data, n_cb)
  {
    F.handleEvent('ajaxonload');
    if(data.actions)
    {
      for(var key in data.actions)
      {
        if(data.args && data.args[key])
        {
          var args = data.args[key];
        } else {
          var args = [];
        }
        var handler = eval("(" + data.actions[key] + ")");
          info(handler);
        handler.call(this, args);
      }
    }
    if(n_cb >= 0)
    {
      this.callBack[n_cb](data);
    }
    F.handleEvent('ajaxloadcompleted');
  };

  this.doneHtml = function(data, target, n_cb)
  {
    F.handleEvent('ajaxonload');
    $(target).html(data);
    F.handleEvent('ajaxloadcompleted');
  };
  
  this.fail = function(jqXHR, textStatus)
  {
    Ajax.json('/jsLog', {
      data: 'data=' + textStatus + '&jqXHR=' + jqXHR
    });
    alert('Something vent wrong. Try to reload the page. If this happens again plz inform administrator.');
    setTimeout(function(){
      window.location.reload();
    }, 2500);
    info(jqXHR);
    info(textStatus);
  };
  
  this.init = function()
  {
    $("form[method='post'].ajax").each(function() {
      var form = $(this);
      if (form.attr("inited") != "inited") {
        form.bind("submit", function() {
          if(form.hasClass("inactive")) return false;
          Ajax.formLoadingStart(form);
          Ajax.json(this.action, {
            params : '__csrf=' + Ajax.getCSRF(),
            data : form.serialize(),
            callBack : function(){Ajax.formLoadingEnd(form)}
          });
          return false;
        });
        form.attr("inited", "inited");
      }
    });
    
    $("a.ajax").each(function() {
      var link = $(this);
      if (link.attr("inited") != "inited") {
        link.bind("click", function() {
          if(link.hasClass("disabled")) return false;
          Ajax.linkLoadingStart(link);
          Ajax.json(this.href, {
            params : '__csrf=' + Ajax.getCSRF(),
            callBack : function(){Ajax.linkLoadingEnd(link)}
          });
          return false;
        });
        link.attr("inited", "inited");
      }
    });
    
    $("a.hajax").each(function() {
      var link = $(this);
      if (link.attr("inited") != "inited") {
        link.bind("click", function() {
          if(link.hasClass("disabled")) return false;
          Ajax.linkLoadingStart(link);
          Ajax.html(this.href, link.data('target'), {
            params : '__csrf=' + Ajax.getCSRF(),
            callBack : function(){Ajax.linkLoadingEnd(link)}
          });
          return false;
        });
        link.attr("inited", "inited");
      }
    });
  }
  
  this.formLoadingStart = function(form)
  {
    form.addClass("inactive");
    form.find('[type=submit]').button('loading');
  }
  this.formLoadingEnd = function(form)
  {
    form.find('[type=submit]').button('reset');
    form.removeClass("inactive");
  }
  this.linkLoadingStart = function(link)
  {
    link.addClass("disabled");
  }
  this.linkLoadingEnd = function(link)
  {
    link.removeClass("disabled");
  }
  
  
  this.getCSRF = function()
  {
    if ($('#CSRF_TOKEN').length) {
      return $('#CSRF_TOKEN').val();
    }
    return $('#laravel-token').val();
  }
}

Ajax = new Ajax();

 
 window.F = new F();

function customHandler(desc,page,line,chr)  {

  var error = '<b>JAVASCRIPT '+desc+'</b><br/>'+page+'('+line+') '+(chr?':'+chr:'');
  var errId     = F.errList.push({'message':'<b>JAVASCRIPT '+desc+'</b><br/>'+page+'('+line+') '+(chr?':'+chr:''),'state':0})-1;

  return true;
}
var clientW  = 0;
var clientH  = 0;

// events


window.onload = function(event){

  F.handleEvent('onload',event);
  F.handleEvent('onafterload',event);
};


window.onresize = function(event){
  if (window.resizeTimerMainWindow) {
    clearTimeout(window.resizeTimerMainWindow);
  }
  window.resizeTimerMainWindow = setTimeout(F.startResize, 100);
};

document.onmouseup = function(event){
  if(!event){
    event = window.event;
  }
  F.handleEvent('onmouseup', event);
};

F.manageEvent('onload',"$('body').click(function(event){F.handleEvent('onmousedown', event, this);})");

/**
 * Ilfate Manager ! main js class
 *
 */
function F()
{
  this.FObjects = [];
  this.clientH = 0;
  this.clientW = 0;
  
 //info('FateManager constructed');
  
  
  this.handlers = {
  'onload' : new Array(),
  'onresize' : new Array(),
  'ajaxonload' : new Array(),
  'ajaxonresize' : new Array(),
  'ajaxloadcompleted' : new Array(),
  'onmousedown' : new Array(),
  'onmouseup' : new Array()
  };
  this.errList  = new Array();
  //for debug
  this.__curentEvent  = '';
  this.__curentRun    = '';
  
  /**
   * trigger that calls event evName 
   */
  this.handleEvent = function( evName , event, target){
    //msg = '';
    clientW = this.clientW || document.getElementsByTagName('html')[0].clientWidth;
    clientH = this.clientH || document.getElementsByTagName('html')[0].clientHeight;
    this.clientW = clientW;
    this.clientH = clientH;
    this.__curentEvent = evName;
    for(var i in this.handlers[evName] || []){
      var f = this.handlers[evName][i];
      this.__curentRun = f;
      try{
        if (typeof(f)=='function'){
          f(event, target);
        }else{
          eval(f);
        }
      }catch (e){
        customHandler(e.name+' '+e.message,e.fileName,e.lineNumber,0);
      }
      this.__curentRun   = '';
    }
    if (evName=='onload'){
      this.handleEvent('onresize');
    }
  }
  /**
   * Make code to execute on event
   */
  this.manageEvent = function(evName, toEval){
    if ('function' === typeof evName.pop){
      for (var i in evName){
        this.manageEvent(evName[i], toEval);
      }
    }else{
      if (this.handlers[evName]==undefined){
        this.addHandler(evName);
      }
      this.handlers[evName][toEval] = toEval;
    }
  }

  this.removeEvent = function(evName, toEval){
    delete this.handlers[evName];
  }
  // clears event from all binded code
  this.clearEvent = function(evName, toEval){
    msg = '';
    if (this.handlers[evName]){
      
      if (toEval){
        delete this.handlers[evName][toEval];
      }else{
        this.handlers[evName] = new Array();
      }
    }
  }
  
  this.addHandler = function(hName){
    this.handlers[hName] = new Array();
  }
  
  this.get = function(id){
    for(var key in this.FObjects)
    {
      if(this.FObjects[key].id == id)
        return this.FObjects[key];
    }
  }
  this.add = function(obj){
    this.FObjects.push(obj);
  }
  
  /** this function will be callen on each resize */
  this.startResize = function(){
    F.clientW = Math.max(document.getElementsByTagName('html')[0].clientWidth, document.body.clientWidth);
    F.clientH = Math.max(document.getElementsByTagName('html')[0].clientHeight, document.body.clientHeight);

    F.handleEvent('onresize');
    F.handleEvent('ajaxonresize');
    //delete window.resizeEvent;
  }

}

function FObject(id)
{
  this.id = id;
}


 
 /**
 * ILFATE PHP ENGINE
 * @autor Ilya Rubinchik ilfate@gmail.com
 * 2012
 */

Form = function() {
  
  this.error = function(data)
  {
    info(data.field);
    info(data.error);
    var form = $("form[inited='inited']");
    if(form.length > 0)
    {
      var el =form.find('input[name=' + data.field + ']');
      el.before('<div class="control-group error"><span class="help-inline">' + data.error + '</span></div>');
      el.prependTo(el.prev());
      el.bind('blur', function(){
        $(this).parent().before($(this));
        $(this).next().remove();
        $(this).unbind('blur');
      });
    }
  }  
}

Form = new Form();

 
 /**
 * ILFATE PHP ENGINE
 * @autor Ilya Rubinchik ilfate@gmail.com
 * 2012
 */

/**
 * Main js entrance to my engine
 */

function Action() 
{
  this.refresh = function()
  {
    document.location.reload(true);
  }
  this.redirect = function(data)
  {
	  window.location = data;
  }
}
Action = new Action();

function ilAlert(data)
{
  var html = '<div class="alert fade in"><button class="close" data-dismiss="alert" type="button"><i class="icon-off icon-white"></i></button><div id="alert-text">'+data+'</div></div>';
  $('.container.main').prepend(html);
  $('.alert').show('slow');
  $('.alert').alert();
}

function ilfate_init() {
  Ajax.init();
  $('.tip').tooltip();
  $('.tip-bottom').tooltip({placement:'bottom'});
  $('.tip-left').tooltip({placement:'left'});
  $('.tip-right').tooltip({placement:'right'});
  $('.label-stars').starred();
  $('.rounded_block').roundedBlock();
}
$(document).ready(function(){
  ilfate_init();
});

F.manageEvent('ajaxloadcompleted', ilfate_init);


function info(data)
{
  console.info(data);
}


$.fn.starred = function() 
{
  $(this).each(function(event, el){
    el = $(el);
    var value = el.data('value');
    if(el.prev().hasClass('before-stars')) return ;
    el.before('<div class="container-stars"></div>')
    .appendTo(el.prev()).before('<div class="before-stars label label-default"></div>');
    
    el.prev().css({width: el.css('width'), height : el.css('height')});
    var star_div = '<div class="star"><div class="under-star"></div><div class="img-star"></div></div>';
    el.prev().append(star_div + star_div + star_div + star_div);
	
    for(var i = 0; i < 4; i++) {
      if(value < (i+1)*25) {
        var star = el.prev().find('.star .under-star').eq(i);
        if(value < i*25) {
          star.width('0px');
        } else {
          star.width(Math.floor(((value - i*25)/25)*18) + 'px');
        }
      }
    }
	});
};

$.fn.roundedBlock = function() 
{
    $(this).each(function(event, el) {
        var text = $(el).find('.text');
        text.css('line-height', text.height() + 'px');
        $(el).bind('mouseenter', function(){
            $(this).find('.text').bounce();
        });
    });
};

$.fn.bounce = function()
{
    var n = 4;
    var intence = 2;
    var height = $(this).height();
    $(this).stop(true, true);
    for(var i = 0; i <= n; i++) {
        $(this).animate({
            'line-height':((i%2===0 ? height + (n-i)*intence : height - (n-i)*intence)+'px')
        },(80+i*5))
    }
};

function array_shuffle(a) {
    var j, x, i;
    for (i = a.length; i; i -= 1) {
        j = Math.floor(Math.random() * i);
        x = a[i - 1];
        a[i - 1] = a[j];
        a[j] = x;
    }
}

function array_rand(array)
{
    return array[Math.floor(Math.random()*array.length)];
}

// Converts from degrees to radians.
Math.radians = function(degrees) {
    return degrees * Math.PI / 180;
};

// Converts from radians to degrees.
Math.degrees = function(radians) {
    return radians * 180 / Math.PI;
}; 
 /**
 * Created by Ilya Rubinchik (ilfate) on 21/01/15.
 */

function rand(min, max)
{
    return Math.floor(Math.random()*(max-min+1)+min);
}
function info(data)
{
    console.info(data);
}
function debug(data) {
    //info(data);
    // desabled
}
function isInt(n){
    return typeof n== "number" && isFinite(n) && n%1===0;
}
function is_object(obj) {
    return typeof obj === 'object';
}

function Guess () {

}
Guess = new Guess();

$(document).ready(function() {
    if (window.guessGameFirstQuestion !== undefined) {
        Guess.Game = new Guess.Game();
        Guess.Game.init(window.guessGameFirstQuestion);
    }

});


Guess.Game = function () {
    this.color = {
        'blue' : '#428BCA',
        'green' : '#069E2D',
        'yellow' : '#FFD416',
        'red' : '#F21616',
        'orange' : '#EF8354',
        'black' : '#584D3D',
        'white' : '#FFFFFF'
    };
	this.nextQuestion = [];
	this.questionNumber = 1;
    this.queue = {};

    this.currentQuestion = {};
    this.currentTurn = 1;
    this.currentAnswer = 0;
    this.pointsAmount = 0;
    this.timerInterval = 0;

    this.nextImagesLoaded = false;
    this.nextAnimationsEnded = false;
    this.countImagesToLoad = 0;
    this.resultK = 0;
    this.resultSec = 0;
    this.correctAnswer = false;
    this.gameFinished = false;
    this.userName = false;
    this.stats = [];

    this.pointsAnimationEnabled = true;
    this.isSwitchImages = false;

    this.isTimeLimited = true;
    this.turnStartTime = {};
    this.secondsLeft = 0;

	this.init = function(firstQuestion) {
		this.currentQuestion = firstQuestion;
		$('#start-game').on({
            click : function(){ Guess.Game.startGame(); }
        });
        this.drawQuestion(firstQuestion);
	}

	this.startGame = function() {
        url = '/GuessSeries/gameStarted';
        Ajax.json(url, {});
        //$('.ability').show();
        $('.sidebar-on-start-buttons').fadeOut(1000, function(){$(this).remove()});
        $('.ability').animate({opacity:1},1000);
        $('.ability').on({
            'click':function(){Guess.Game.ability($(this))}
        })
		// animation will be here
		//$('.game-container').show();
		$('#start-game').animate({
            backgroundColor: "#529BCA",
            width:'100%'
        }, 500, function() {
            $('.game-container').fadeIn(500);
            Guess.Game.startTurn(true);
        } );
        $('#start-game').animate({
            height:'500px',
            top:'0',
            opacity:0,
            'line-height':'250px'
        }, 500, function(){
            $('#start-game').remove();
        });
		// show wait gif
	}

    this.startTurn = function(isFirstTurn) {
        this.currentAnswer = 'none';
        this.nextImagesLoaded = false;
        this.nextAnimationsEnded = false;
        var question = this.currentQuestion;

        this.restartTimer();

        if (!isFirstTurn) {
            this.drawQuestion(question);
            $('.to-delete').remove();
        }
    }
    this.switchImagesAction = function() {
        this.nextImagesLoaded = false;
        this.nextAnimationsEnded = false;
        this.isSwitchImages = false;

        switch(this.currentQuestion.type) {
            case 1:
                $('.single-picture-overlay').css('background-image', $('.single-picture').css('background-image'));
                $('.single-picture').css({'background-image': 'url("/images/game/guess/' + this.currentQuestion.picture + '")'});
                $('.single-picture-overlay').animate({opacity:0}, {'duration':1000, complete:function(){
                    $(this).css({
                        'background-image': '',
                        opacity: 1
                    });
                }});
                break;
            case 2:
                for(var i = 0; i < 4; i++) {
                    var key = '.answer.id-' + i + ' .four-images-overlay';
                    $(key).css('background-image', $('.answer.id-' + i).css('background-image'));
                    $('.answer.id-' + i).css({'background-image': 'url("/images/game/guess/' + this.currentQuestion.options[i] + '")'});
                    $(key).animate({opacity:0}, {'duration':1000, complete:function(){
                        $(this).css({
                            'background-image': '',
                            opacity: 1
                        });
                    }});
                }
                break;
        }
        setTimeout(function(){
            Guess.Game.restartTimer();
        },500);
        $('.to-delete').remove();
    }

	this.drawQuestion = function(question) {
        $('.turn-area').html('');
		switch (question.type) {
			case 1:
				var temaplate = $('#template-single-picture').html();
				break;
            case 2:
                var temaplate = $('#template-four-pictures').html();
                break;
		}
		Mustache.parse(temaplate);
        var rendered = Mustache.render(temaplate, {'question' : question});
        var obj = $(rendered);
        $('.turn-area').hide();
        $('.turn-area').append(obj);
        $('.turn-area').fadeIn(250);
        $('.answer').on({
            click : function(){ Guess.Game.sendAnswer($(this)); }
        });
        switch (question.type) {
            case 1:
                $('.answer .block').on({
                    mouseenter: function(){Guess.Game.answerButtonMouseOver($(this))},
                    mouseleave: function(){Guess.Game.answerButtonMouseOut($(this))}
                });
                break
            case 2:
                $('.answer').on({
                    mouseenter: function(){Guess.Game.answerImageMouseOver($(this))},
                    mouseleave: function(){Guess.Game.answerImageMouseOut($(this))}
                });
                break;
        }
	}

    this.ability = function(el) {
        el.off();
        var id = el.data('id');
        this.stopTimer();
        this.abilityButtonAnimation(el);

        url = '/GuessSeries/ability';
        Ajax.json(url, {
            data: 'id=' + id,
            callBack : function(data){Guess.Game.abilityResult(data)}
        });
    }

    this.sendAnswer = function(el) {
        this.stopTimer();
        var dSec =  this.checkTime();
        if (this.secondsLeft > this.currentQuestion.sec - dSec + 2) {
            this.secondsLeft = this.currentQuestion.sec - dSec;
        }
        $('.answer').off('click');
        if (!dSec) {
            return ;
        }
        var id = el.data('id');
        this.currentAnswer = id;

        url = '/GuessSeries/answer';
        Ajax.json(url, {
            data: 'id=' + id + '&seconds=' + this.secondsLeft,
            callBack : function(data){Guess.Game.result(data)}
        });
        this.animateAnswerSent();
    }

	this.result = function(data) {
        if (data.finish !== undefined) {
            this.stopGame();
            this.pointsAmount = data.points;
            this.correctAnswersNumber = data.correctAnswersNumber;
            this.correctAnswer = data.correctAnswer;
            this.userName = data.name;
            this.stats = data.stats;
            if (this.nextAnimationsEnded) {
                this.showFalseAnswerAnimation();
            } else {
                this.nextImagesLoaded = true;
            }
        } else {
            this.currentTurn++;
            //this.showQuestionResult(data.result.k, data.result.seconds);
            this.resultK = data.result.k;
            this.resultSec = data.result.seconds;
            this.currentQuestion = data.question;
            this.prepareToStartTurn(data.question);
            this.answerWasCorrectAnimations();
        }
	}
    this.abilityResult = function(data) {
        info(data);
        switch(data.id) {
            case 1:
                this.restartTimer();
                var wrong1 = data.wrong[0];
                var wrong2 = data.wrong[1];
                $('.answer.id-' + wrong1 + ', .answer.id-' + wrong2).off().animate({'opacity':0}, 300);
                break;
            case 2:
                this.currentQuestion = data.question;
                this.nextAnimationsEnded = true;
                this.pointsAnimationEnabled = false;
                this.prepareToStartTurn(data.question);
                break;
            case 3:
                this.currentQuestion = data.question;
                this.isSwitchImages = true;
                this.prepareToStartTurn(data.question);
                break;
        }

    }
    this.timeIsOut = function(data) {
        this.stopGame();
        this.pointsAmount = data.points;
        this.correctAnswer = data.correctAnswer;
        this.correctAnswersNumber = data.correctAnswersNumber;
        this.userName = data.name;
        this.stats = data.stats;
        this.showFalseAnswerAnimation();
    }
    this.stopGame = function() {
        this.gameFinished = true;
        $('.ability').each(function(){
            Guess.Game.abilityButtonAnimation($(this));
        });
    }

    this.prepareToStartTurn = function(question) {
        var urls = [];
        path = '/images/game/guess/';
        switch (question.type) {
            case 1:
                urls.push(path+question.picture);
                this.countImagesToLoad = 1;
                break;
            case 2:
                urls.push(path+question.options[0]);
                urls.push(path+question.options[1]);
                urls.push(path+question.options[2]);
                urls.push(path+question.options[3]);
                this.countImagesToLoad = 4;
                break;
        }
        var images = $('<div></div>').addClass('to-delete').hide();
        for (var i in urls) {
            images.append('<img src="' + urls[i] + '"/>');
        }
        $('body').append(images);
        images.imagesLoaded().progress(Guess.Game.imagesLoaded);
    }

    this.imagesLoaded = function() {
        Guess.Game.countImagesToLoad--;
        if (Guess.Game.countImagesToLoad == 0) {
            Guess.Game.nextImagesLoaded = true;
        }
        if (Guess.Game.nextImagesLoaded && Guess.Game.isSwitchImages) {
            Guess.Game.switchImagesAction();
        } else if (Guess.Game.nextImagesLoaded && Guess.Game.nextAnimationsEnded) {
            Guess.Game.showQuestionResult();
        }
    }
    this.answerAnimationEnded = function() {
        this.nextAnimationsEnded = true;
        if (this.nextImagesLoaded && this.nextAnimationsEnded) {
            if (this.gameFinished) {
                this.showFalseAnswerAnimation();
            } else {
                Guess.Game.showQuestionResult();
            }
        }
    }

    this.animateAnswerSent = function() {
        var correctAnswerEl = $('.answer.name.id-' + this.currentAnswer + ' .block');
        if (correctAnswerEl.length) {
            $('.answer .block').off();
            correctAnswerEl.css({'background-color':Guess.Game.color.yellow});
        }
        this.hideOtherAnswers(this.currentAnswer);
        setTimeout(function(){Guess.Game.answerAnimationEnded()}, 300);
    }
    this.hideOtherAnswers = function(otherFromThat) {
        for(var i = 0; i < 4; i++) {
            var answerEl = $('.answer.id-' + i);

            if (i !== otherFromThat) {
                if (answerEl.hasClass('name')) {
                    answerEl.find('.block').css({'background-color':Guess.Game.color.yellow});
                }
                answerEl.animate({
                    opacity:0
                }, 300);
            }
        }
    }

    this.answerWasCorrectAnimations = function() {
        var correctAnswerEl = $('.answer.name.id-' + this.currentAnswer + ' .block');
        if (correctAnswerEl.length) {
            $('.answer .block').stop();
            correctAnswerEl.animate({'background-color':Guess.Game.color.green, 'color':this.color.white}, 300);
        }
    }

    this.showQuestionResult = function() {
        $('.question').animate({opacity:0}, {duration:1100, complete:function(){Guess.Game.startTurn(false)}});
        if (this.pointsAnimationEnabled) {
            var k = this.resultK;
            var sec = this.resultSec;
            var points = k * sec;
            if (points != parseInt(points)) {
                points = Math.round(points*10)/10
            }
            this.pointsAmount += points;
            if (this.pointsAmount != parseInt(this.pointsAmount)) {
                this.pointsAmount = Math.round(this.pointsAmount*10)/10;
            }
            $('.add-points').delay(150)
                .html(points)
                .show()
                .css({right:'-30px', opacity:1})
                .animate({right:'40%', opacity:0.7},
                {duration:500, complete:function(){
                    $('.points-amount').html(Guess.Game.pointsAmount).css({'font-size':'36px', color:Guess.Game.color.yellow}).animate({'font-size':'20px', color:'#ffffff'}, 500);
                    $(this).hide();
                }});
        } else {
            this.pointsAnimationEnabled = true;
        }
    }

    this.abilityButtonAnimation = function(el) {
        el.animate({'border-radius': '80px', 'background-color':Guess.Game.color.yellow}, {'duration':1200, complete:function(){$(this).hide(100)}});
        el.delay(250).animate({'opacity': 0}, {'duration':1000, 'queue':false});
    }

    this.showFalseAnswerAnimation = function() {
        var duration = 1200;
        if (this.currentAnswer != 'none') {
            var currentAnswerEl = $('.answer.id-' + this.currentAnswer);
            currentAnswerEl.animate({'opacity':0.8}, duration);
            if (currentAnswerEl.hasClass('name')) {
                currentAnswerEl.find('.block').animate({'background-color':Guess.Game.color.red, 'color':this.color.white}, duration);
            } else {

            }
        } else {
            this.hideOtherAnswers(this.correctAnswer);
        }
        var correctAnswerEl = $('.answer.id-' + this.correctAnswer);

        correctAnswerEl.animate({opacity:1}, {'duration':duration});
        if (correctAnswerEl.hasClass('name')) {
            correctAnswerEl.find('.block').animate({'background-color':Guess.Game.color.green}, duration);
            $('.answer .block').off();
        }
        setTimeout(function(){Guess.Game.showEndModal()}, 2500);
    }

    this.showEndModal = function() {

        $('.turn-area, .col-md-10.timer').animate({opacity:0}, {duration:300, complete:function(){
            $('.turn-area, .col-md-10.timer').hide(500);
        }});//,
        setTimeout(function(){
            $('.game-area').removeClass('col-md-9').addClass('col-md-8');
            $('.sidebar-col').removeClass('col-md-3').addClass('col-md-4');
        }, 800);
        $('.points-container').delay(800).animate({'width':'100%'}, 300);
        //$('.points-amount').delay(900).animate({'color':'#ffffff'}, 600);
        $('.points').delay(1100).animate(
            {
                'height':'560px',
                'padding-top':'50px',
                'margin-top':'20px'
            }, {duration:600, complete:function(){
                $('.points').addClass('points-modal');
                Guess.Game.fillEndModal();
            }});
    }

    this.fillEndModal = function() {
        var answersText = 'You gave ' + this.correctAnswersNumber + ' correct answers';
        var template = $('#template-end-modal').html();
        Mustache.parse(template);
        var rendered = Mustache.render(template, {'data' : {'answers':this.correctAnswersNumber}, 'number': this.pointsAmount, 'userName' : this.userName});
        var obj = $(rendered);
        $('.points-modal').html('').append(obj);

        $('.points-amount .number').animate({'font-size':'40px'}, 800);
        $('.points-amount').animate({'font-size':'30px'}, 800);
        var queue = [
            {text:' points', el:$('.points-amount .right'), options:{'duration':500}},
            {text:answersText, el:$('.rest-stats-text'), options:{'duration':800}}
        ];
        if (this.userName) {
            queue.push({text:'Saved for name: ' + this.userName, el:$('.modal-user-name'), options:{'duration':800}})
        } else {
            Ajax.init();
        }
        $('.rest-stats-text').delay(1000).animate({'font-size':'30px'}, 800);
        pasteText('You earned', $('.points-amount .left'), {'duration':500, 'queue':queue});

        //facebook
        $('.facebook-placeholder').append($('.facebook-like-hidden :first-child'));

        var template = $('#template-sidebar-stats').html();
        Mustache.parse(template);
        var rendered = Mustache.render(template, {'stats' : this.stats});
        var obj = $(rendered);
        $('.sidebar-col').html('');
        $('.sidebar-col').append(obj);
        obj.fadeIn(400);
    }

    this.hideNameForm = function() {
        $('.end-modal').hide();
        pasteText('Results saved :)', $('.modal-user-name'), {'duration':500});
    }

    this.restartTimer = function()
    {
        $('.timer .progress-bar').css({'width' : '100%'});
        this.secondsLeft = this.currentQuestion.sec;
        $('.timer .seconds .text').html(this.secondsLeft);
        $('.timer .seconds')
            .css({'background-color': Guess.Game.color.green})
            .animate({'background-color':Guess.Game.color.red}, this.currentQuestion.sec * 1000);
        this.turnStartTime   = new Date();
        this.timerInterval = setInterval(function() { Guess.Game.timerTick() }, 1000);
    }
    this.timerTick = function() {
        this.secondsLeft--;
        var dSec = this.checkTime();

        var percent = 100 - dSec / (this.currentQuestion.sec / 100);
        $('.timer .progress-bar').css({'width' : percent + '%'});
        $('.timer .seconds .text').html(this.secondsLeft);
    }
    this.stopTimer = function() {
        $('.timer .seconds').stop();
        window.clearInterval(this.timerInterval);
    }

    this.checkTime = function() {
        var currentTime = new Date();
        var dSec = (currentTime.getTime() - this.turnStartTime.getTime()) / 1000;
        if (dSec > this.currentQuestion.sec) {
            this.gameFinished = true;
            url = '/GuessSeries/timeIsOut';
            Ajax.json(url, {
                callBack : function(data){Guess.Game.timeIsOut(data)}
            });
            window.clearInterval(this.timerInterval);
            $('.answer').off('click');
            return 0;
        } else {
            return dSec;
        }
    }

    this.answerButtonMouseOver = function(el) {
        $('.answer .block').css({'background-color':Guess.Game.color.blue, 'color':Guess.Game.color.white});
        el.bounce();
        el.animate({'background-color':Guess.Game.color.yellow, 'color':Guess.Game.color.black}, {
            queue:false,
            duration:400
        });
    }
    this.answerButtonMouseOut = function(el) {
        el.stop();
        el.css({'background-color':Guess.Game.color.blue, 'color':Guess.Game.color.white});
    }

    this.answerImageMouseOver = function(el) {
        el.animate({'background-size': '103%'}, {
            queue:false,
            duration:400
        });
    }
    this.answerImageMouseOut = function(el) {
        el.stop();
        el.css({'background-size': '130%'});
    }


    ///// ADMIN

    this.adminDuffeculty = function(el) {
        el = $(el);
        $('.difficulty-input').val(el.val());
    }
    this.seriesImagesGenerate = function(seriesId) {
        url = '/GuessSeries/admin/generateImages';
        Ajax.json(url, {
            data: 'seriesId=' + seriesId
        });
    }
}


function pasteText(text, el, options) {
    if (options && options.duration !== undefined) {
        if (text.length == 1) {
            var time = options.duration;
        } else {
            var time = parseInt((options.duration / text.length)* (rand(8,12)/10));
            options.duration -= time;
        }
    } else {
        var time = rand(10,80);
    }
    var letter = text.substr(0, 1);
    var rest = text.substr(1);
    el.append(letter);
    if (text.length > 1) {
        setTimeout(function(){pasteText(rest, el, options);}, time);
    } else {
        if (options && options.queue !== undefined) {
            var data = options.queue[0];
            options.queue.shift();

            if (data.options == undefined) {
                data.options = {};
            }
            if (options.queue.length > 0) {
                data.options.queue = options.queue;
            }
            pasteText(data.text, data.el, data.options);
        }
    }
} 
 /**
 * ILFATE PHP ENGINE
 * @autor Ilya Rubinchik ilfate@gmail.com
 * 2012
 */

CanvasActions = function() {
  
  this.tick_methods = [];
  this.objects = [];
  this.object_names = [];
  this.stage = {};
  this.loader = new createjs.PreloadJS();
  this.assets = [];
  
  
  this.init = function()
  {
    this.stage = new createjs.Stage("demoCanvas");
    this.stage.enableMouseOver(10);
    this.stage.mouseMoveOutside = true;
    this.container = new createjs.Container();
    this.width = $('#demoCanvas').width();
    this.height = $('#demoCanvas').height();

    var manifest = this.getMapManifest();
    this.loader.loadManifest(manifest);
  
    this.loader.onFileLoad = function(event){CanvasActions.handleFileLoad(event)};
    this.loader.onComplete = function(){CanvasActions.afterLoad()};
  
  
  }
  
  this.afterLoad = function()
  {
    this.createMap();  
    this.createRobot();
    this.createMonster();
    
    this.stage.addChild(this.container);  
    this.stage.update(); 
    createjs.Ticker.addListener(CanvasActions);
    createjs.Ticker.setFPS(30); 
    createjs.Ticker.useRAF = true;
  }
  
  this.getMapManifest = function() 
  {
    return [
//      {src:"/images/game/tile1.png",id:"floor"},
//      {src:"/images/game/tile1_damaged.png",id:"floor_d"},
//      {src:"/images/game/tile2.png",id:"empty"},
//      {src:"/images/game/block.png",id:"wall"},
      {src:"/images/game/map.png",id:"map"}
    ];  
  }
  
  this.createMap = function() 
  {
    var map_container = new createjs.Container();
    map_container.x = this.width/2 - 32;  
    map_container.y = this.height/2 - 32;  
    this.map = new IL.Map(map_container);
    this.map.draw();
    
    this.addTick(function(elapsedTime){
      CanvasActions.map.draw();
    });
    this.container.addChild(map_container);    
  }
  
  this.createRobot = function()
  {
    var robot_container = new createjs.Container();
    this.robot = new IL.Robot(robot_container, this.map);
    this.robot.draw();
    this.map.bindObject(this.robot);
    this.addTick(function(elapsedTime){
      CanvasActions.robot.draw();
    });
    this.container.addChild(robot_container);
  }
  
  this.createMonster = function()
  {
    var monster_container = new createjs.Container();
    var monster = new IL.Monster(monster_container, this.map);
    //this.robot.draw();
    this.map.bindObject(monster);
    var name = "monster_" + this.objects.length;
    monster.setName(name);
    monster.draw();
    this.addObject(monster, name);
    this.addTick(function(elapsedTime){
      CanvasActions.getObject(name).draw();
    });
    this.container.addChild(monster_container);
  }
  
  this.addObject = function(obj, name) {
    this.objects.push(obj);
    this.object_names.push(name);
  }
  this.getObject = function(name) {
    var idx = $.inArray(name,this.object_names);
    if(idx != -1) {
      return this.objects[idx];
    } else {
      return false;
    }
  }
  
  this.addTick = function(func) {
    this.tick_methods.push(func);
  }
  
  this.tick = function(elapsedTime) {
    if(this.tick_methods) 
    {
      for(var i in this.tick_methods) 
      {
        this.tick_methods[i](elapsedTime);
      }
    }
    this.stage.update(elapsedTime); 
  }
  
  this.stop = function() {
    createjs.Ticker.setPaused(true);
  }
  this.start = function() {
    createjs.Ticker.setPaused(false);
  }
  this.handleFileLoad = function(event) {
    //CanvasActions.assets.push(event);
  this.addObject(event.result, event.id);
  }
}


function IL () {
  
}
IL = new IL();

IL.Map = function(container) 
{
  this.container = container;
  this.container_def_point = new IL.Point(container.x, container.y)
  
  this.needDraw = true;
  this.cells = [];
  this.cell_idx = [];
  this.binded_objects = [];
  this.cell_width = 64;
  this.map_radius = 4;
  this.vision_radius = 3;
  this.x = 0;
  this.y = 0;
  this.camera = new IL.Point(0, 0);
  this.center = new IL.Point(0, 0);
  this.centerPoint = new IL.Point(0, 0);
  
  this.animation = new IL.Animation("move");

  this.setCamera = function(x, y, speed) 
  {
    // if new point is out of vision radius we set this new point to our vision radius border
    if(Math.abs(x - this.center.x) > this.vision_radius * this.cell_width ) {
        x = this.center.x + this.vision_radius * this.cell_width * ( this.center.x > this.camera.x ? -1 : 1 );
      }
    if(Math.abs(y - this.center.y) > this.vision_radius * this.cell_width ) {
        y = this.center.y + this.vision_radius * this.cell_width * ( this.center.y > this.camera.y ? -1 : 1 );
//        info(y);
      }
    if(!speed) {
      this.camera.x = x;
      this.camera.y = y;
    } else {
      this.animation
        .setSpeed(speed)
        .setStart(this.camera)
        .setEnd(new IL.Point(x, y))
        .start();
    }
    this.needDraw = true;
  }
  this.move = function(x, y) 
  {
    this.center.x += x * this.cell_width;
    this.center.y += y * this.cell_width;
    this.centerPoint.x += x;
    this.centerPoint.y += y;
    this.setCamera(this.center.x, this.center.y, 250);//(this.map_radius * this.cell_width - this.center.distance(this.camera)) * 5 );
    this.needDraw = true;
  }
  var map = this;
  this.container.onPress = function(evt) 
  {
    var offset = {x: map.camera.x + evt.stageX, y: map.camera.y + evt.stageY};

    evt.onMouseMove = function(ev) 
    {
      map.setCamera(offset.x - ev.stageX, offset.y - ev.stageY);
    }
  }
  this.bindObject = function(obj)
  {
    this.binded_objects.push(obj);
  }
  this.getSpriteType = function(type) 
  {
    var x = 0;
    var y = 0;
    switch(type) {
      case "floor":x = 0;y = 0;break;
      case "wall":x = 8;y = 5;break;      
      case "wall_d1_1":x = 9;y = 6;break; 
      case "wall_d1_2":x = 0;y = 7;break; 
      case "wall_d1_3":x = 1;y = 7;break; 
      case "wall_d1_4":x = 2;y = 7;break; 
      case "wall_d2_1":x = 3;y = 7;break; 
      case "wall_d2_2":x = 4;y = 7;break; 
      case "wall_d2_3":x = 5;y = 7;break; 
      case "wall_d2_4":x = 6;y = 7;break; 
      case "wall_d3_1":x = 7;y = 7;break; 
      case "wall_d3_2":x = 8;y = 7;break; 
      case "wall_d3_3":x = 9;y = 7;break; 
      case "wall_d3_4":x = 0;y = 8;break; 
      
      case "floor_d":x = 0;y = 1;break;
      case "floor_1":x = 2;y = 1;break;
      case "floor_2":x = 7;y = 0;break;
      case "floor_3":x = 3;y = 1;break;
      case "floor_4":x = 1;y = 1;break;
      
      case "monst_1":x = 1;y = 8;break; 
      case "monst_2":x = 2;y = 8;break; 
      case "monst_3":x = 3;y = 8;break; 
      case "monst_4":x = 4;y = 8;break; 
      case "monst_5":x = 5;y = 8;break; 
      case "monst_6":x = 6;y = 8;break; 
      case "monst_7":x = 7;y = 8;break; 
      case "monst_8":x = 8;y = 8;break; 
      
      case "robot_1":x = 9;y = 8;break; 
      case "robot_2":x = 0;y = 9;break; 
      case "robot_3":x = 1;y = 9;break; 
    }
    return {"x": x*this.cell_width,"y":y*this.cell_width};
  }
  
  this.addCell = function(Cell)
  {
    this.cells.push(Cell);
    var name = Cell.point.x + '_' + Cell.point.y;
    this.cell_idx.push(name);
  }
  this.addSimpleCell = function(x, y, type) {
    this.addCell(new IL.Cell(new IL.Point(x, y), type))
  }
  this.getCell = function(x, y)
  {
    var name = x + '_' + y;
    var idx = $.inArray(name, this.cell_idx)
    if(idx != -1) {
      return this.cells[idx];
    } else {
      return false;
    }
  }
  this.daleteCell = function(x, y) {
    var name = x + '_' + y;
    var idx = $.inArray(name, this.cell_idx)
    if(idx != -1) {
      this.cell_idx[idx] = '';
    }
  }
  this.createPath = function(from, to) {
//    info('CreatePath');
    var matrix = [], // двумерная матрица для хранения клеток
      route = {}; // объект для хранения инфы о найденном пути 
      
      matrix.opened = []; // открытый список, содержащий клетки, которые должны пройти проверку в последующей итерации цикла
      matrix.closed = []; // закрытый список, отработанные клетки волны, с ними уже ничего не делаем
      matrix.linear = []; // массив всех клеток матрицы в виде одномерного массива 
      
      var start_cell = this.getCell(from.x, from.y);
      start_cell.closed = false;
      start_cell.opened = true;
      start_cell.cost = 0;
      matrix.opened.push(start_cell);
      var cell, iter = 0, done = false;
      
      while( (cell = matrix.opened.shift()) && iter < 2000 && !done )
      {
        matrix.closed.push(cell);
        cell.closed = true;
        var
          top = this.getCell(cell.point.x, cell.point.y - 1),
          bottom = this.getCell(cell.point.x, cell.point.y + 1),
          left = this.getCell(cell.point.x - 1, cell.point.y),
          right = this.getCell(cell.point.x + 1, cell.point.y);
        var arr = [top,bottom,left,right];
        for(var i in arr) {
          if(arr[i] && !arr[i].closed) 
          {
            if(arr[i].point.x == to.x && arr[i].point.y == to.y)
            {
              arr[i].parent = cell;
              done = arr[i];
              
              break;
            }
            if(!arr[i].opened && arr[i].isPassable())
            {
              arr[i].opened = true;
              arr[i].parent = cell;
              arr[i].cost = function( type )
              {
                var
                  G = ((this.parent.cost && this.parent.cost('g')) || 0) + 10,
                  H = (Math.abs(this.x - to.x)) + (Math.abs(this.y - to.y));
                return (
                  type == 'g' ? G :
                  type == 'h' ? H :
                  G + H
                );
              } 
              matrix.opened.push(arr[i]);
            }
          }
        }
        iter++;
      }
      for(var n in matrix.closed) {
        matrix.closed[n].opened = false;
        matrix.closed[n].closed = false;
        matrix.closed[n].cost = 0;
      }
      for(var n1 in matrix.opened) {
        matrix.opened[n1].opened = false;
        matrix.opened[n1].closed = false;
        matrix.opened[n1].cost = 0;
      }
      if(done)
      {
        done.opened = false;
        done.closed = false;
        done.cost = 0;
        var  path = [];
        if(done.point.x == from.x && done.point.y == from.y) {
          return path;
        }
        var next = done.parent;
        while(1)
        {
          if(next.point.x == from.x && next.point.y == from.y)
          {
            return path;
          }
          path.push(next);
          if(next.parent) {
            next = next.parent;
          } else {
            info('error at CreatePath. BackPath');
            break;
          }
        }
      } else {
        info(matrix.opened);
        info("closed =");
        info(matrix.closed);
        return false;
      }
  }
  this.cells_options = [
    "floor", "floor", "floor", "floor", 
    "wall", "wall", "wall", "wall", "wall", "wall",
    "floor_d", 
    "floor_1", 
    "floor_2", 
    "floor_3", 
    "floor_4"
  ];
  this.loadCell = function(x, y)
  {
    var rand = Math.floor(Math.random() * this.cells_options.length);
    this.addSimpleCell(x, y, this.cells_options[rand]);
    return this.getCell(x, y);
  }
  
  this.getMiddlePoint = function()
  {
      return this.camera; 
  }
  this.checkAllVisibleCells = function()
  {
    var middle = this.getMiddlePoint();
    var pixel_radius = this.map_radius * this.cell_width;
    var left_border = middle.x - pixel_radius;
    var top_border = middle.y - pixel_radius;
    if(left_border < 0) {var left_cut = -(left_border % this.cell_width);} 
    else {var left_cut = (this.cell_width - left_border % this.cell_width);}
    if(top_border < 0) {var top_cut = -(top_border % this.cell_width);} 
    else {var top_cut = (this.cell_width - top_border % this.cell_width);}

    if(left_cut) {
      this.container.x = this.container_def_point.x - (this.cell_width - left_cut);
    } else {
      this.container.x = this.container_def_point.x;
    }
    if(top_cut) {
      this.container.y = this.container_def_point.y - (this.cell_width - top_cut);
    } else {
      this.container.y = this.container_def_point.y;
    }
    var cells_to_left = (Math.floor(left_border / this.cell_width));
    var cells_to_top = (Math.floor(top_border / this.cell_width));
    var row_end = cells_to_left + this.map_radius*2 + 1 + ((left_cut == 0) ? 0 : 1);
    var col_end = cells_to_top + this.map_radius*2 + 1 + ((top_cut == 0) ? 0 : 1);

      var window_x = -this.map_radius;
      var window_y = -this.map_radius;
      for(var x = cells_to_left; x < row_end; x++,window_x++)
      {
        window_y = -this.map_radius;
        for(var y = cells_to_top; y < col_end; y++,window_y++)
        {
          var cell = this.getCell(x, y);
          if(!cell) {
            cell = this.loadCell(x, y);
          }
          cell.set(window_x, window_y);
      if(left_cut) {
        if(x == cells_to_left) {
          cell.cutX(left_cut - this.cell_width);
        } else if(x == row_end-1) {
          cell.cutX(left_cut);
        } else {
          cell.cutX(0);
        }
      } else {
        cell.cutX(0);
      }
      if(top_cut) {
        if(y == cells_to_top) {
          cell.cutY(top_cut - this.cell_width);
        } else if(y == col_end-1) {
          cell.cutY(top_cut);
        } else {
          cell.cutY(0);
        }
      } else {
        cell.cutY(0);
      }
      }
    }
  }
  this.draw = function() 
  {
    if(this.needDraw) 
    {
      for(var i in this.binded_objects)
      {
        this.binded_objects[i].update();
      }
      if(this.animation.isRunning()) {
        this.camera = this.animation.tic();
      }
      this.checkAllVisibleCells();
      this.container.removeAllChildren();
      var cell_need_more_draw = false;
      for(var i in this.cells) 
      {
        if(this.cells[i].visible) 
        {
          if(this.cells[i].draw(this.container, this.cell_width))
          {
            cell_need_more_draw = true;
          }
          this.cells[i].visible = false;
        }
      }
      if(!this.animation.isRunning() && !cell_need_more_draw) {
        this.needDraw = false;
      }
    }
  }
  this.update = function()
  {
    this.needDraw = true;
  }
  
}
////////////////////////////////////////////////////////////////////////////////
///////////////////    ROBOT ///////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

IL.Robot = function(container, map)
{
  this.container = container;
  this.map = map;
  this.direction = 0;
  this.needDraw = true;
  
  this.container.x = this.map.container.x + this.map.cell_width / 2;
  this.container.y = this.map.container.y + this.map.cell_width / 2;
  
  this.point = new IL.Point(this.map.centerPoint.x, this.map.centerPoint.y);
  this.animation = new IL.Animation("move");
  
  this.img =  new createjs.Bitmap(CanvasActions.getObject("map"));
  this.img.sourceRect = new createjs.Rectangle(9 * this.map.cell_width,8 * this.map.cell_width, 64, 64);
  this.img.regX = this.map.cell_width / 2;
  this.img.regY = this.map.cell_width / 2;
  
  
  this.move = function(x, y)
  {
    if(this.animation.isRunning()) return false;
    var cell = this.map.getCell(this.point.x + x, this.point.y + y);
    if(cell.isPassable()) 
    {
      cell.take();
      this.map.getCell(this.point.x, this.point.y).free();
      this.animation.setStart(new IL.Point(this.point.x * this.map.cell_width, this.point.y * this.map.cell_width));
      this.point.x += x;
      this.point.y += y;
      this.animation
        .setEnd(new IL.Point(this.point.x * this.map.cell_width, this.point.y * this.map.cell_width))
        .setSpeed(150)
        .setType("move")
        .start();
      this.map.move(x, y);
      this.update();
    }
    return this;
  }
  this.rotate = function(side)
  {
    if(this.animation.isRunning()) return false;
    this.animation.setStart(this.img.rotation);
    if(side > 0) {
      this.direction++;
      if(this.direction > 3) {
        this.direction = 0;
        this.animation.setStart(-90);
      }
    }
    if(side < 0) {
      this.direction--;
      if(this.direction < 0) {
        this.direction = 3;
        this.animation.setStart(360);
      }
    }
    this.animation
      .setType("rotate")
      .setSpeed(150)
      .setEnd(90 * this.direction)
      .start();
    this.needDraw = true;
    
    return this;
  }
  this.forward = function()
  {
    switch(this.direction){
      case 0:
        this.move(0, -1);
      break;
      case 1:
        this.move(1, 0);
      break;
      case 2:
        this.move(0, 1);
      break;
      case 3:
        this.move(-1, 0);
      break;
    }
  }
  this.backward = function()
  {
    switch(this.direction){
      case 0:
        this.move(0, 1);
      break;
      case 1:
        this.move(-1, 0);
      break;
      case 2:
        this.move(0, -1);
      break;
      case 3:
        this.move(1, 0);
      break;
    }
  }
  this.destroyWall = function()
  {
    var next = this.point.next(this.direction);
    var cell = this.map.getCell(next.x, next.y);
    if(cell.type == "wall")
    {
//      cell.setType("floor");
      cell.runAnimation("destroyWall");
      this.animation
        .setType("wait")
        .setSpeed(400)
        .start();
      this.map.update();
    }
  }
  this.getPosition = function()
  {
    if(this.animation.isRunning() && this.animation.isType("move"))
    {
      return this.animation.getLast();
    } else {
      return new IL.Point(this.point.x * this.map.cell_width, this.point.y * this.map.cell_width);
    }
  }
  this.checkAngle = function()
  {
    if(this.animation.isRunning() && this.animation.isType("rotate")) {
        this.img.rotation = this.animation.getLast();
    } else {
      this.img.rotation = 90 * this.direction;
    }
  }
  this.draw = function()
  {
    if(this.needDraw)
    {
      if(this.animation.isRunning()) {
        this.animation.tic();
      }
      this.container.removeAllChildren();
      var position = this.getPosition();
      this.checkAngle();
      
      this.img.x = -this.map.camera.x + position.x;
      this.img.y = -this.map.camera.y + position.y;
      
      this.container.addChild(this.img);
      if(!this.animation.isRunning()) {
        this.needDraw = false;
      }
    }
  }
  this.update = function()
  {
    this.needDraw = true;
  }
}

////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////   MONSTER    /////////////
////////////////////////////////////////////////////////////////////////////////

IL.Monster = function(container, map)
{
  this.container = container;
  this.map = map;
  this.direction = 2;
  this.type = "crab";
  this.name = "";
  this.needDraw = true;
  this.spawn_radius = 0;
  this.spawn = new IL.Point(0, 1);
  this.point = new IL.Point(0, 0);
  this.sprite = new IL.Point(0, 0);
  this.path = false;
  this.no_path = false;
  this.target = false;
  this.target_point = new IL.Point(0, 0);
  this.spawned = false;
  this.animationMove = new IL.Animation("move");
  this.animation = new IL.Animation("spriteAnimation");
  this.animation
    .setSpeed(1000)
    .setStart(["monst_1", "monst_2", "monst_3", "monst_4", "monst_5", "monst_6", "monst_7", "monst_8"])
    .start(true);
  this.container.x = this.map.container.x + this.map.cell_width / 2;
  this.container.y = this.map.container.y + this.map.cell_width / 2;
  
  this.img =  new createjs.Bitmap(CanvasActions.getObject("map"));
  this.img.sourceRect = new createjs.Rectangle(1 * this.map.cell_width, 8 * this.map.cell_width, this.map.cell_width, this.map.cell_width);
  this.img.regX = this.map.cell_width / 2;
  this.img.regY = this.map.cell_width / 2;
  
  this.setName = function(name) {
    this.name = name;
  }
  this.doSpawn = function()
  {
    if(this.spawn_radius > 0) {
      var x = this.spawn.x + Math.floor(Math.random() * this.spawn_radius) * (Math.random() > 0.5 ? 1 : -1);
      var y = this.spawn.y + Math.floor(Math.random() * this.spawn_radius) * (Math.random() > 0.5 ? 1 : -1);
    } else {
      var x = this.spawn.x;
      var y = this.spawn.y;
    }
    this.point.set(x, y);
    this.spawned = true;
  }
  this.doSpawn();
  
  this.move = function()
  {
    if(this.animationMove.isRunning()) return false;
    var next = this.point.next(this.direction);
    var cell = this.map.getCell(next.x, next.y);
    if(cell.isPassable()) 
    {
      cell.take();
      this.map.getCell(this.point.x, this.point.y).free();
      this.animationMove.setStart(new IL.Point(this.point.x * this.map.cell_width, this.point.y * this.map.cell_width));
      this.point = next;
      this.animationMove
        .setEnd(new IL.Point(this.point.x * this.map.cell_width, this.point.y * this.map.cell_width))
        .setSpeed(850)
        .setType("move")
        .start();
      this.update();
    }
    return this;
  }
  this.rotate = function(side)
  {
    if(this.animationMove.isRunning()) return false;
    this.animationMove.setStart(this.img.rotation);
    if(side > 0) {
      this.direction++;
      if(this.direction > 3) {
        this.direction = 0;
        this.animationMove.setStart(-90);
      }
    }
    if(side < 0) {
      this.direction--;
      if(this.direction < 0) {
        this.direction = 3;
        this.animationMove.setStart(360);
      }
    }
    this.animationMove
      .setType("rotate")
      .setSpeed(350)
      .setEnd(90 * this.direction)
      .start();
    this.needDraw = true;
    
    return this;
  }
  this.getPosition = function()
  {
    if(this.animationMove.isRunning() && this.animationMove.isType("move"))
    {
//      nfo(this.animationMove.getLast().x + ", " + this.animation.getLast().y);
      return this.animationMove.getLast();
    } else {
      return new IL.Point(this.point.x * this.map.cell_width, this.point.y * this.map.cell_width);
    }
  }
  this.checkAngle = function()
  {
    if(this.animationMove.isRunning() && this.animationMove.isType("rotate")) {
        this.img.rotation = this.animationMove.getLast();
    } else {
      this.img.rotation = 90 * this.direction;
    }
  }
  this.setType = function(type)
  {
    this.type = type;
    this.sprite = CanvasActions.map.getSpriteType(type);
  }
  this.findTarget = function() {
    this.target = CanvasActions.robot;
  }
  this.action = function()
  {
    if(this.animationMove.isRunning()) {
      return;
    }
    if(!this.target) {
      this.findTarget();
    }
    if((!this.path && !this.no_path) || this.target.point.x != this.target_point.x || this.target.point.y != this.target_point.y)
    {
      this.path = this.map.createPath(this.point, this.target.point);
      this.target_point.set(this.target.point.x, this.target.point.y);
//      info(this.path);
      this.no_path = !this.path;
      
    }
    if(this.path && this.path.length > 0) 
    { 
        var target = this.path[this.path.length-1].point;
        
        var next_strate = this.point.next(this.direction);
        if(next_strate.x == target.x && next_strate.y == target.y) {
          this.move();
          this.path.pop();
        } else {
          var right_dir = this.direction + 1;
          if(right_dir > 3) right_dir = 0;
//          info(right_dir);
          var next_right = this.point.next(right_dir);
          if(next_right.x == target.x && next_right.y == target.y) {
            this.rotate(1);
          } else {
            this.rotate(-1);
          }
        }
    }
    
  }
  this.draw = function()
  {
    if(this.needDraw)
    {
      this.action();
      if(this.animationMove.isRunning()) {
        this.animationMove.tic();
      }
      this.setType(this.animation.tic());
      
      
      this.container.removeAllChildren();
      var position = this.getPosition();
      this.checkAngle();
      
      var cell = this.map.getCell(this.point.x, this.point.y);
      
      
      this.img.x = -this.map.camera.x + position.x + cell.cutLeft;
      this.img.y = -this.map.camera.y + position.y + cell.cutTop;
      this.img.sourceRect.x = this.sprite.x + cell.cutLeft;
      this.img.sourceRect.y = this.sprite.y + cell.cutTop;
      this.img.sourceRect.width = this.map.cell_width - cell.cutLeft - cell.cutRight;
      this.img.sourceRect.height = this.map.cell_width - cell.cutTop - cell.cutBottom;
//      info(this.img.x + ", " + this.img.y);
      this.container.addChild(this.img);
      if(!this.animation.isRunning() && ! this.animationMove.isRunning()) {
        this.needDraw = false;
      }
    }
  }
  this.update = function()
  {
    this.needDraw = true;
  }
}
  
////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////   POINT    ///////////////
////////////////////////////////////////////////////////////////////////////////

IL.Point = function(x, y)
{
  this.x = x ? x : 0;
  this.y = y ? y : 0;
  this.set = function(x,y)
  {
    this.x = x;
    this.y = y;
    return this;
  }
  this.distance = function(point)
  {
    return Math.sqrt(Math.pow((point.x - this.x), 2) + Math.pow((point.y - this.y), 2));
  }
  this.next = function(direction)
  {
    switch(direction)
    {
      case 0:
        return new IL.Point(this.x, this.y - 1);
      case 1:
        return new IL.Point(this.x + 1, this.y);
      case 2:
        return new IL.Point(this.x, this.y + 1);
      case 3:
        return new IL.Point(this.x - 1, this.y);
        
    }
  }
}

////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////   CELL     ///////////////
////////////////////////////////////////////////////////////////////////////////

IL.Cell = function(Point, type)
{
  this.visible = false;
  this.shape = new createjs.Shape();
  this.window_point = new IL.Point(0, 0);
  this.cutLeft = 0;
  this.cutRight = 0;
  this.cutTop = 0;
  this.cutBottom = 0;
  this.taken = false;
  
  this.newType = true;
  if(Point) 
  {
    this.point = Point;
  } else {
    info('error. Cell needs a Point object')
  }
  
  this.setType = function(type)
  {
    this.type = type;
    this.sprite = CanvasActions.map.getSpriteType(type);
    return this;
  }
  this.setType(type);
  
  this.runAnimation = function(name)
  {
    this.animation = new IL.Animation("spriteAnimation");
    var anims = [
      ["wall_d1_1", "wall_d1_2", "wall_d1_3", "wall_d1_4", "floor"],
      ["wall_d2_1", "wall_d2_2", "wall_d2_3", "wall_d2_4", "floor"],
      ["wall_d3_1", "wall_d3_2", "wall_d3_3", "wall_d3_4", "floor"]
    ];
    var rand = Math.floor(Math.random() * anims.length);
    if(rand == anims.length) rand--;
    this.animation
      .setSpeed(700)
      .setStart(anims[rand])
      .start()
    return this;
  }
  this.set = function(x, y)
  {
    this.window_point.x = x;
    this.window_point.y = y;
    this.visible = true;
    return this;
  }
  this.cutX = function(cut) {
	  if(cut < 0) {
		this.cutLeft = -cut;
		this.cutRight = 0;
	  } else if(cut > 0) {
		this.cutLeft = 0;
		this.cutRight = cut;
	  } else {
		this.cutRight = this.cutLeft = 0;  
	  }
    return this;
  }
  this.cutY = function(cut) {
	  if(cut < 0) {
		this.cutTop = -cut;
		this.cutBottom = 0;
	  } else if(cut > 0) {
		this.cutTop = 0;
		this.cutBottom = cut;
	  } else {
		this.cutTop = this.cutBottom = 0;  
	  }
    return this;
  }
  
  this.isPassable = function()
  {
    if(this.type == "wall" || this.type == "hole" || this.taken) {
      return false;
    }
    return true;
  }
  this.take = function()
  {
    this.taken = true;
    return this;
  }
  this.free = function()
  {
    this.taken = false;
    return this;
  }
  
  this.draw = function(container, width) 
  {
    if(this.newType) {
      this.bitmap = new createjs.Bitmap(CanvasActions.getObject("map"));
      this.bitmap.sourceRect = new createjs.Rectangle(0, 0, 0, 0);
      this.newType = false;
    }
    
    this.bitmap.x = width * this.window_point.x + this.cutLeft;
    this.bitmap.y = width * this.window_point.y + this.cutTop;
    this.bitmap.sourceRect.x = this.sprite.x + this.cutLeft;
    this.bitmap.sourceRect.y = this.sprite.y + this.cutTop;
    this.bitmap.sourceRect.width = width - this.cutLeft - this.cutRight;
    this.bitmap.sourceRect.height = width - this.cutTop - this.cutBottom;
    
    container.addChild(this.bitmap);
    
    if(this.animation && this.animation.isRunning())
    {
      var new_type = this.animation.tic();
      if(new_type != this.type)
      this.setType(new_type);
      return true;
    }
    return false; // false means that we dont need to draw it. well cell dont need
  }
}

////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////   ANIMATION    ///////////
////////////////////////////////////////////////////////////////////////////////
IL.Animation = function(type)
{
  this.startObj;
  this.endObj;
  this.type = type;
  this.started = false;
  this.working = false;
  this.repeat = false;
  this.repeat_times = -1; // infinite
  this.speed = 0;
  this.start_time = 0;
  this.last_tic = false;
  
  this.start = function(repeat)
  {
    this.started = true;
    this.working = true;
    this.start_time = 0;
    this.repeat = !!repeat;
    return this;
  }
  this.stop = function() {
    this.working = false;
    return this;
  }
  this.isRunning = function() {
    return this.working;
  }
  this.setStart = function(e)
  {
    this.startObj = e;
    return this;
  }
  this.setEnd = function(e)
  {
    this.endObj = e;
    return this;
  }
  this.setSpeed = function(speed)
  {
    this.speed = speed;
    return this;
  }
  this.setType = function(type)
  {
    this.type = type;
    return this;
  }
  this.isType = function(type)
  {
    return this.type === type;
  }
  this.tic = function()
  {
    if(!this.working) {
      info('WTF tic try but animation is not working');
      return false;
    }
    
    if(!this.start_time)
    {
      this.start_time = new Date().getTime();
    }
    var time = new Date().getTime();
    var dT = time - this.start_time;
    if(dT >= this.speed) {
      dT = this.speed;
      if(!this.repeat) {
        this.stop();
      } else {
        if(this.repeat_times != 0) {
          this.repeat_times--;
          this.start(true);
        } else {
          this.stop();
        }
      }
    }
    var k = dT / this.speed;
    switch(this.type) {
      case "move":
        var dX = (this.endObj.x - this.startObj.x) * k + this.startObj.x;
        var dY = (this.endObj.y - this.startObj.y) * k + this.startObj.y;
        this.last_tic = new IL.Point(dX, dY);
        return this.last_tic;
      break;
      
      case "rotate":
        this.last_tic = (this.endObj - this.startObj) * k + this.startObj;
        return this.last_tic;
        break;
        
      case "spriteAnimation":
        var idx = Math.round(this.startObj.length * k);
        if(idx == this.startObj.length) idx = this.startObj.length - 1;
        this.last_tic = this.startObj[idx];
        return this.last_tic;
        break;
      case "wait":
        this.last_tic = true;
        return this.last_tic;
        break;
    }
    return false;
  }
  this.getLast = function()
  {
    return this.last_tic;
  }
}


IL.MapData = function ()
{
    this.map = [];

    this.set = function(x, y, cell)
    {
        this.map[x][y] = cell;
    }
}
$(document).ready(function() {
  if (!$('.game-template-container').length) {
    return false;
  }
  CanvasActions = new CanvasActions();
  CanvasActions.init();
  $(document).keypress(function(event) {
    switch(event.keyCode)
    {
      case 37: // left
        CanvasActions.robot.rotate(-1);
        break;
      case 38: // down
        CanvasActions.robot.backward();
        break;
      case 39: // right
        CanvasActions.robot.rotate(1);
        break;
      case 40: // up
        CanvasActions.robot.forward();
        break;
      case 13:  // Enter
        break;
      case 119 : // w
        CanvasActions.robot.forward();
        break;
      case 97 : // a
        CanvasActions.robot.rotate(-1);
        break;
      case 115 : // s
        CanvasActions.robot.backward();
        break;
      case 100 : // d
        CanvasActions.robot.rotate(1);
        break;
      case 32 :  // space
        break;
      case 101 :  // e
        CanvasActions.robot.destroyWall();
        break;
      case 114 :  // r
        break;
      case 102 :  // f
        break;
      case 0 :                  //// For Mozila
        switch(event.charCode)
        {
          case 119 : // w
            CanvasActions.robot.forward('move');
            break;
          case 97 : // a
            CanvasActions.robot.rotate(-1);
            break;
          case 115 : // s
            CanvasActions.robot.backward();
            break;
          case 100 : // d
            CanvasActions.robot.rotate(1);
            break;
          case 32 :  // space
            break;
          case 101 :  // e
            CanvasActions.robot.destroyWall();
            break;
          case 114 :  // r
            break;
          case 102 :  // f
            break;
        }
        break;
    }
  });
}); 
 /**
 * Created by Ilya Rubinchik (ilfate) on 12/09/14.
 */

function MathEffectPage() {

    this.hideMENameForm = function() {
        $('#MENameForm').hide();
        $('#MENameFormContainer').html('Name saved');
    }
}

MathEffectPage = new MathEffectPage(); 
 /**
 * Created by Ilya Rubinchik (ilfate) on 12/09/14.
 */

function rand(min, max)
{
    return Math.floor(Math.random()*(max-min+1)+min);
}
function info(data)
{
    console.info(data);
}
function debug(data) {
    //info(data);
    // desabled
}
function isInt(n){
    return typeof n== "number" && isFinite(n) && n%1===0;
}

function TD () {

}
TD = new TD();

$(document).ready(function() {

    $('#modalHowUnitMoveButton').bind('click', function(){
        //var src = 'http://www.youtube.com/v/OlJ9VdY9dig&amp;autoplay=1';
        $("#modalHowUnitMove").modal({                    // wire up the actual modal functionality and show the dialog
                    "backdrop"  : "static",
                    "keyboard"  : true,
                    "show"      : true                     // ensure the modal is shown immediately
        });
        var theModal = '#modalHowUnitMove',
        videoSRC = $('#modalHowUnitMove iframe').attr( "data-video" ), 
        videoSRCauto = videoSRC+"?autoplay=1" ;
        $(theModal+' iframe').attr('src', videoSRCauto);
        $(theModal+' .youtube-stop').click(function () {
            $(theModal+' iframe').attr('src', videoSRC);
        });
        // if (!$('#modalHowUnitMove iframe').attr('src')) {
        //     $('#modalHowUnitMove iframe').attr('src', src);
        // }
    });

    // $('#modalHowUnitMove .youtube-stop').click(function () {
    //     $('#modalHowUnitMove iframe').removeAttr('src');
    // });

    var situation = false;
//       {'units' : [
//
//           {'x': 2, 'y': 3, 'd': 0, 'a':true, 'p': 3, 'o':'bot'},
//           {'x': 1, 'y': 6, 'd': 0, 'a':true, 'p': 5, 'o':'bot'},
//           {'x': 5, 'y': 1, 'd': 0, 'a':true, 'p': 2, 'o':'bot'},
//           {'x': 8, 'y': 6, 'd': 3, 'a':true, 'p': 1, 'o':'bot'},
//           {'x': 6, 'y': 5, 'd': 3, 'a':true, 'p': 17, 'o':'bot', 'b' : true},
//           {'x': 6, 'y': 2, 'd': 3, 'a':true, 'p': 25, 'o':'bot', 'b' : true},
//           {'x': 2, 'y': 2, 'd': 2, 'a':true, 'p': 4, 'o':'player'},
//           {'x': 3, 'y': 3, 'd': 3, 'a':true, 'p': 35, 'o':'player'},
//           {'x': 7, 'y': 1, 'd': 2, 'a':true, 'p': 8, 'o':'player'},
//           {'x': 6, 'y': 4, 'd': 1, 'a':true, 'p': 18, 'o':'player'},
//           {'x': 4, 'y': 4, 'd': 2, 'a':false, 'p': 1, 'o':'player'},
//           {'x': 4, 'y': 0, 'd': 2, 'a':false, 'p': 24, 'o':'player'},
//           {'x': 0, 'y': 4, 'd': 2, 'a':false, 'p': 28, 'o':'player'},
//           {'x': 3, 'y': 8, 'd': 2, 'a':false, 'p': 2, 'o':'player'},
//           {'x': 7, 'y': 8, 'd': 2, 'a':false, 'p': 6, 'o':'player'},
//           {'x': 4, 'y': 5, 'd': 1, 'a':true, 'p': 12, 'o':'player'},
//           {'x': 4, 'y': 7, 'd': 2, 'a':true, 'p': 79, 'o':'player'}
//      ],
//       'bonuses': [
//           {'x': 1, 'y': 2, 'p': 5, 't':'plus'},
//           {'x': 7, 'y': 2, 'p': 8, 't':'plus'},
//           {'x': 6, 'y': 1, 'p': 3, 't':'minus'},
//           {'x': 2, 'y': 6, 'p': 4, 't':'minus'},
//       ]};
    var game = new TD.Game(situation);
    game.init();
});

TD.Game = function (situation) {
    this.facet      = new TD.Facet(this);
    this.mapConfig  = {};
    this.currentMap = {};
    this.newMap     = {};
    this.running    = true;
    this.units      = {};
    this.lastUnitId = 1;

    this.statsKilledPower   = 0;
    this.statsKilledUnits   = 0;
    this.statsLostUnits     = 0;
    this.statsLostPower     = 0;
    this.statsTicksSurvived = 0;
    this.statsPoints        = 0;

    this.pointsPerKill   = 5;

    this.spawnBotsEveryTick = 1;
    this.turnsBotWasSpawnd  = 0;

    this.chanceToSpawnBonus = 15;

    this.init = function() {
        this.mapConfig = new TD.Map.Config();
        this.mapConfig.setSize(9);
        this.mapConfig.setSpawn();

        this.currentMap = new TD.Map(this.facet, this.mapConfig);

        TD.Facet = this.facet;

        if (!situation) {

            this.spawnPlayerUnit();
            this.spawnBotUnit();
        } else {
            // situation emulation
            for(var key in situation.units) {
                var unitData = situation.units[key];
                var unit = new TD.Unit(this);
                unit.setPosition(unitData.x, unitData.y);
                unit.setOwner(unitData.o);
                unit.power = unitData.p;
                unit.isBoss = !!unitData.b
                unit.active = unitData.a;
                unit.direction = unitData.d;
                unit.init();
            }
            if (situation.bonuses) {
                for(var key in situation.bonuses) {
                    var bonusData = situation.bonuses[key];
                    var bonus = new TD.Bonus(this);
                    bonus.x = bonusData.x;
                    bonus.y = bonusData.y;
                    bonus.power = bonusData.p;
                    bonus.type = bonusData.t;
                    this.currentMap.putBonusToMap(bonus, bonus.x, bonus.y);
                }
            }
        }
        this.currentMap.drawMap();
        this.currentMap.draw(this.units);
    }

    this.getNewUnitId = function () {
        return this.lastUnitId++;
    }

    this.setUnit = function(unit) {
        debug('new unit:' + unit.getId() + '. Owner='+unit.owner);
        this.units[unit.getId()] = unit;
        this.currentMap.setUnit(unit);
    }

    this.removeUnit = function (unit) {
        debug ('remove unit id = ' + unit.getId());
        this.newMap.animateDeath(unit);
        delete this.units[unit.getId()];
    }

    this.getCenter = function() {
        return this.currentMap.getCenter();
    }

    this.checkUnitDirection = function(unit) {
        this.currentMap.checkUnitDirection(unit);
    }

    this.spawnPlayerUnit = function () {
        if (!this.running) {
            debug ('can`t spawn unit. Game is stopped');
            return;
        }
        var center = this.currentMap.getCenter();
        var unitIdInCenter = this.currentMap.get(center.x, center.y);
        if (!unitIdInCenter || this.units[unitIdInCenter] == undefined) {
            // spawn only if center is empty.
            debug ('SPAWN ' + unitIdInCenter);
            debug (this.units);
            var unit = new TD.Unit(this);
            unit.setPosition(center.x, center.y);
            unit.setOwner('player');
            unit.init();
        }
    }

    this.spawnBotUnit = function () {
        if (!this.running) {
            debug ('can`t spawn unit. Game is stopped');
            return;
        }
        if (this.turnsBotWasSpawnd == 0) {
            this.turnsBotWasSpawnd = this.spawnBotsEveryTick;
        } else {
            this.turnsBotWasSpawnd--;
            return;
        }
        var emptyCell = false;
        for (var i = 0; i < 5; i++) {
            //we will do 3 attempts to find empty cell.
            var cell = this.currentMap.getRandomBotSpawnCell();
            if (!this.currentMap.get(cell.x, cell.y)) {
                debug('random coordinats x = ' + cell.x + ' y = ' + cell.y);
                emptyCell = true;
                break;
            }
        }
        if (!emptyCell) {
            // we failed to find empty cell
            return;
        }
        var unit = new TD.Unit(this);
        unit.setPosition(cell.x, cell.y);
        unit.setOwner('bot');
        unit.activate();
        unit.init();
        this.tryToSpawnBoss(unit);
        this.currentMap.botUnitDirectionSetup(unit);
    }

    this.tryToSpawnBoss = function(unit) {
        var valueIncreasingWithTime = Math.round(this.statsTicksSurvived / 10);
        var valueIncreasingWithTimeSlow = Math.round(this.statsTicksSurvived / 15);
        var timeTillSpawnBoss = 10;
        var chanceToSpawnBoss = 1 + valueIncreasingWithTime;
        if (this.statsTicksSurvived < timeTillSpawnBoss) {
            // it is to early for boss
            return;
        }
        if (rand(0, 100) > chanceToSpawnBoss) {
            // not this time
            return;
        }
        var minBossPower = 2 + valueIncreasingWithTimeSlow;
        var maxBossPower = 7 + valueIncreasingWithTimeSlow;
        unit.power = rand(minBossPower,maxBossPower);
        unit.isBoss = true;
    }

    this.spawnBonus = function() {
        if (rand (1, 100) <= this.chanceToSpawnBonus) {
            var bonus = new TD.Bonus(this);
            this.currentMap.putBonusToMap(bonus);
        }
    }

    this.tick = function() {
        if (!this.running) {
            debug('Game will not tick anymore!');
            return;
        }

        this.newMap = new TD.Map(this.facet, this.mapConfig);
        // boost units
        // move units
        for (var unitId in this.units) {
            this.units[unitId].tick();
        }
        // all unit moved.
        this.duels();
        this.battles();
        this.handleBonuses();

        this.newMap.getBonuses(this.currentMap);
        this.currentMap = this.newMap;
        this.newMap = {};

        // Spawn for player
        this.spawnPlayerUnit();
        // Spawn Bonus
        this.spawnBonus();

        // Spawn for bot
        this.spawnBotUnit();
        this.currentMap.draw(this.units);
        this.checkLoseConditions();
        this.statsTicksSurvived++;
    }

    this.duels = function () {
        for (var unitId in this.units) {
            var unit1 = this.units[unitId];
            if (unit1.active) {
                var unitIdWasInCell = this.currentMap.get(unit1.x, unit1.y);
                if (unitIdWasInCell && this.units[unitIdWasInCell] !== undefined) {
                    var unit2 = this.units[unitIdWasInCell];
                    if (unit2.x == unit1.oldX && unit2.y == unit1.oldY) {
                        // DUEL BEGINS!
                        debug('Duel p1:' + unit1.power + ' p2:' + unit2.power);
                        if (unit1.power > unit2.power) {
                            var winner = unit1;
                            var loser  = unit2;
                        } else {
                            var winner = unit2;
                            var loser  = unit1;
                        }
                        if (unit1.owner == unit2.owner) {
                            // well actualy it is not a duel, but a union
                            winner.power = unit1.power + unit2.power;
                        } else {
                            // yea here they will actually battle!
                            winner.power = winner.power - loser.power;
                            this.statsBattle(winner, loser);
                        }
                        debug('remove unit duel');
                        this.removeUnit(loser);
                        if (winner.power == 0) {
                            debug('remove unit duel and winner');
                            this.removeUnit(winner);
                        }
                    }
                }
            }
        }
    }

    this.battles = function() {
        for (var unitId in this.units) {
            var unit1 = this.units[unitId];
            var existingUnitId = this.newMap.get(unit1.x, unit1.y);
            if (existingUnitId && this.units[existingUnitId] !== undefined) {
                // here will be battle

                var unit2 = this.units[existingUnitId];
                debug('Battle p1:' + unit1.power + ' p2:' + unit2.power);
                if (unit1.power > unit2.power) {
                    var winner = unit1;
                    var loser  = unit2;
                    this.newMap.setUnit(unit1, true);
                } else {
                    var winner = unit2;
                    var loser  = unit1;
                }
                if (unit1.owner == unit2.owner) {
                    // well actualy it is not a duel, but a union
                    winner.power = winner.power + loser.power;
                } else {
                    // yea here they will actually battle!
                    winner.power = winner.power - loser.power;
                    this.statsBattle(winner, loser);
                }
                debug('winner power:' + winner.power);
                this.removeUnit(loser);
                if (winner.power == 0) {
                    debug('remove unit battle and winner');
                    this.removeUnit(winner);
                }
            } else {
                debug ('set unit to map without battle p = ' + unit1.power);
                // there is no one to battle
                this.newMap.setUnit(unit1, true);
            }
        }
    }

    this.statsBattle = function(winner, loser) {
        if (winner.owner == 'player') {
            this.statsKilledUnits ++;
            this.statsPoints += this.pointsPerKill;
            if (winner.power == 0) {
                this.statsLostUnits ++;
            }
        } else {
            this.statsLostUnits ++;
            if (winner.power == 0) {
                this.statsKilledUnits ++;
                this.statsPoints += this.pointsPerKill;
            }
        }
        this.statsKilledPower += loser.power;
        this.statsLostPower   += loser.power;
        this.statsPoints      += loser.power
    }

    this.handleBonuses = function () {
        for(var key in this.currentMap.bonusesList) {
            var bonus = this.currentMap.bonusesList[key];
            var unitId = this.newMap.get(bonus.x, bonus.y);
            if (unitId && this.units[unitId] != undefined) {
                bonus.execute(this.units[unitId]);
            }
        }
    }

    this.userActionMoveUnit = function(unitId, direction) {
        debug('unit move');
        if (!this.checkUserUnit(unitId)) {
            return;
        }
        var unit = this.units[unitId];
        if (unit.direction == direction && unit.active == true) {
            this.facet.stopGame();
            debug('unit is already moving to this direction');
            return;
        }
        if (!isInt(direction) || direction < 0 || direction > 3) {
            this.facet.stopGame();
            debug('wrong direction provided by user (' + direction + ')');
            return;
        }
        // ok we save from any bullshit

        unit.direction = direction;
        unit.activate();
        this.tick();
    }

    this.userActionStopUnit = function (unitId) {
        this.checkUserUnit(unitId);
        var unit = this.units[unitId];
        unit.deactivate();
        this.tick();
    }

    this.checkUserUnit = function(unitId) {
        if (!unitId || this.units[unitId] == undefined) {
            this.facet.stopGame();
            debug('unit not found. unitId = ' + unitId);
            return false;
        }
        var unit = this.units[unitId];
        if (unit.owner != 'player') {
            this.facet.stopGame();
            debug('unit don`t belong to user. unitId = ' + unitId);
            return false;
        }
        return true;
    }

    this.checkLoseConditions = function () {
        var center = this.currentMap.getCenter();
        unitId = this.currentMap.get(center.x, center.y);
        if (unitId && this.units[unitId] !== undefined) {
            if (this.units[unitId].owner != 'player') {
                this.stop();
                $('#turnsSurvived').html(this.statsTicksSurvived);
                $('#unitsKilled').html(this.statsKilledUnits);
                $('#pointsEarned').html(this.statsPoints);

                $("#myModal").modal({                    // wire up the actual modal functionality and show the dialog
                    "backdrop"  : "static",
                    "keyboard"  : true,
                    "show"      : true                     // ensure the modal is shown immediately
                });

                var checkKey = $('#checkKey').val();

                Ajax.json('/MathEffect/save', {
                    //params : '__csrf=' + Ajax.getCSRF(),
                    data: 'turnsSurvived=' + this.statsTicksSurvived +
                        '&unitsKilled=' + this.statsKilledUnits +
                        '&pointsEarned=' + this.statsPoints +
                        '&checkKey=' + checkKey +
                        '&_token=' + $('#laravel-token').val()
                    //callBack : function(){Ajax.linkLoadingEnd(link)}
                });
            }
        }
    }

    this.stop = function () {
        this.running = false;
    }
}
 
 /**
 * Created by Ilya Rubinchik (ilfate) on 12/09/14.
 */


TD.Facet = function (game) {
    this.game = game;
    this.lockValue = false;

    this.stopGame = function() {
        this.game.stop();
    }

    this.lock = function () {
        this.lockValue = true;
    }
    this.unlock = function () {
        this.lockValue = false;
    }

    this.isLock = function() {
        return this.lockValue;
    }


    this.userActionMoveUnit = function(unitId, direction) {
        if (!this.isLock()) {
            this.lock();
            this.game.userActionMoveUnit(unitId, direction);
            this.unlock();
        }
    }
    this.userActionStopUnit = function(unitId) {
        if (!this.isLock()) {
            this.lock();
            this.game.userActionStopUnit(unitId);
            this.unlock();
        }
    }
} 
 /**
 * Created by Ilya Rubinchik (ilfate) on 12/09/14.
 */


TD.Map = function (facet, config) {
    this.facet = facet;
    this.config = config;
    this.unitIds = {};
    this.mapEl = false;
    this.oneCellPixelSize = 64;
    this.deathAnimations = [];
    this.directionName = ['up', 'right', 'down', 'left'];
    this.bonuses = [];
    this.bonusesList = [];

    this.size   = config.getSize();
    this.center = config.getCenter().x;

    this.getRandomBotSpawnCell = function() {
        // from 0 to total + 1; There is a very small chance that it actually will be total+1.
        var randomNumber = rand(1, this.config.getTotalSpawnCells());
        if (randomNumber > this.config.getTotalSpawnCells()) randomNumber = this.config.getTotalSpawnCells();
        return this.config.getSpawnCellsFlat(randomNumber);
    }

    this.getCenter = function() {
        return  this.config.getCenter();
    }

    this.setUnit = function(unit) {

        if (this.unitIds[unit.x] !== undefined) {
            if (this.unitIds[unit.x][unit.y] !== undefined) {
                info ('We can`t put a unit to occupied cell (But this is ok some times =_=)');
            }
        } else {
            this.unitIds[unit.x] = {};
        }

        this.unitIds[unit.x][unit.y] = unit.getId();
    }

    this.removeUnit = function(unit) {
        var unitOnMap = this.get(unit.x, unit.y);
        if (unitOnMap) {
            this.unitIds[unit.x][unit.y] = undefined;
        }
    }

    this.get = function(x, y) {
        if (this.unitIds[x] !== undefined) {
            if (this.unitIds[x][y] !== undefined) {
                return this.unitIds[x][y];
            }
        }
        return false;
    }

    this.getRandomCoordNotinCenter = function() {
        if (rand(0, 1) == 1) {
            return rand(1, this.center - 2)
        } else {
            return rand(this.center + 2, this.size - 2);
        }
    }

    this.putBonusToMap = function(bonus, x, y) {
        if (!x && !y) {
            bonus.x = this.getRandomCoordNotinCenter();
            bonus.y = this.getRandomCoordNotinCenter();
            if (this.get(bonus.x, bonus.y)) {
                debug ('Can`t put bonus under unit!');
                return false;
            }
        }
        if (this.bonuses[bonus.x] !== undefined) {
            if (this.bonuses[bonus.x][bonus.y] !== undefined) {
                debug ('We can`t put a bonus to occupied cell (But this is ok some times =_=)');
                return false;
            }
        } else {
            this.bonuses[bonus.x] = {};
        }

        this.bonuses[bonus.x][bonus.y] = bonus;
        this.bonusesList.push(bonus);
    }

    this.getBonuses = function (map) {
        this.bonuses = map.bonuses;
        for (var key in map.bonusesList) {
            var bonus = map.bonusesList[key];
            if (bonus.active) {
                this.bonusesList.push(bonus);
            } else {
                delete this.bonuses[bonus.x][bonus.y];
            }
        }
    }

    this.getNextCell = function(x, y, d) {
        switch (d) {
            case 0: y--; break;
            case 1: x++; break;
            case 2: y++; break;
            case 3: x--; break;
        }
        if (x < 0 || y < 0 || x >= this.size || y >= this.size) {
            return false;
        }
        return {'x' : x, 'y': y};
    }

    this.checkUnitDirection = function(unit) {
        var nextCell = this.getNextCell(unit.x, unit.y, unit.direction);
        if (!nextCell) {
            unit.deactivate();
        }

        if (unit.owner == "bot" && (unit.x != unit.oldX || unit.y != unit.oldY)) {
            var center = this.getCenter().x;
            // here we will check is unit need to change direction
            if ((unit.x >= center - 1 && unit.x <= center + 1)
                || (unit.y >= center - 1 && unit.y <= center + 1)) {
                debug('BOT_PATH: unit is in roads');
                // yea unit is on one of the roads.
                // first of all let`s check was this unit already on the road before

                if ((unit.oldX >= center - 1 && unit.oldX <= center + 1)
                    || (unit.oldY >= center - 1 && unit.oldY <= center + 1)) {
                    debug('BOT_PATH: unit was already on roads');
                    // no he was here!
                    // Ok let`s check is he on the main road
                    if (unit.x == center || unit.y == center) {
                        debug('BOT_PATH: unit is on center road');
                        // yes he is on center road
                        // but maybe he already was here?
                        if (unit.oldX == center || unit.oldY == center) {
                            // yes he is on the main road, so we don`t care
                        } else {
                            debug('BOT_PATH: unit just entered center road');
                            // ok! he is on main road now, but he was not before!
                            // so we need change direction!
                            unit.direction = this.getDirectionToCenter(unit.x, unit.y);
                            debug('New direction for unit on main road = ' + unit.direction);
                        }
                    }
                } else {
                    // Unit is just entered the side road
                    // we need to direct him properly
                    unit.direction = this.getDirectionForSideRoad(unit.x, unit.y);
                    debug('New direction for unit on side road = ' + unit.direction);
                }
            }
        }
    }

    this.getDirectionToCenter = function(x, y) {
        //debug('main road directions for x='+x+', y='+y);
        var center = this.getCenter().x;
        if (x != center) {
            if (x < center) {
                return 1;
            } else {
                return 3;
            }
        } else {
            if (y < center) {
                return 2;
            } else {
                return 0;
            }
        }
    }

    this.getDirectionForSideRoad = function(x, y) {
        //debug('side road directions for x='+x+', y='+y);
        var center = this.getCenter().x;
        if (x == center - 1 || x == center + 1) {
            // unit is on vertical road
            if (y < center) {
                return 2;
            } else {
                return 0;
            }
        } else {
            if (x < center) {
                return 1;
            } else {
                return 3;
            }
        }
    }

    this.botUnitDirectionSetup = function(unit) {
        possibleDirections = [];
        if (unit.x == 0) {
            possibleDirections.push(1);
        } else if (unit.x == this.size - 1) {
            possibleDirections.push(3);
        }
        if (unit.y == 0) {
            possibleDirections.push(2);
        } else if (unit.y == this.size - 1) {
            possibleDirections.push(0);
        }
        if (possibleDirections.length > 1) {
            if (rand(0, 1) == 1) {
                unit.direction = possibleDirections[1];
            } else {
                unit.direction = possibleDirections[0];
            }
        } else {
            unit.direction = possibleDirections[0];
        }
    }

    this.animateDeath = function(unit) {
        this.deathAnimations.push({'id':unit.getId(), 'x':unit.x, 'y':unit.y,'direction':unit.direction, 'active':unit.active});
    }

    this.draw = function(units) {
        this.mapEl = $('#tdMap');
        $('#tdMap .tdUnit').addClass('inUpdate');

        for (var key in units) {
            if (units[key]) {
                this.drawUnit(units[key]);
            }
        }
        for (var key in this.deathAnimations) {
            this.drawDeath(this.deathAnimations[key]);
        }
        this.drawBonus();

        this.deathAnimations = [];
        this.isDrawn = true;
        // ok map is already there.
    }

    this.drawMap = function() {
        var center = this.getCenter().x;
        this.mapEl = $('#tdMap');
        this.mapEl.html('').width(this.size * this.oneCellPixelSize);
        for (var y = 0; y < this.size; y ++) {
            for (var x = 0; x < this.size; x ++) {
                var el = $('<div></div>')
                    .addClass('tdCell')
                    .addClass('cell-'+x+'-'+y)
                    .addClass('emptyCell');
                if ((x >= center - 1 && x <= center + 1)
                    || (y >= center - 1 && y <= center + 1)) {
                    // this cell is part of the road
                    if (x == center || y == center) {
                        // this cell is part of main road
                        el.addClass('main-road');
                    } else {
                        el.addClass('side-road');
                    }
                }
                // empty cell
                this.mapEl.append(el);
            }
        }
        this.drawHelpPath();
    }

    this.drawBonus = function() {
        $('#tdMap .bonus').remove();
        for (var key in this.bonusesList) {
            var bonus = this.bonusesList[key];
            $('.cell-'+bonus.x+'-'+bonus.y).append(
                $('<div>' + bonus.getText() + '</div>').addClass('bonus').addClass('b-' + bonus.type)
            );

        }
    }

    this.helpPathShowCallback = function(x, y) {
        return function() {
            $('.arrow-for-' + x + '-' + y).fadeIn(400);
        }
    }
    this.helpPathHideCallback = function(x, y) {
        return function() {
            $('.arrow-for-' + x + '-' + y).clearQueue().hide().css('opacity', 100);
        }
    }

    this.drawHelpPath = function() {
        for (var y = 0; y < this.size; y ++) {
            for (var x = 0; x < this.size; x ++) {
                if (x == 0 || x == this.size -1 || y == 0 || y == this.size -1) {
                    // this is a spawn for bots
                    var el = $('.cell-'+x+'-'+y);
                    var d = 0;
                    if (x == 0) d = 1;
                    if (x == this.size -1) d = 3;
                    if (y == 0) d = 2;
                    if (y == this.size -1) d = 0;
                    this.drawHelpPathDirection(x, y, d);
                    if (x == y || (x == 0 && y == this.size - 1) || (x == this.size - 1 && y == 0)) {
                        // it is corner cell
                        if (x == 0) {
                            this.drawHelpPathDirection(x, y, 1);
                        } else {
                            this.drawHelpPathDirection(x, y, 3);
                        }
                    }
                    el.bind('mouseenter', this.helpPathShowCallback(x, y))
                    el.bind('mouseleave', this.helpPathHideCallback(x, y))
                }
            }
        }
    }

    this.drawHelpPathDirection = function(x, y, d) {
        var center = this.config.getCenter().x;
        var isOnMainRoad = false;
        var isOnSideRoad = false;
        if (x == center || y == center) {isOnMainRoad = true;}
        if ((x >= center - 1 && x <= center + 1)
            || (y >= center - 1 && y <= center + 1)) {isOnSideRoad = true;}
        var dx = x;
        var dy = y;
        while (dx != center || dy != center) {

            var arrow = $('.cell-'+dx+'-'+dy + ' .arrow-' + d);
            if (!arrow[0]) {
                var newArrow = $('<div></div>')
                    .addClass('arrow')
                    .addClass('arrow-for-' + x + '-' + y)
                    .addClass('arrow-' + d)
                    .addClass('fa fa-long-arrow-' + this.directionName[d])
                $('.cell-'+dx+'-'+dy).append(newArrow)
            } else {
                // we have that arrow
                arrow.addClass('arrow-for-' + x + '-' + y);
            }
            switch (d) {
                case 0: dy--; break;
                case 1: dx++; break;
                case 2: dy++; break;
                case 3: dx--; break;
            }
            if (!isOnSideRoad &&
                ((dx >= center - 1 && dx <= center + 1)
                    || (dy >= center - 1 && dy <= center + 1))) {
                d = this.getDirectionForSideRoad(dx, dy);
                isOnSideRoad = true;
            }
            if (!isOnMainRoad &&
                (dx == center || dy == center)) {
                d = this.getDirectionToCenter(dx, dy);
                isOnMainRoad = true;
            }

        }
    }

    this.drawUnit = function(unit) {
        // is unit exist on map
        var el = $('.unit-' + unit.getId());
        if (el[0]) {
            // unit exist
            //el.find('.tdButton').remove();
            if (unit.owner == 'player') {
                this.makeButtonsforUnit(el, unit);
            }
            el.removeClass('inUpdate');
            el.animate({
                'left' : unit.x * this.oneCellPixelSize,
                'top' : unit.y * this.oneCellPixelSize
            }, 1000);
            el  .removeClass('unit-move-0')
                .removeClass('unit-move-1')
                .removeClass('unit-move-2')
                .removeClass('unit-move-3');
        } else {
            // draw new unit
            var el = $('<div></div>')
                .addClass('tdUnit')
                .addClass('unit-' + unit.getId());
            if (unit.owner == 'player') {
                el.addClass('playerUnit');
                this.makeButtonsforUnit(el, unit);
            } else {
                el.addClass('botUnit');
            }
            if (unit.isBoss) {
                el.addClass('boss');
            }
            el.hide();
            el.css('left', unit.x * this.oneCellPixelSize);
            el.css('top',  unit.y * this.oneCellPixelSize);
            el.fadeIn(1000)
            
            var moveArrow = $('<div></div>').addClass('moveArrow');
            el.append(moveArrow);
            var moveBlock = $('<div></div>').addClass('moveBlock');
            el.append(moveBlock);
            var unitPower = $('<div></div>').addClass('unitPower');
            el.append(unitPower);

            this.mapEl.append(el);
        }
        this.setUnitElPower(unit);
        if (unit.active) {
            el.addClass('unit-move-' + unit.direction);
        }
    }

    this.setUnitElPower = function(unit)  {
        var el = $('.unit-' + unit.getId());
        $('.unit-' + unit.getId() + ' .unitPower').html(unit.power);
        var level = Math.ceil(unit.power / 4);
        if (level > 10) level = 10;
        
        el.removeClass('power-1', 'power-2', 'power-3', 'power-4', 'power-5', 'power-6', 'power-7', 'power-8', 'power-9', 'power-10');
        
        el.addClass('power-' + level);
    }

    this.drawDeath = function (deadUnit) {
        var el = $('.unit-' + deadUnit.id);
        el.removeClass('inUpdate');
        if (deadUnit.active) {
            el.removeClass('unit-move-0')
                .removeClass('unit-move-1')
                .removeClass('unit-move-2')
                .removeClass('unit-move-3');
            el.addClass('unit-move-' + deadUnit.direction);        
        }
        el.find('.tdButton').remove();
        el.animate({
            'left' : deadUnit.x * this.oneCellPixelSize,
            'top' : deadUnit.y * this.oneCellPixelSize,
            'opacity' : 0
        }, 1000, function(el) {
            $( this ).remove();
        });
    }

    this.makeButtonsforUnit = function(el, unit) {
        if (!el.find('.tdButton')[0]) {
            this.createButtonsForUnit(el, unit);
        }
        el.find('.tdButton').show();
        if (unit.active == true) {
            el.find('.arrow-' + unit.direction).hide();
        }
    }

    this.createButtonsForUnit = function(el, unit) {
        var buttons = ['go_0', 'go_1', 'go_2', 'go_3'];
        for(var key in buttons) {
            var button = $('<div></div>').addClass('tdButton');
            switch (buttons[key]) {
                case 'stop':
                    button
                        .addClass('fa fa-shield')
                        .bind("click", function(){
                            TD.Facet.userActionStopUnit(unit.getId());
                        });
                    switch (unit.direction) {
                        case 0: button.addClass('tdGoTopButton'); break;
                        case 1: button.addClass('tdGoRightButton'); break;
                        case 2: button.addClass('tdGoBottomButton'); break;
                        case 3: button.addClass('tdGoLeftButton'); break;
                    }
                    break;
                case 'go_0':
                case 'go_1':
                case 'go_2':
                case 'go_3':
                    var direction = parseInt(buttons[key].substr(3,1));
                    button
                        .addClass('arrow-' + direction)
                        .addClass('fa fa-arrow-circle-' + this.directionName[direction])
                        .bind("click", this.helpUserActionMoveCallback(unit.getId(), direction));
                    break;
                default :
                    button = false;
                    break;
            }
            if (button) {
                el.append(button);
            }
        }
    }

    this.helpUserActionMoveCallback = function(unitId, direction) {
        return function() {
            TD.Facet.userActionMoveUnit(unitId, direction);
        }
    }
}
 
 /**
 * Created by Ilya Rubinchik (ilfate) on 12/09/14.
 */


TD.Map.Config = function () {

    this.size   = 0;
    this.cells  = [];
    this.spawnCells  = [];
    this.spawnCellsFlat  = [];
    this.totalSpawnCells = 0;
    this.center = 0;

    this.setSize = function(size) {
        this.size = size;
        this.center = Math.round(size / 2) - 1;
    }
    this.getSize = function () {
        return this.size;
    }
    this.setCells = function(cells) {
        this.height = cells;
    }

    this.getCenter = function () {
        return {'x' : this.center, 'y' : this.center};
    }

    this.setSpawn = function() {
        if (!this.size) {
            info('Map size it not setup for calculating spawn cells');
            return;
        }
        for (var x = 0; x < this.size; x++) {
            for (var y = 0; y < this.size; y++) {
                if (x == 0 || y == 0 || x == this.size - 1 || y == this.size - 1) {
                    this.totalSpawnCells++;
                    this.spawnCellsFlat[this.totalSpawnCells] = {'x' : x, 'y': y};
                }
            }
        }
    }

    this.getTotalSpawnCells = function () {
        return this.totalSpawnCells;
    }
    this.getSpawnCellsFlat = function (key) {
        return this.spawnCellsFlat[key];
    }

} 
 /**
 * Created by Ilya Rubinchik (ilfate) on 12/09/14.
 */


TD.Unit = function (game) {
    this.game = game;
    this.direction = 0;
    this.active    = false;
    this.power     = 1
    this.unitId    = 0;
    this.oldX      = 0
    this.oldY      = 0
    this.x         = 0;
    this.y         = 0;
    this.owner     = '';
    this.isBoss    = false;

    this.notMovingTurns = 0
    this.turnsForDebuffToStart = 4;

    this.init = function () {
        this.unitId = this.game.getNewUnitId();
        this.game.setUnit(this);
    }

    this.tick = function() {
        var center = this.game.getCenter();
        if (center.x == this.x && center.y == this.y) {
            // center power bonus
            this.power ++;
        }

        if (this.active) {
            this.game.checkUnitDirection(this);
        }
        if (this.active) {
            this.power ++;
            this.move();
        } else {
            this.notMovingDebuff();
        }
    }

    this.move = function(x, y) {
        this.notMovingTurns        = 0;
        this.turnsForDebuffToStart = 4;
        if (x && y) {
            // move to specified position
        } else {
            switch (this.direction) {
                case 0: x = this.x; y = this.y - 1; break;
                case 1: x = this.x + 1; y = this.y; break;
                case 2: x = this.x; y = this.y + 1; break;
                case 3: x = this.x - 1; y = this.y; break;
            }
        }
        this.oldX = this.x;
        this.oldY = this.y;
        this.x = x;
        this.y = y;
        debug('Unit with power ' + this.power + ' is moving from (' + this.oldX + ', ' + this.oldY + ') to (' + this.x + ', ' + this.y + ')')
    }

    this.notMovingDebuff = function() {
        this.notMovingTurns++;
        var center = this.game.getCenter().x;
        if (this.x == center && this.y == center) {
            return;
        }
        if (this.notMovingTurns >= this.turnsForDebuffToStart) {
            this.power--;
            if (this.power > 30) {
                this.power--;
            }
            if (this.power > 60) {
                this.power--;
            }
            this.notMovingTurns = 0;
            if (this.turnsForDebuffToStart > 1) {
                this.turnsForDebuffToStart--;
            }
            if (this.power <= 0) {
                this.game.removeUnit(this);
            }
            
        }
    }

    this.getId = function() {
        return this.unitId;
    }

    this.setPosition = function (x, y) {
        this.x    = x;
        this.oldX = x;
        this.y    = y;
        this.oldY = y;
    }

    this.setOwner = function (owner) {
        switch (owner) {
            case 'player':
            case 'bot':
                break;
            default:
                info('Unit owner is wrong');
                break;
        }
        this.owner = owner;
    }

    this.activate = function() {
        this.active = true;
    }
    this.deactivate = function() {
        this.active = false;
    }
}

TD.Bonus = function (game) {
    this.game   = game;
    this.id     = 0;
    this.x      = 0;
    this.y      = 0;
    this.active = 1;
    this.power  = 0;
    this.type   = '';

    this.possibleTypes = ['plus', 'minus'];
    this.typesPowers = {'plus' : [1, 5], 'minus' : [1, 5]};

    this.type = this.possibleTypes[rand(0, this.possibleTypes.length - 1)];
    this.power = rand(this.typesPowers[this.type][0], this.typesPowers[this.type][1]);

    this.execute = function(unit) {
        switch (this.type) {
            case 'plus':
                unit.power += this.power;
                break;
            case 'minus':
                unit.power -= this.power;
                if (unit.power <= 0) {
                    this.game.removeUnit(unit);
                }
                break;
        }

        this.active = false;
    }

    this.getText = function() {
        switch (this.type) {
            case 'plus':
                return '+' + this.power;
            case 'minus':
                return '-' + this.power;
        }
    }
} 
 /* *
	*
	* made by ilfate.=/[-7
	* started at 27.05.11
	*
	*/
if ($('body.robot-rock').length > 0) {

	$(document).ready(function () {
		var map = [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 2, 2, 2, 2, 2, 1, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 2, 2, 1, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 2, 0, 0, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 2, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0], [2, 2, 2, 1, 2, 2, 2, 1, 1, 1, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0], [0, 1, 2, 1, 1, 2, 2, 1, 2, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0], [0, 2, 2, 1, 2, 1, 2, 1, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0], [0, 1, 0, 1, 2, 1, 2, 1, 2, 2, 2, 2, 0, 2, 0, 0, 0, 0, 0, 0], [0, 2, 2, 2, 2, 2, 2, 1, 2, 1, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0], [0, 2, 0, 2, 2, 1, 1, 1, 2, 2, 2, 2, 1, 2, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],];

		game = new RRAnimator(map);
		game.init('/rr/');
		pl = [];

		pl[3] = new Player();
		var pl_t = pl[3];
		pl_t.id = 3;
		pl_t.events = [{
			"code": "F1",
			"time": 4091,
			"attrs": {
				"start_time": 4091,
				"start_x": 5.5,
				"start_y": 8.5,
				"end_time": 4271,
				"end_x": 7.37,
				"end_y": 11.39
			}
		}];
		pl_t.bot.id = 3;
		pl_t.bot.x = 14;
		pl_t.bot.y = 14;
		pl_t.bot.d = 1;
		pl_t.bot.model = Math.round(Math.random() * 2 + 1);
		pl_t.log = {
			11: "M1",
			261: "M1",
			511: "M1",
			761: "M1",
			1011: "M1",
			1261: "M1",
			1511: "R2",
			1671: "M1",
			1921: "M1",
			2171: "M1",
			2421: "M1",
			2671: "M1",
			2921: "M1",
			3171: "M1",
			3421: "M1",
			3671: "M1",
			3921: "R2",
			4091: "F1",
			4591: "D1",
			5551: "ST"
		};

		game.addPlayer(pl_t);

		pl[1] = new Player();
		var pl_t = pl[1];
		pl_t.id = 1;
		pl_t.events = [{
			"code": "F1",
			"time": 3001,
			"attrs": {"start_time": 3001, "start_x": 6.5, "start_y": 5.5, "end_time": 3241, "end_x": 9.62, "end_y": 9.1}
		}, {
			"code": "F1",
			"time": 3501,
			"attrs": {
				"start_time": 3501,
				"start_x": 6.5,
				"start_y": 5.5,
				"end_time": 3821,
				"end_x": 7.74,
				"end_y": 11.39
			}
		}, {
			"code": "F1",
			"time": 4001,
			"attrs": {
				"start_time": 4001,
				"start_x": 6.5,
				"start_y": 5.5,
				"end_time": 4161,
				"end_x": 5.45,
				"end_y": 8.35
			}
		}, {
			"code": "F1",
			"time": 4501,
			"attrs": {
				"start_time": 4501,
				"start_x": 6.5,
				"start_y": 5.5,
				"end_time": 4721,
				"end_x": 4.96,
				"end_y": 9.68
			}
		}, {
			"code": "F1",
			"time": 5341,
			"attrs": {"start_time": 5341, "start_x": 6.5, "start_y": 6.5, "end_time": 5501, "end_x": 7.4, "end_y": 9.35}
		}];
		pl_t.bot.id = 1;
		pl_t.bot.x = 2;
		pl_t.bot.y = 2;
		pl_t.bot.d = 3;
		pl_t.bot.model = Math.round(Math.random() * 2 + 1);
		//pl_t.bot.marg = 16;
		pl_t.log = {
			11: "R2",
			171: "M1",
			511: "M1",
			841: "M1",
			1171: "M1",
			1511: "R2",
			1671: "R2",
			1841: "R2",
			2001: "M1",
			2341: "M1",
			2671: "M1",
			3001: "F1",
			3501: "F1",
			4001: "F1",
			4501: "F1",
			5001: "M1",
			5341: "F1",
			5551: "ST"
		};
		//console.log({11:"R2",171:"M1",511:"M1",841:"M1",1171:"M1",1511:"R2",1671:"R2",1841:"R2",2001:"M1",2341:"M1",2671:"M1",3001:"F1",3501:"F1",4001:"F1",4501:"F1",5001:"M1",5341:"F1",5551:"ST"});
		game.addPlayer(pl_t);

		pl[2] = new Player();
		var pl_t = pl[2];
		pl_t.id = 2;
		pl_t.events = [{
			"code": "F1",
			"time": 3371,
			"attrs": {
				"start_time": 3371,
				"start_x": 7.5,
				"start_y": 11.5,
				"end_time": 3651,
				"end_x": 7.78,
				"end_y": 5.9
			}
		}, {
			"code": "F1",
			"time": 3871,
			"attrs": {
				"start_time": 3871,
				"start_x": 7.5,
				"start_y": 11.5,
				"end_time": 4061,
				"end_x": 5.7,
				"end_y": 8.44
			}
		}, {
			"code": "F1",
			"time": 4371,
			"attrs": {
				"start_time": 4371,
				"start_x": 7.5,
				"start_y": 11.5,
				"end_time": 4551,
				"end_x": 5.63,
				"end_y": 8.61
			}
		}];
		pl_t.bot.id = 2;
		pl_t.bot.x = 2;
		pl_t.bot.y = 14;
		pl_t.bot.d = 1;
		pl_t.bot.model = Math.round(Math.random() * 2 + 1);
		//pl_t.bot.marg = 16;
		pl_t.log = {
			41: "M1",
			381: "R2",
			541: "R2",
			711: "R2",
			871: "M1",
			1211: "M1",
			1541: "M1",
			1871: "M1",
			2211: "M1",
			2541: "R2",
			2711: "M1",
			3041: "M1",
			3371: "F1",
			3871: "F1",
			4371: "F1",
			4871: "M1",
			5201: "M1",
			5541: "D1",
			5551: "ST"
		};
		game.addPlayer(pl_t);

		game.draw();
	});
}


function Pulsar(canvas, options) {
	this.options = options;
	if (!this.options['interval']) this.options['interval'] = 10;
	if (!this.options['time_limit']) this.options['time_limit'] = 30;
	this.events = [];
	this.layers = [];
	this.func = [];
	this.time_func = [];
	this.ready = 0;
	this.start_on_ready = 0;
	this.id_interval = 0;
	this.time = 0;
	this.runing = 0;
	this.shutDown = false;
	//this.updated = 1;
	if (options['multi_canvas']) {
		this.is_multi_canvas = 1;
		this.div = document.getElementById(canvas);
		for (var attr in this.options) {
			if (attr != 'interval')
				this.div[attr] = this.options[attr];
		}
	}
	else {
		this.is_multi_canvas = 0;
		var tag = document.getElementById(canvas);
		for (var attr in this.options) {
			if (attr != 'interval')
				tag[attr] = this.options[attr];
		}
		this.ctx = tag.getContext('2d');
	}
	this.setOptions = function (options) {
		this.options = options;
	}

	this.addLayer = function (name, index) {
		if (this.layers[index] != undefined) {
			console.error('Error layer creating');
			return false;
		}
		else {
			this.layers[index] = new Layer(name, index, this);
		}

		if (this.is_multi_canvas == 1) {
			var canvas_elem = document.createElement('canvas');
			canvas_elem.id = name;
			canvas_elem.className = "Pulsar_Canvas";
			canvas_elem.style.zIndex = index;
			this.div.appendChild(canvas_elem);
			for (var attr in this.options) {
				if (attr != 'interval')
					canvas_elem[attr] = this.options[attr];
			}
			this.layers[index].ctx = canvas_elem.getContext('2d');
			this.layers[index].tag = canvas_elem;
		}
		return this.layers[index];
	}
	this.getLayer = function (name) {
		for (var key in this.layers) {
			if (this.layers[key].name == name) {
				return this.layers[key];
			}
		}
		return false;
	}
	this.tryReady = function () {
		for (var key in this.layers) {
			if (this.layers[key].ready != 1) {
				this.ready = 0;
				return false;
			}
		}
		this.ready = 1;
		if (this.start_on_ready == 1) {
			this.draw();
		}
		return this;
	}

	this.draw = function () {
		if (this.ready == 1) {
			for (var key in this.layers) {
				this.layers[key].draw();
			}

			if (this.runing == 0) this.run(this);
		} else {
			this.start_on_ready = 1;
		}
	};
	this.run = function (pulsar) {
		this.runing = 1;
		this.id_interval = setInterval(function () {
			pulsar.update();
		}, this.options['interval'])
	}
	this.addFunction = function (f) {
		this.func[this.func.length + 1] = f;
		return this;
	}
	this.addTimeFunction = function (f, time) {
		this.time_func[time] = f;
		return this;
	}
	this.clearAll = function () {
		if (!this.is_multi_canvas) {
			this.ctx.clearRect(0, 0, this.options['width'], this.options['height']);
		}
	}
	this.update = function () {
		this.time += this.options['interval'];
		if (this.time > this.options['time_limit'] * 1000 || this.shutDown) clearInterval(this.id_interval);
		for (var key in this.func) {
			this.func[key](this);
		}
		for (var key in this.time_func) {
			if (key <= this.time) {
				this.time_func[key](this);
				delete this.time_func[key];
			}
		}
		this.clearAll();
		this.draw();
	}

} 
 function Layer(name,index,pulsar)
{
	this.index = index;
	this.name = name;
	this.objects = [];
	this.supporting_objects = [];
	this.parent = pulsar;
	this.ready = 1;
	this.x = pulsar.options['width']/2;
	this.y = pulsar.options['height']/2;
	this.updated = 1;
	this.ctx;
	this.tag;
	
	this.start_time = 0;
	this.vx = 0;
	this.vy = 0;
	this.iter = 0;
	this.a_iter = 0;
	this.angle = 0;
	this.vangle = 0;
	this.time = 0;
	this.was_r = [];
	
	this.getCtx = function()
	{
		if(this.ctx) return this.ctx;
		else return this.parent.ctx;
	}
	this.clear = function()
	{	
		var w = this.parent.options['width'];
		var h = this.parent.options['height'];
		this.getCtx().clearRect(-w,-h,w*2,h*2);
	}
	
	this.setIndex = function (index)
	{
		if(this.parent.layers[index] != undefined)
		{
			return false;
		}
		else
		{
			this.update();
			this.parent.layers[index] = this;
			delete this.parent.layers[this.index];
			this.index = index;
			if(this.parent.is_multi_canvas == 1)
			{
				this.tag.style.zIndex = index;
			}
		}
		return this;
	}
	
	this.addObject = function (name,type,is_supporting)
	{
		if(typeof(type) == 'string')
		{
			if(!is_supporting)
			{
				if(name)
				{
					this.objects[name] = new PlObject(name,type,this);
					return this.objects[name];
				}
				else 
				{
					this.objects[this.objects.length+1] = new PlObject(name,type,this);
					return this.objects[this.objects.length];
				}
			}
			else
			{
				this.update();
				this.supporting_objects[name] = new PlObject(name,type,this);
				return this.supporting_objects[name];
			}
		}
		else if(typeof(type) == 'object')
		{
			if(!is_supporting)
			{
				this.objects[name] = type.clone();
				//this.objects[name].ready = 1;
				//this.objects[name].essence.ready = 1;
				return this.objects[name];
			}
			else
			{
				this.supporting_objects[name] =  type.clone();
				//this.supporting_objects[name].ready = 1;
				//this.supporting_objects[name].essence.ready = 1;
				return this.supporting_objects[name];
			}
		}
	}
	
	this.getObject =function(name) 
	{
		if(this.objects[name]) return this.objects[name];
		else if(this.supporting_objects[name]) return this.supporting_objects[name];
	}
	this.moveTo = function(x,y,time)
	{
		if(!time) console.error('U mast set time for function moveTo');
		this.update();
		var interval = this.parent.options['interval'];
		this.start_time = this.parent.time;
		var dx = this.x - x;
		var dy = this.y - y;
		this.vx = -(dx/time) * interval;
		this.vy = -(dy/time) * interval;
		this.iter = Math.round(time / interval);
		//this.getCtx().translate(this.x, this.y);
		return this;
	}
	this.rotate = function(angle,time)
	{
		this.update();
		var dangle = this.angle - angle;
		var interval = this.parent.options['interval'];
		this.vangle = (dangle/time) * interval;
		this.a_iter = Math.round(time / interval);
		return this;
	}
	this.tryReady = function()
	{
		for( o in this.objects)
		{
			if(this.objects[o].ready != 1)
			{
				this.ready = 0;
				return false;
			}
		}
		for( o in this.supporting_objects)
		{
			if(this.supporting_objects[o].ready != 1)
			{
				this.ready = 0;
				return false;
			}
		}
		
		this.ready = 1;
		this.parent.tryReady();
		return this;
	}
	this.update = function()
	{
		this.updated = 1;
	}
	this.chechUpdate = function()
	{
		if(this.updated != 1)
		{
			if(this.iter > 0)
			{
				this.update();
				return true;
			}
			if(this.a_iter > 0)
			{
				this.update();
				return true;
			}
			for( o in this.objects)
			{
				if(this.objects[o].chechUpdate())
				return true;
			}
			for( o in this.supporting_objects)
			{
				if(this.supporting_objects[o].chechUpdate())
				return true;
			}
		}
	}
	this.draw = function ()
	{
		this.chechUpdate();
		if(this.updated == 1)
		{
			this.clear();
			if(this.iter > 0)
			{
				this.x += this.vx;
				this.y += this.vy;
				this.iter--;
				//console.info(this.x, this.y);
				
			}
			if(this.time != this.parent.time)
			{
				if(this.a_iter > 0)
				{
					this.angle -= this.vangle;
					this.a_iter--;
				}
			}
			this.getCtx().translate(this.x, this.y);
			if(this.angle)
			{
				//this.getCtx().save();
				//console.info(Math.round(this.x+this.w/2), Math.round(this.y+this.h/2));
				//this.getCtx().translate(this.x+this.parent.options['width']/2, this.y+this.parent.options['height']/2);
				this.getCtx().rotate(-Math.PI*(this.angle/180));
				//this.was_r['x'] = this.x; 
				//this.was_r['y'] = this.y; 
				//this.x = -(this.parent.options['width']/2);
				//this.y = -(this.parent.options['height']/2);
			}
			
			for( o in this.objects)
			{
				this.objects[o].draw();
			}
			if(this.angle)
			{
				//this.x = this.was_r['x'];
				//this.y = this.was_r['y'];
				//this.was_r = [];
				//this.object.layer.getCtx().rotate(Math.PI*(this.angle/180));
				this.getCtx().rotate(Math.PI*(this.angle/180));
				//this.getCtx().translate(0,0);
			}
			this.getCtx().translate(-this.x, -this.y);
		}
		this.updated = 0;
		
	}
}

 
 
function Pl_drawing(obj)
{
	this.x = 0;
	this.y = 0;
	this.w = 0;
	this.h = 0;
	this.sx = 0;
	this.sy = 0;
	this.sw = 0;
	this.sh = 0;
	this.was = [];
	this.was_r = [];
	this.angle = 0;
	this.vangle = 0;
	this.animation_iters = 0;
	this.animation_frame = 0;
	this.animation_frame_counter = 1;
	this.animation_name = '';
	this.animations = [];
	this.object = obj;
	//this.object.layer.ready = 0;
	this.object.ready = 1;
	this.ready = 1;
	this.time;
	this.type;

	this.gx = function()
	{
		return this.x ;//+ this.object.layer.x;
	}
	this.gy = function()
	{
		return this.y ;//+ this.object.layer.y;
	}
	this.addAnimation = function(name,row,frames,speed)
	{
	if(!speed) var speed = [];
		this.animations[name] = {'row':row,'frames':frames,'speed':speed};
	}
	this.runAnimation = function(name,iter)
	{
		if(this.animations[name])
		{
			this.animation_name = name;
			this.was['sy'] = this.sy;
			this.was['sx'] = this.sx;
			this.sy = (this.animations[name]['row'] -1) * this.sh;
			this.sx = 0;
			this.animation_frame = 1;
			this.animation_iters = iter;
		}
		return this;
	}
	this.stopAnimation = function()
	{
		this.animation_iters = 0;
	}

	this.update = function()
	{
		this.object.update();
	}
	this.chechUpdate = function()
	{
		if(this.was['x'] != this.x || this.was['y'] != this.y || this.was['w'] != this.w || this.was['h'] != this.h)
		{
			
			this.was['x'] = this.x;
			this.was['y'] = this.y;
			this.was['w'] = this.w;
			this.was['h'] = this.h;
			this.update();
			return true;
		}
		return false;
	}
	this.draw = function()
	{
		if(this.type == 'fillRect')
		{
			this.object.layer.getCtx().fillRect(this.x, this.y, this.w, this.h);
		}
		
	}
} 
 /*Object.prototype.clone = function() {
  var newObj = (this instanceof Array) ? [] : {};
  for (i in this) {
    if (i == 'clone') continue;
    if (this[i] && typeof this[i] == "object") {
      newObj[i] = this[i].clone();
    } else newObj[i] = this[i]
  } return newObj;
}//*/



function PlObject(name,type,layer)
{
	this.x = 0;
	this.y = 0;
	this.ready = 1;
	this.layer = layer;
	this.name = name;
	this.type = type; // image, block, circle, table
	if(typeof(type) == 'string')
	{
		eval('this.essence = new Pl_'+this.type+'(this);');
	}
	
	this.start_time = 0;
	this.vx = 0;
	this.vy = 0;
	this.iter = 0;
	this.a_iter = 0;
	this.angle = 0;
	this.vangle = 0;
	this.time = 0;
	this.was_r = [];
	this.set = function(attr,val)
	{
		this.update();
		this.essence[attr] = val;
		return this;
	}
	this.get = function(attr)
	{
		return this.essence[attr];
	}
	this.clone = function(obj)
	{
		var object = new PlObject(this.name,this.type,this.layer);
		for(var attr in this)
		{
			if(attr != 'essence' )
				object[attr] = this[attr];
		}
		if(this.type == 'image')
		{
			for(var attr in this.essence)
			{
				object.essence[attr] = this.essence[attr];
			}
			//object.essence.img = this.essence.img;
		}
		object.ready = 1;
		object.essence.ready = 1;
		return object;
	}//*/
	this.setXY = function(x,y,w,h,sx,sy,sw,sh)
	{
		this.update();
		//if(x && y)
		//{
			this.essence.x = x;
			this.essence.y = y;
		
		if(w && h)
		{
			this.essence.w = w;
			this.essence.h = h;
		}
		if( sw && sh)
		{
			this.essence.sx = sx;
			this.essence.sy = sy;
			this.essence.sw = sw;
			this.essence.sh = sh;
		}
		return this;
	}
	this.img = function(img)
	{
		this.update();
		if(this.type == 'image')
			this.essence.img.src = img;
		return this;
	}
	
	this.setTable = function(table)
	{
		this.update();
		if(this.type == 'table')
			this.essence.setTable(table);
		return this;
	}
	this.setSize = function(cw,ch,cmw,cmh)
	{
		this.update();
		if(this.type == 'table')
			this.essence.setSize(cw,ch,cmw,cmh);
		return this;
	}
	this.setCells =function(cells)
	{
		this.update();
		if(this.type == 'table')
			this.essence.setCells(cells);
		return this;
	}
	this.tryReady = function()
	{
		if(this.essence.ready == 1) {
			this.ready = 1;
			this.layer.tryReady();
		}
	}
	this.addAnimation = function(name,row,frames,speed)
	{
		this.essence.addAnimation(name,row,frames,speed);
		return this;
	}
	this.runAnimation = function(name,iter)
	{
		this.update();
		this.essence.runAnimation(name,iter);
		return this;
	}
	this.stopAnimation = function()
	{
		this.update();
		this.essence.stopAnimation();
		return this;
	}
	this.moveTo = function(x,y,time)
	{
		this.update();
		var interval = this.layer.parent.options['interval'];
		this.start_time = this.layer.parent.time;
		var dx = this.essence.x - x;
		var dy = this.essence.y - y;
		this.vx = -(dx/time) * interval;
		this.vy = -(dy/time) * interval;
		this.iter = Math.round(time / interval);
		return this;
	}
	
	this.rotate = function(angle,time)
	{
		this.update();
		var dangle = this.angle - angle;
		var interval = this.layer.parent.options['interval'];
		this.vangle = (dangle/time) * interval;
		this.a_iter = Math.round(time / interval);
		return this;
	}
	
	this.fillRect = function(x,y,w,h)
	{
		if(this.type == 'drawing')
		{
			this.essence.type = 'fillRect';
			this.essence.x = x;
			this.essence.y = y;
			this.essence.w = w;
			this.essence.h = h;
		}
		return this;
	}
	
	this.update = function()
	{
		this.layer.update();
	}
	this.chechUpdate = function()
	{
		if(this.iter > 0 || this.a_iter > 0) {
			this.update();
			return true;
		}
		if(this.essence.chechUpdate())
			return true;
		return false;
	}
	this.draw = function()
	{
		if(this.iter > 0)
		{
			this.essence.x += this.vx;
			this.essence.y += this.vy;
			this.iter--;
		}
		
		if(this.time != this.layer.parent.time)
		{
			if(this.a_iter > 0)
			{
				this.angle -= this.vangle;
				this.a_iter--;
			}
		}
		if(this.angle)
		{
			this.layer.getCtx().save();
			//console.info(this.essence.gx()+this.essence.w/2, this.essence.gy()+this.essence.h/2);
			this.layer.getCtx().translate(this.essence.gx()+this.essence.w/2, this.essence.gy()+this.essence.h/2);
			this.layer.getCtx().rotate(-Math.PI*(this.angle/180));
			this.was_r['x'] = this.essence.x; 
			this.was_r['y'] = this.essence.y; 
			this.essence.x = -(this.essence.w/2);
			this.essence.y = -(this.essence.h/2);
		}
		this.essence.draw();
		
		if(this.angle)
		{
			this.essence.x = this.was_r['x'];
			this.essence.y = this.was_r['y'];
			this.was_r = [];
			//this.object.layer.getCtx().rotate(Math.PI*(this.angle/180));
			this.layer.getCtx().restore();
		}//*/
		this.time = this.layer.parent.time;
	}
}
/*
;//*/ 
 
function Pl_image(obj)
{
	this.x = 0;
	this.y = 0;
	this.w = 0;
	this.h = 0;
	this.sx = 0;
	this.sy = 0;
	this.sw = 0;
	this.sh = 0;
	this.was = [];
	this.was_r = [];
	this.angle = 0;
	this.vangle = 0;
	this.animation_iters = 0;
	this.animation_frame = 0;
	this.animation_frame_counter = 1;
	this.animation_name = '';
	this.animations = [];
	this.object = obj;
	this.object.layer.ready = 0;
	this.object.ready = 0;
	this.ready = 0;
	this.time;
	this.img = new Image();
	this.img.parent = this;
	this.img.onload =  function()
	{
		this.parent.ready = 1;
		this.parent.object.tryReady();
	}
	this.gx = function()
	{
		return this.x ;//+ this.object.layer.x;
	}
	this.gy = function()
	{
		return this.y ;//+ this.object.layer.y;
	}
	this.addAnimation = function(name,row,frames,speed)
	{
	if(!speed) var speed = [];
		this.animations[name] = {'row':row,'frames':frames,'speed':speed};
	}
	this.runAnimation = function(name,iter)
	{
		if(this.animations[name])
		{
			this.animation_name = name;
			this.was['sy'] = this.sy;
			this.was['sx'] = this.sx;
			this.sy = (this.animations[name]['row'] -1) * this.sh;
			this.sx = 0;
			this.animation_frame = 1;
			this.animation_iters = iter;
		}
		return this;
	}
	this.stopAnimation = function()
	{
		this.animation_iters = 0;
	}
	/*
	this.rotate = function(angle,time)
	{
		this.update();
		var dangle = this.angle - angle;
		var interval = this.object.layer.parent.options['interval'];
		this.vangle = (dangle/time) * interval;
		this.a_iter = Math.round(time / interval);
	}//*/
	this.update = function()
	{
		this.object.update();
	}
	this.chechUpdate = function()
	{
		if(this.animation_frame > 0) {
			this.update();
			return true;
		}
		if(this.animation_iters != 0){
			this.update();
			return true;
		}
		if(this.a_iter > 0)
		{
			this.update();
			return true;
		}
		return false;
	}
	this.draw = function()
	{
		/*
		if(this.time != this.object.layer.parent.time)
		{
			if(this.a_iter > 0)
			{
				this.angle -= this.vangle;
				this.a_iter--;
			}
			
		}
		
		if(this.angle)
		{
			this.object.layer.getCtx().save();
			//console.info(Math.round(this.x+this.w/2), Math.round(this.y+this.h/2));
			this.object.layer.getCtx().translate(this.x+this.w/2, this.y+this.h/2);
			this.object.layer.getCtx().rotate(-Math.PI*(this.angle/180));
			this.was_r['x'] = this.x; 
			this.was_r['y'] = this.y; 
			this.x = -(this.w/2);
			this.y = -(this.h/2);
		}//*/
		if(!this.w && !this.h)
		{
			this.object.layer.getCtx().drawImage(this.img, this.gx(), this.gy());
		}
		else if(!this.sw && !this.sh && !this.sx && !this.sy)
		{
			this.object.layer.getCtx().drawImage(this.img, this.gx(), this.gy(),this.w,this.h);
		}
		else
		{
			if(this.animation_frame > 0)
			{
				//console.error(this.animations[this.animation_name]['frames'],this.animation_frame);
				if(this.animation_frame != 1 && this.animation_frame <= this.animations[this.animation_name]['frames'])
				{
					this.sx = this.sw * (this.animation_frame - 1);
				}
				else if(this.animation_frame >= this.animations[this.animation_name]['frames'])
				{
					this.sy = this.was['sy'];
					this.sx = this.was['sx'];
					this.animation_frame = -1;
					this.was = [];
					if(this.animation_iters > 1  ) this.runAnimation(this.animation_name,this.animation_iters-1)
					else if(this.animation_iters < 0) this.runAnimation(this.animation_name,-1);
				}
				if(!this.animations[this.animation_name]['speed'][this.animation_frame-1]) 
				{//console.log(this.sy);
					this.animations[this.animation_name]['speed'][this.animation_frame-1] = 1;
				}
				if(this.animations[this.animation_name]['speed'][this.animation_frame-1] <= this.animation_frame_counter)
				{
					this.animation_frame++;
					this.animation_frame_counter=1;
				}
				else{
					this.animation_frame_counter++;
				}
				//console.info(this.sy,this.sx);
			}
			//console.info(this.sy);
			this.object.layer.getCtx().drawImage(this.img,this.sx,this.sy,this.sw,this.sh, this.gx(), this.gy(),this.w,this.h);
		}
		/*
		if(this.angle)
		{
			this.x = this.was_r['x'];
			this.y = this.was_r['y'];
			this.was_r = [];
			//this.object.layer.getCtx().rotate(Math.PI*(this.angle/180));
			this.object.layer.getCtx().restore();
		}//*/
		//this.time = this.object.layer.parent.time;
	}
} 
 
function Pl_table(obj)
{
	this.x = 0;
	this.y = 0;
	this.w = 0;
	this.h = 0;
	this.cmh = 0;
	this.cmw = 0;
	this.cw = 24;
	this.ch = 24;
	this.ctx = obj.layer.getCtx();
	this.object = obj;
	this.ready = 1;
	this.table = [];
	this.cells = [];
	this.attrs = [];
	
	this.gx = function()
	{
		return this.x + this.object.layer.x;
	}
	this.gy = function()
	{
		return this.y + this.object.layer.y;
	}
	this.setTable = function(arr)
	{
		this.table = arr;
		this.w = this.table.length * this.cw + this.table.length * this.cmw * 2;
		this.h = this.table[0].length * this.ch + this.table[0].length * this.cmh * 2;
	}
	this.setSize = function(cw,ch,cmw,cmh)
	{
		if(cw) this.cw = cw;
		if(ch) this.ch = ch;
		if(cmw) this.cmw = cmw;
		if(cmh) this.cmh = cmh;
	}
	this.setCells = function(arr)
	{
		for(var key in arr)
		{
			if(typeof(arr[key]) == 'string')  
			{
				this.attrs[key] = arr[key];
				this.cells[key] = function(table,x,y,key){
					var was = table.ctx.fillStyle;
					table.ctx.fillStyle = table.attrs[key];
					table.ctx.fillRect(x, y, table.cw, table.ch);
					table.ctx.fillStyle = was; 
				}
			}
			else if(typeof(arr[key]) == 'function')
			{
				this.cells[key] = arr[key];
			}
			else if(typeof(arr[key]) == 'object')
			{
				this.attrs[key] = arr[key];
				this.cells[key] = function(table,x,y,key){table.attrs[key].setXY(x,y);table.attrs[key].draw()};
			}
		}
	}
	this.drawType = function(type,x,y)
	{
		if(this.cells[type])
		{
		
				//console.info(this.cells[type]);
			this.cells[type](this,x,y,type);
		}
		else
		{
			this.ctx.fillRect(x, y, this.cw, this.ch);
		}
	}
	this.update = function()
	{
		this.object.update();
	}
	this.chechUpdate = function()
	{
		
	}
	this.draw = function()
	{
		var x = this.x + this.cmw;
		var y = this.y + this.cmh;
		for(var a_key in this.table)
		{
			for(var b_key in this.table[a_key])
			{
				this.drawType(this.table[a_key][b_key],x,y);
				x = x + this.cw + this.cmw * 2;
			}
			x = this.x + this.cmw;
			y = y + this.ch + this.cmh * 2;
		}
		/*
		if(!this.w && !this.h)
		{
			this.object.layer.getCtx()drawImage(this.img, this.x, this.y);
		}
		else if(!this.sw && !this.sh && !this.sx && !this.sy)
		{
			this.object.layer.getCtx().drawImage(this.img, this.x, this.y,this.w,this.h);
		}
		else
		{
			this.object.layer.getCtx().drawImage(this.img,this.sx,this.sy,this.sw,this.sh, this.x, this.y,this.w,this.h);
		}//*/
	}
} 
 function RRAnimator(map,timeEnd)
{
	this.map = map;
	this.timeEnd = timeEnd;
	this.square = 32;
	this.bot_square = 48;
	this.img_marg = 16;
	this.players = [];
	this.layers = [];
	this.events = [];
	this.canv_options = {'width':700,'height':700,'interval':10,'time_limit':30,'multi_canvas':1};
	this.options = {'cw':this.square,'ch':this.square};
	this.path = '';
	this.p = '';
	
	this.init = function(path)
	{
		this.path = path;
		this.p = new Pulsar('div_canvas',this.canv_options);
		this.layers['map'] = this.p.addLayer('map',4);
		//this.layers['map'].
		var img2 = this.layers['map'].addObject('2','image',1).img(path+'pics/texture/R27.jpg').setXY(0,0,this.square,this.square,0,0,128,128);
		var img0 = this.layers['map'].addObject('0','image',1).img(path+'pics/texture/B1.jpg').setXY(0,0,this.square,this.square,0,30,64,64);
		var img1 = this.layers['map'].addObject('1',img0,1);
		img0.setXY(0,0,this.square,this.square,20,30,94,94);
		var table = this.layers['map'].addObject('map','table');
		this.layers['map'].x = 0;this.layers['map'].y=0;
		//table.set('x',-100);
		//console.log(img1);
		table.setTable(map).setSize(this.options['cw'],this.options['ch']);
		table.setCells({2:img2,0:img0,1:img1});
		
		this.layers['bullets'] = this.p.addLayer('bullets',6);
		this.layers['bullets'].x = 0;
		this.layers['bullets'].y = 0;
		return this;
	}
	this.getX = function(x)
	{
		if(this.img_marg) var marg = this.img_marg; else var marg = 0;
			return (x-1) * this.options['cw'] + marg 
	}
	this.getY = function(y)
	{
		if(this.img_marg) var marg = this.img_marg; else var marg = 0;
		
			return (y-1) * this.options['ch'] + marg; 
	}
	this.getAbsX = function(x)
	{
			return (x-1) * this.options['cw'];
	}
	this.getAbsY = function(y)
	{
			return (y-1) * this.options['ch']; 
	}
	this.addPlayer = function(player,bot_func)
	{
		var priv_key = 0;
		for(time in player.log)
		{
			if(priv_key > 0)
				player.timer[priv_key] = time - priv_key;
			priv_key = time;
		}
		
		this.players[player.id] = player;
		this.layers[player.id] = this.p.addLayer(player.id,20+player.id);
		this.layers[player.id].x=0;this.layers[player.id].y=0;
		loadBot(player.bot.model,player,this);
		
		this.layers[player.id].x = this.getX(player.bot.x);
		this.layers[player.id].y = this.getY(player.bot.y);
		this.layers[player.id].angle = (player.bot.d * 90) - 90;

		//this.layers[player.id].addObject('bullet','image').img(this.path+'pics/bullet.png').setXY(0,0,4,4,0,0,4,4);
		if(player.bots)
		{
			for(key in player.bots)
			{
				var mini_bot = this.layers[player.id].addObject(player.bots[key].id,'image').img(player.bots[key].file).
		setXY(player.bots[key].x-(this.bot_square/2),player.bots[key].y-(this.bot_square/2),this.bot_square,this.bot_square,0,0,this.bot_square,this.bot_square);
				if(player.bots[key].animations)
				{
					mini_bot = player.bots[key].animations(mini_bot);
				}
			}
		}
	}
	
	this.addEvent = function(code,id_player,func)
	{
		this.events[code+'_'+id_player] = func;
	}
	this.draw = function()
	{
		this.p.parent = this;
		this.p.addFunction(function(p){
			p.parent.execute(p);
		});
		this.p.draw();
		
	}
	this.execute = function(p)
	{
		if(p.time >= this.timeEnd+1000) 
		{
			p.shutDown = true;
			return false;
		}
		for(id_player in this.players)
		{
			for(log_time in this.players[id_player].log)
			{
				if(log_time <= p.time)
				{
					this.do(this.players[id_player].log[log_time],id_player,p,log_time);
					delete this.players[id_player].log[log_time];
				}
				if(this.players[id_player].events)
				{
					for(var key in this.players[id_player].events)
					{
						if(this.players[id_player].events[key].time <= p.time)
						{
							this.runEvent(this.players[id_player].events[key],id_player,p,key);
							delete this.players[id_player].events[key];
						}
					}
				}
			}
		}
	}
	this.do = function(com,id_player,p,log_time)
	{
		var t = this.players[id_player].timer[log_time];
		var bot = this.players[id_player].bot;
		var layer = p.getLayer(id_player);
		var object = layer.getObject('bot');
		object.stopAnimation();
		switch(com)
		{
			case 'M1':
			{
				//object.moveTo(this.getX(bot.x=bot.nextX()),this.getY(bot.y=bot.nextY()),t);
				layer.moveTo(this.getX(bot.x=bot.nextX()),this.getY(bot.y=bot.nextY()),t);
				object.runAnimation('move',-1);
			}
			break;
			case 'R1':
			{
				bot.d = bot.right();
				//object.rotate(object.angle - 90  ,t);
				layer.rotate(layer.angle - 90  ,t);
				object.runAnimation('rotate',-1);
			}
			break;
			case 'R2':
			{
				bot.d = bot.left();
				//object.rotate(object.angle + 90  ,t);
				layer.rotate(layer.angle + 90  ,t);
				object.runAnimation('rotate',-1);
			}
			break;
			case 'F1':
			{
				if(this.events['F1_'+id_player])
				{
					this.events['F1_'+id_player](p,id_player);
				}
				else
				{
					object.runAnimation('fire',1);
				}
			}
			break;
			case 'D1':
			{
				if(this.events['D1_'+id_player])
				{
					this.events['D1_'+id_player](p,id_player);
				}
				else
				{
					object.set('sy',48).set('sx',240215).runAnimation('death',1);
					p.getLayer(id_player).setIndex(10+Math.random(1,9))
				}
			}
			break;
		}
	}
	this.runEvent = function(arr,id_player,p,key)
	{
		var l =  p.getLayer('bullets');
		bullets = game.layers['bullets'];
		switch(arr.code)
		{
			case 'F1':
			{
				//var bullet_1 = l.getObject('b_'+id_player+'_1');
				//var bullet = l.addObject('bullet_'+arr.time,bullet_1);
				var bullet = bullets.addObject('b_'+id_player+'_'+key,'drawing');
				//bullet.fillRect(50,50,4,4)
				bullet.fillRect(this.getAbsX(arr.attrs.start_x),this.getAbsY(arr.attrs.start_y),4,4)
				//bullet.setXY(this.getAbsX(arr.attrs.start_x),this.getAbsY(arr.attrs.start_y),4,4)//.set('sx',47).set('sy',16)
					.moveTo(this.getAbsX(arr.attrs.end_x),this.getAbsY(arr.attrs.end_y),arr.attrs.end_time - arr.time);
				
				//console.log(arr.attrs.start_x,this.getAbsX(arr.attrs.start_x),this.getAbsY(arr.attrs.start_y));
			}
			break;
			default:
			break;
		}
	}
}

function Player()
{
	this.id = 0;
	this.log = [];
	this.bot = new Bot();
	this.timer = [];
	this.events = [];
	this.bots = [];
	this.addBot = function(bot)
	{
		this.bots[bot.id] = bot;
	}
}
function Bot()
{
	this.id = 0;
	this.file = '';
	this.x = 0;
	this.y = 0;
	this.d = 0;
	this.nextX = function()
	{
		switch(this.d)
		{
			case 0: return this.x+1; break;
			case 2: return this.x-1; break;
			default : return this.x; break;
		}
	}
	this.nextY = function()
	{
		switch(this.d)
		{
			case 1: return this.y-1; break;
			case 3: return this.y+1; break;
			default : return this.y; break;
		}
	}
	this.right = function()
	{
		switch(this.d)
		{
			case 0: return 3; break;
			default : return this.d-1; break;
		}
	}
	this.left = function()
	{
		switch(this.d)
		{
			case 3: return 0; break;
			default : return this.d+1; break;
		}
	}
}



 
 
loadBot = function(id,player,game)
	{
		var layer = game.layers[player.id];
		var bullets = game.layers['bullets'];
		var bot = layer.addObject('bot','image')
		.setXY(-(game.bot_square/2),-(game.bot_square/2),game.bot_square,game.bot_square,0,0,game.bot_square,game.bot_square);
    info(game.path+'pics/tank4.png');
		switch(id)
		{
			case 1:
			{
				bot.addAnimation('normal',1,6,[6,6,6,6,6,6])//[5,3,5,3,2]
					 .addAnimation('fire',2,6,[5,5,5,5,5,5])
					 .addAnimation('move',1,6,[6,6,6,6,6,6])
					 .addAnimation('rotate',1,6,[6,6,6,6,6,6])
					 .addAnimation('death',3,6,[10,10,10,10,10,10])
					 .runAnimation('normal',-1)
					 .img(game.path+'pics/tank4.png');
				D_func = function(p,id_player){
					var layer = p.getLayer(id_player);
					var object = layer.getObject('bot');
					object.set('sy',92).set('sx',240).runAnimation('death',1);
				}
				F_func = function(p,id_player){
					var layer = p.getLayer(id_player);
					var object = layer.getObject('bot');
					object.runAnimation('fire',1);
				}
				game.addEvent('D1',player.id,D_func);
				game.addEvent('F1',player.id,F_func);
				
				//bullets.addObject('b_'+player.id+'_1','drawing').fillRect(0,0,4,4);
			}
			break;
			case 2:
			{
				bot.addAnimation('normal',1,6,[6,6,6,6,6,6])//[5,3,5,3,2]
					 .addAnimation('move',1,6,[6,6,6,6,6,6])
					 .addAnimation('rotate',1,6,[6,6,6,6,6,6])
					 .addAnimation('death',2,6,[10,10,10,10,10,10])
					 .runAnimation('normal',-1)
					 .img(game.path+'pics/tank3.png');
				D_func = function(p,id_player){
					var layer = p.getLayer(id_player);
					var object = layer.getObject('bot');
					var object2 = layer.getObject('gun');
					object.set('sy',48).set('sx',240).runAnimation('death',1);
					object2.set('sy',76).set('sx',240).runAnimation('death',1);
				}
				F_func = function(p,id_player){
					var layer = p.getLayer(id_player);
					var object = layer.getObject('gun');
					object.runAnimation('fire',1);
				}
				var mini_bot = game.layers[player.id].addObject('gun','image').img(game.path+'pics/gun3.png').
					setXY(0-(game.bot_square/2),0-(game.bot_square/2),game.bot_square,game.bot_square,0,0,game.bot_square,game.bot_square);
				mini_bot.addAnimation('fire',2,6,[6,6,6,6,6,6])
								.addAnimation('death',3,6,[5,5,5,5,5,5])
								.runAnimation('normal',-1);
				game.addEvent('D1',player.id,D_func);
				game.addEvent('F1',player.id,F_func);
				
				//bullets.addObject('b_'+player.id+'_1','drawing').fillRect(0,0,4,4);
				//bullets.addObject('b_'+player.id+'_1','image').img(game.path+'pics/bullet2.png').setXY(0,0,4,6,0,0,4,6);
			}
			break;
			case 3:
			{
				bot.addAnimation('normal',1,6,[6,6,6,6,6,6])//[5,3,5,3,2]
					 .addAnimation('move',1,6,[6,6,6,6,6,6])
					 .addAnimation('rotate',1,6,[6,6,6,6,6,6])
					 .addAnimation('death',2,6,[10,10,10,10,10,10])
					 .runAnimation('normal',-1)
					 .img(game.path+'pics/tank1.png');
				D_func = function(p,id_player){
					var layer = p.getLayer(id_player);
					var object = layer.getObject('bot');
					var object2 = layer.getObject('gun');
					object.set('sy',48).set('sx',240).runAnimation('death',1);
					object2.set('sy',76).set('sx',240).runAnimation('death',1);
				}
				F_func = function(p,id_player){
					var layer = p.getLayer(id_player);
					var object = layer.getObject('gun');
					object.runAnimation('fire',1);
				}
				var mini_bot = game.layers[player.id].addObject('gun','image').img(game.path+'pics/gun1.png').
					setXY(0-(game.bot_square/2),0-(game.bot_square/2),game.bot_square,game.bot_square,0,0,game.bot_square,game.bot_square);
				mini_bot.addAnimation('fire',2,6,[6,6,6,6,6,6])
								.addAnimation('death',3,6,[5,5,5,5,5,5])
								.runAnimation('normal',-1);
				game.addEvent('D1',player.id,D_func);
				game.addEvent('F1',player.id,F_func);
				
				//bullets.addObject('b_'+player.id+'_1','drawing').fillRect(0,0,4,4);
			}
			break;
		}
	}
 
 /**
 * Created by Ilya Rubinchik (ilfate) on 06/11/15.
 */

function MageS () {

}
MageS = new MageS();

$(document).ready(function() {
    if ($('body.mage-survival').length) {
        MageS.Game = new MageS.Game();
        var animations = new MageS.Animations(MageS.Game);
        var attacks = new MageS.Attacks(MageS.Game);
        var inventory = new MageS.Inventory(MageS.Game);
        var spellbook = new MageS.Spellbook(MageS.Game);
        var spells = new MageS.Spells(MageS.Game);
        var worlds = new MageS.Worlds(MageS.Game);
        var objects = new MageS.Objects(MageS.Game);
        var units = new MageS.Units(MageS.Game);
        var mage = new MageS.Mage(MageS.Game);
        var admin = new MageS.Admin(MageS.Game);
        var chat = new MageS.Chat(MageS.Game);
        var home = new MageS.Home(MageS.Game);
        var spellcraft = new MageS.Spellcraft(MageS.Game);
        var monimations = new MageS.Monimations(MageS.Game);
        MageS.Game.init(inventory, spellbook, spells, worlds, objects, units, mage, admin, chat, home, spellcraft, animations, attacks, monimations);
    }
});


MageS.Game = function () {
    this.color = {
        'blue': '#529BCA',
        'darkBlue': '#428BBA',
        'lightBlue': '#77d2e1',
        'green': '#069E2D',
        'yellow': '#FFD416',
        'red': '#FF8360',
        'purple': '#c700d6',
        'purpleDark': '#990096',
        'orange': '#F07818',
        'black': '#584D3D',
        'white': '#FFFFFF',
        'grey': '#777',
        'clay' : '#FCEBB6',
        'sand' : '#c2b280',
        'brown' : '#5E412F',
        'brownBright' : '#726056',
    };
    this.device = 'pc';
    this.inventory = {};
    this.spellbook = {};
    this.spells = {};
    this.worlds = {};
    this.objects = {};
    this.units = {};
    this.mage = {};
    this.admin = {};
    this.chat = {};
    this.home = {};
    this.spellcraft = {};
    this.animations = {};
    this.attacks = {};
    this.monimations = {};
    this.gameStatus = $('#game-status').val();
    this.rawData = [];
    this.svg = $('<div></div>');
    this.svgToLoad = 0;
    this.callback = {};
    this.turn = 0;
    this.worldType = 0;
    this.actionInProcess = false;
    this.gameInited = false;
    this.isGameRuning = true;
    this.availableDirections = [];
    /* CONFIG */
    this.fieldRadius = 5;
    this.cellSize = 1.6;
    this.itemSize = 1.7;
    this.rem = 20;
    this.mageInventorySize = 7 * this.itemSize + 0.9;
    this.mageMobileInventorySize = 6 * this.itemSize;
    this.animationTime = 350;
    this.battleFieldSize = (this.fieldRadius * 2 + 1) * this.cellSize;

    this.deviceCheck = function() {
        if ($(window).width() < 992) {
            this.device = 'tablet';
            if ($(window).width() < 768) {
                this.device = 'mobile';
            }
        } else {
            this.device = 'pc';
        }
    };

    this.init = function (inventory, spellbook, spells, worlds, objects, units, mage, admin, chat, home, spellcraft, animations, attacks, monimations) {
        this.inventory = inventory;
        this.spellbook = spellbook;
        this.spells = spells;
        spells.init();
        this.worlds = worlds;
        this.objects = objects;
        this.units = units;
        this.mage = mage;
        this.admin = admin;
        this.chat = chat;
        this.home = home;
        this.spellcraft = spellcraft;
        spellcraft.init();
        this.animations = animations;
        this.attacks = attacks;
        attacks.init();
        this.monimations = monimations;

        this.deviceCheck();

        switch (this.gameStatus) {
            case 'mage-list':
                this.home.init();
                this.initSVG(function() {
                    MageS.Game.replaceMissingSvg();
                });

                break;
            case 'mage-home':
                this.initSVG(function() {
                    // Get the SVG tag, ignore the rest
                    //MageS.Game.spellbook.buildSpells();
                    //MageS.Game.inventory.buildItems();
                    MageS.Game.replaceMissingSvg();
                    //MageS.Game.updateHealth(MageS.Game.rawData.mage);
                    MageS.Game.home.startAnimation();

                    setTimeout(function () {
                        MageS.Game.hideGameLoadOverlay();
                    }, 150);
                });
                break;
            case 'battle':
                this.deviceInit();
                info( this.device);

                this.initSVG(function() {
                    // Get the SVG tag, ignore the rest
                    //MageS.Game.pageResize();
                    MageS.Game.chat.buildChat();
                    MageS.Game.buildMap();
                    MageS.Game.mage.drawMage(MageS.Game.rawData.mage);
                    MageS.Game.updateActions(MageS.Game.rawData.actions, true);
                    MageS.Game.spellbook.buildSpells();
                    MageS.Game.inventory.buildItems();
                    MageS.Game.buildUnits();
                    MageS.Game.replaceMissingSvg();
                    MageS.Game.updateHealth(MageS.Game.rawData.mage);
                    
                    if (MageS.Game.device !== 'mobile') {
                        setTimeout(function () {
                            MageS.Game.hideGameLoadOverlay();
                            MageS.Game.mage.onLoad();
                        }, 150);
                    } else {
                        $('#overlay-loading-text').hide();
                        var textEl = $('#overlay-tap-text');
                        textEl.show();
                        MageS.Game.monimations.blastInScale(textEl, 2);
                        $('.game-load-overlay').on('click', function(){
                            MageS.Game.hideGameLoadOverlay();
                            MageS.Game.mage.onLoad();
                        })
                    }
                });

                this.configureKeys();
                break;
            case 'admin':
                this.admin.init();
                break;
            case 'admin-battle':
                this.deviceInit();
                info( this.device);

                this.initSVG(function() {
                    // Get the SVG tag, ignore the rest
                    //MageS.Game.pageResize();
                    MageS.Game.chat.buildChat();
                    MageS.Game.buildMap();
                    MageS.Game.mage.drawMage(MageS.Game.rawData.mage);
                    MageS.Game.updateActions(MageS.Game.rawData.actions, true);
                    MageS.Game.spellbook.buildSpells();
                    MageS.Game.inventory.buildItems();
                    MageS.Game.buildUnits();
                    MageS.Game.replaceMissingSvg();
                    MageS.Game.updateHealth(MageS.Game.rawData.mage);

                    MageS.Game.hideGameLoadOverlay();
                    MageS.Game.mage.onLoad();

                    MageS.Game.admin.isEnabled = true;
                    setTimeout(function(){
                        info('ADMIN SHOW START');
                        MageS.Game.admin.start();
                    }, 600);
                });

                //this.configureKeys();
                break;
        }
    };
    this.hideGameLoadOverlay = function() {
        if (MageS.Game.gameInited) { return; }
        if (this.device == 'mobile') {
            //document.addEventListener("touchmove", function(e) { e.preventDefault() });


            //var body = document.documentElement;
            //if (body.requestFullscreen) { info('MOBIL FULLSCREEN 1'); body.requestFullscreen(); }
            //else if (body.webkitrequestFullscreen) { info('MOBIL FULLSCREEN 2'); body.webkitrequestFullscreen(); }
            //else if (body.mozrequestFullscreen) { info('MOBIL FULLSCREEN 3'); body.mozrequestFullscreen(); }
            //else if (body.msrequestFullscreen) { info('MOBIL FULLSCREEN 4'); body.msrequestFullscreen(); }
            MageS.Game.toggleFullScreen();
        }
        $('.game-load-overlay').animate({'opacity': '0'}, {
            duration: 1000,
            complete: function () {
                $('.loading-field').append(
                    $(this).find('.load-animation').css({
                        'width': '140%',
                        'height': '100%',
                        'margin-top': '5%'
                    })
                );
                $(this).remove();
            }
        });
        MageS.Game.gameInited = true;
    };
    this.deviceInit = function () {
        if (this.device == 'pc') {
            $('.interface-switch-panel').remove();
        } else {
            $('.toggle-inventory').on('click', function() {
                MageS.Game.inventory.toggleInventory();
            });
            $('.toggle-spellbook').on('click', function() {
                MageS.Game.spellbook.toggleSpellbook();
            });
            $('.toggle-chat').on('click', function() {
                MageS.Game.chat.swipeEnd();
            });

            //$('.toggle-mage-info').on('click', function() {
            //    MageS.Game.toggleMageInfo();
            //});
            if (this.device !== 'pc') {
                this.spellbook.showSpellbook();

                var hammertime = new Hammer(document.getElementById('battle-border'), {});
                hammertime.get('pan').set({ direction: Hammer.DIRECTION_ALL });
                hammertime.get('swipe').set({ direction: Hammer.DIRECTION_VERTICAL });

                hammertime.on('panup',    function(ev) { MageS.Game.swipe(ev,0); });
                hammertime.on('panright', function(ev) { MageS.Game.swipe(ev,1); });
                hammertime.on('pandown',  function(ev) { MageS.Game.swipe(ev,2); });
                hammertime.on('panleft',  function(ev) { MageS.Game.swipe(ev,3); });
                hammertime.on('panend',  function(ev) { MageS.Game.swipeEnd(ev); });

                $('#mobile-spell-info-container').on('click', function() {
                    MageS.Game.spellbook.toggleHiddenDescription();
                });

                var hammertime = new Hammer(document.getElementById('mobile-spell-info-container'), {});
                hammertime.get('pan').set({ direction: Hammer.DIRECTION_ALL });
                hammertime.on('panright', function(ev) { MageS.Game.spellbook.panMobileSpellDescriptionRight(ev); });
                hammertime.on('panleft', function(ev) { MageS.Game.spellbook.panMobileSpellDescriptionLeft(ev); });
                hammertime.on('panend',  function(ev) { MageS.Game.spellbook.toggleHiddenDescription(); });


            }
        }
    };
    this.toggleFullScreen = function () {
        var doc = window.document;
        var docEl = doc.documentElement;

        var requestFullScreen = docEl.requestFullscreen || docEl.mozRequestFullScreen || docEl.webkitRequestFullScreen || docEl.msRequestFullscreen;
        var cancelFullScreen = doc.exitFullscreen || doc.mozCancelFullScreen || doc.webkitExitFullscreen || doc.msExitFullscreen;
        if (!requestFullScreen) {
            return;
        }
        if(!doc.fullscreenElement && !doc.mozFullScreenElement && !doc.webkitFullscreenElement && !doc.msFullscreenElement) {
            requestFullScreen.call(docEl);
        }
        else {
            cancelFullScreen.call(doc);
        }
    };
    this.trytoGoFullScreen = function() {
        var doc = window.document;
        if(!doc.fullscreenElement && !doc.mozFullScreenElement && !doc.webkitFullscreenElement && !doc.msFullscreenElement) {
            this.toggleFullScreen();
        }
    };

    this.pageResize = function() {

        var rem = this.rem;
        var width = $(window).width();
        switch (this.device) {
            case 'mobile':
                 if (width >= 428) { rem = 24; }
                else if (width >= 408) { rem = 23; }
                else if (width >= 388) { rem = 22; }
                else if (width >= 368) { rem = 21; }
                else if (width <= 300) { rem = 17; }
                else if (width <= 320) { rem = 18; }
                else if (width <= 338) { rem = 19; }
                else if (width <= 360) { rem = 20; }
                break;
        }

        this.rem = rem;
        $('html').css('font-size', rem + 'px');
    };

    this.swipe = function (event, d) {
        //if ($('#move-control-field').hasClass('disable')) { return false; }
        //if (event.distance < 25) { return false; }
        //switch (d) {
        //    case 0: MageS.Game.action('move-up'); break;
        //    case 1: MageS.Game.action('move-right'); break;
        //    case 2: MageS.Game.action('move-down'); break;
        //    case 3: MageS.Game.action('move-left'); break;
        //}
    };
    this.swipeEnd = function (event) {
        if ($('#move-control-field').hasClass('disable')) { return false; }
        if (event.distance < 20) { return false; }
        switch (event.additionalEvent) {
            case 'panup': MageS.Game.action('move-up'); break;
            case 'panright': MageS.Game.action('move-right'); break;
            case 'pandown': MageS.Game.action('move-down'); break;
            case 'panleft': MageS.Game.action('move-left'); break;
        }
    };

    this.buildMap = function() {
        this.rawData = mageSurvivalData;
        this.turn = this.rawData.turn;
        this.worldType = this.rawData.world;
        for(var y in this.rawData.map) {
            for(var x in this.rawData.map[y]) {
                this.drawCell(this.rawData.map[y][x], x, y);
            }
        }
        for(var y in this.rawData.objects) {
            for(var x in this.rawData.objects[y]) {
                this.objects.drawObject(this.rawData.objects[y][x], x, y);
            }
        }
    };

    this.action = function(action, data) {
        if (this.actionInProcess) {
            info('Action is locked');
            return;
        }
        if (!data) { data = {}; }
        var moveDirection = false;
        switch (action) {
            case 'move-up':
                moveDirection = 0; break;
            case 'move-right':
                moveDirection = 1; break;
            case 'move-down':
                moveDirection = 2; break;
            case 'move-left':
                moveDirection = 3; break;
        }
        if (moveDirection !== false) {
            if (!MageS.Game.availableDirections[moveDirection]) {
                MageS.Game.chat.dialogMessage({'targetX':0, 'targetY':0, 'message':'I can`t move there...', time:500});
                return;
            }
            if (this.mage.cantMoveTill > this.turn) {
                MageS.Game.chat.dialogMessage({'targetX':0, 'targetY':0, 'message':'I can`t move!!', time:700});
                return;
            }
            var mageEl = $('.battle-border .mage');
            var wasD = mageEl.data('d');
            var delay = 0;
            if (moveDirection != wasD) {
                delay = 100;
                this.mage.beforeMoveD = wasD;
                this.animations.rotate(
                    mageEl,
                    {d: moveDirection, wasD:wasD},
                    false
                );
            }
            setTimeout(function() {
                var x = 0, y = 0;
                switch (moveDirection) {
                    case 0: y = 1; break;
                    case 1: x = -1; break;
                    case 2: y = -1; break;
                    case 3: x = 1; break;
                }
                MageS.Game.mage.startMove(x, y);
            }, delay);
        }
        this.startAction(action);
        this.spellbook.turnOffPatterns();
        this.spellbook.removePermanentTooltip();
        $('.spellBook .spell.active').removeClass('active');
        var actionName = '';
        var dataString = '';
        switch (action) {
            case 'move-up':
                actionName = 'move';
                dataString = '{"d":"0"}';
                break;
            case 'move-right':
                actionName = 'move';
                dataString = '{"d":"1"}';
                break;
            case 'move-down':
                actionName = 'move';
                dataString = '{"d":"2"}';
                break;
            case 'move-left':
                actionName = 'move';
                dataString = '{"d":"3"}';
                break;
            case 'objectInteract':
                actionName = 'objectInteract';
                dataString = data;
                break;
            case 'craftSpell':
                actionName = 'craftSpell';
                dataString = data;
                break;
            case 'skipTurn':
                actionName = 'skipTurn';
                dataString = data;
                break;
            case 'spell':
                actionName = 'spell';
                dataString = data;
                break;
            case 'register':
                actionName = 'register';
                dataString = data;
                break;
            default:
                info('action not found');
                return;
        }
        if (data.fake !== undefined || this.admin.isEnabled) {
            // this is a fake action
            info('faked action ' + actionName);
            return;
        }
        Ajax.json('/Spellcraft/action', {
            data: 'action=' + actionName + '&data=' + dataString+ '&turn=' + this.turn,
            callBack : function(data){ MageS.Game.callback(data) }
        });
        if (this.device == 'mobile') {
            MageS.Game.trytoGoFullScreen();
        }
    };

    this.callback = function(data) {
        if (data.action) {
            switch (data.action) {
                case 'mage-create':
                    window.location = '/Spellcraft';
                    break;
                case 'move':
                    //this.moveAnimate(data);
                    break;
                case 'rotate':
                    //this.rotateAnimate(data);
                    break;
                case 'objectInteract':
                    this.inventory.addItems(data.game);
                    break;
                case 'craftSpell':
                    this.spellcraft.spellCrafted(data);
                    break;
                case 'spell':
                    //this.spells.castSpell(data);
                    break;
                case 'error-message':
                    //info(data.game.messages);
                    //this.endAction();
                    if (this.spells.spellAnimationRunning) {
                        this.spells.stopAnimation = true;
                    }
                    if (this.mage.moveStarted) {
                        this.mage.cancelMove();
                    }
                    break;
                case 'reload':
                    if (MageS.Game.admin.isEnabled) {
                        window.location = '/Spellcraft/admin';
                    } else {
                        window.location.reload();
                    }
                    break;
            }
        }
        info(data);
        if (data.game.actions !== undefined) {
            this.updateActions(data.game.actions, false);
        }
        if (data.game.items) {
            this.inventory.updateItems(data.game.items);
        }
        if (data.game.spells) {
            this.spellbook.updateSpells(data.game.spells);
        }
        if (data.game.messages) {
            this.chat.postMessages(data.game.messages);
        }
        if (data.game.events) {
            this.animations.animateEvents(data.game);
        } else {
            this.endAction();
        }
        if (data.game.turn) {
            this.turn = data.game.turn;
            this.spellbook.turn();
        }

    };

    this.updateActions = function (actions, isFirstLoad) {
        //actions.push({'name':'Craft Spell', 'method':'craft-spell', 'key':'Q' ,'noAjax':true, 'location':'actions=side', 'icon':'icon-fizzing-flask'});
        //actions.push({'name':'Skip turn', 'method':'skip-turn', 'key':'F' , 'location':'actions', 'icon':'icon-empty-hourglass', 'actionName':'skipTurn'});
        //actions.push({'name':'Test Spell', 'method':'test-spell', 'key':'T' ,'noAjax':true, 'location':'actions', 'icon':'icon-fizzing-flask'});
        var actionsEl = $('.actions');
        var existingActions = {};
        actionsEl.find('.action').each(function() {
            existingActions[$(this).data('method')] = $(this);
        });
        for (var i in actions) {
            var method = actions[i].method;
            if (existingActions[method] !== undefined) {
                existingActions[method] = false;
                continue;
            }

            switch (actions[i].location) {
                case 'actions':
                    var temaplate = $('#template-action-button').html();
                    Mustache.parse(temaplate);
                    var key = '';
                    if (actions[i].key !== undefined) {
                        key = actions[i].key;
                    }
                    var rendered = Mustache.render(temaplate, {'name': actions[i].name, 'method':method, 'key': key});
                    var obj = $(rendered);
                    var icon = $(this.svg).find('#' + actions[i].icon + ' path');
                    obj.find('svg').append(icon.clone());
                    actionsEl.append(obj);
                    if (!isFirstLoad) {
                        obj.find('a')
                            .css({'opacity': 0.3})
                            .animate({'opacity': 1}, {
                                queue: false,
                                duration: this.animationTime / 2
                            });
                    }
                    if (actions[i].noAjax == undefined) {
                        this.bindActionButtonClick(actions[i], obj);
                    }
                    break;
                case 'move-0':
                case 'move-1':
                case 'move-2':
                case 'move-3':
                    MageS.Game.availableDirections[actions[i].name] = actions[i].method === 'move-' + actions[i].name;
                    var location = $('#move-control-field .' + actions[i].location);
                    if (location.data('method') == actions[i].method) {
                        continue;
                    }
                    location.data('method', actions[i].method);
                    if (location.hasClass('svg-replace')) {
                        // page is not inited yet
                        location.data('svg', actions[i].icon);
                    } else {
                        location.find('svg path').remove();
                        var icon = $(this.svg).find('#' + actions[i].icon + ' path');
                        location.find('svg').append(icon.clone());
                    }
                    break;
                default: info('No location "' + actions[i].location + '" found for action');
            }


        }
        for (var i in existingActions) {
            if (existingActions[i]) {
                existingActions[i].remove();
            }
        }
        if (isFirstLoad) {
            $('.method-craft-spell').on('click', function () {
                MageS.Game.spellcraft.showSpellCrafting();
            });
            $('.method-skip-turn').on('click', function () {
                MageS.Game.action('skipTurn', '{"method":"skip-turn"}');
            });
            $('.method-test-spell').on('click', function () {
                MageS.Game.spells.isSecondPartWaiting = true;
                // MageS.Game.spells.currentSpellData = {'data  ': [
                //     [-2, -3],[-1, -3],[0, -3],[1, -3],[2, -3],
                //     [-2, -2],[-1, -2],[0, -2],[1, -2],[2, -2]
                // ]};
                // MageS.Game.spells.currentSpellData = {'d': $('.battle-border .mage').data('d')};
                MageS.Game.spells.currentSpellData = {'targetX': -3, 'targetY': 1, 'd':1, 'data':[
                    [-2, 3], [3,3], [4,-1], [0, 2]
                ], 'targets': [[-3,-3], [3,3], [-3,2]],
                'pattern' : [[-1, -1], [-2, -2], [-3, -3], [-4, -4], [-5, -5]]};
                //     {'point':[-1,0], 'targets':[[-1, -2], [0, 2]]},
                //     {'point':[-2,0], 'targets':[[-1, -2], [0, 2]]},
                //     {'point':[-3,0], 'targets':[[-1, -2], [0, 2]]},
                //     {'point':[-4,0], 'targets':[[-1, -2], [0, 2]]},
                // ]};
                //MageS.Game.spells.startCast('Fireball');
                //MageS.Game.spells.startCast('IceCrown');
                // MageS.Game.spells.startCast('ButthurtJump');
                // MageS.Game.spells.startCast('IceSlide');
                // MageS.Game.objects.activate({'action': 'wallExplode', 'targetX':0,'targetY':-1})
                MageS.Game.attacks.attack({'attack' :{animation:'bow'}, 'fromX':3, 'fromY':-4, 'targetX':0,'targetY':0})
            });
            $('#move-control-field .control-arrow').on('click', function () {
                switch ($(this).data('d')) {
                    case 0:
                        MageS.Game.action('move-up');
                        break;
                    case 1:
                        MageS.Game.action('move-right');
                        break;
                    case 2:
                        MageS.Game.action('move-down');
                        break;
                    case 3:
                        MageS.Game.action('move-left');
                        break;
                }
            });
        } else {
            // we need to show action again

        }
    };
    this.bindActionButtonClick = function(action, obj) {
        var actionName = 'objectInteract';
        if (action.actionName !== undefined) { actionName = action.actionName; }
        obj.on('click', function () {
            MageS.Game.action(actionName, '{"method":"' + $(this).data('method') + '"}')
        });
    };

    this.keyPressed = function(key) {
        var action = $('.actions .action.key-' + key);
        if (action.length) {
            action.click();
        }
    };

    this.buildUnits = function() {
        for(var y in this.rawData.units) {
            for(var x in this.rawData.units[y]) {
                this.units.drawUnit(this.rawData.units[y][x], x, y);
            }
        }
    };

    this.updateHealth = function(mage) {
        var total = mage.maxHealth;
        var health = Math.round(mage.health / total * 100);
        if (this.device == 'mobile') {
            var currentHealth = parseInt($('.health-mobile-info .health .value').html());
            if (currentHealth != mage.health || !this.gameInited) {
                if (currentHealth < mage.health) {
                    MageS.Game.monimations.bounce($('.health-mobile-info .health'));
                    $('.health-mobile-info .health .svg').removeClass('color-red');
                    $('.health-mobile-info .health .normal path')
                        .animate({'svgFill':'#069E2D'})
                        .animate({'svgFill':'#FF8360'});
                } else if (currentHealth > mage.health) {
                    MageS.Game.monimations.skweeze($('.health-mobile-info .health'));
                    $('.health-mobile-info .health .normal path')
                        .animate({'svgFill':this.color.yellow})
                        .animate({'svgFill':this.color.red});
                }
                $('.health-mobile-info .health .cover').height(100 - health + '%');
                $('.health-mobile-info .health .value').html(mage.health);
            }
            var currentArmor = parseInt($('.health-mobile-info .armor .value').html());
            var color = '#FF8360';
            if (currentArmor != mage.armor) {
                if (currentArmor < mage.armor) {
                    color = '#069E2D';
                }
                $('.health-mobile-info .armor .svg').removeClass('color-brown');
                $('.health-mobile-info .armor path')
                    .animate({'svgFill':color})
                    .animate({'svgFill':'#5E412F'});
                $('.health-mobile-info .armor .value').html(mage.armor);
            }
        } else {
            var armorWidth = 0;
            var healthWidth = 100;
            if (mage.armor !== undefined) {
                total += mage.armor;
                armorWidth = Math.round(mage.armor / total * 100);
                healthWidth = Math.round(mage.health / total * 100);
            }
            $('.health-bar .progress-bar-success').css('width', healthWidth + '%');
            $('.health-bar .progress-bar-warning').css('width', armorWidth + '%');

            $('.health-bar .health-value').html(mage.health + 'HP');
            if (mage.armor !== undefined) {
                $('.health-bar .armor-value').html(mage.armor);
            }
        }
    };

    this.initSVG = function(callback) {
        this.svgCallback = callback;
        var urls = {'svg' : '/images/game/mage/game-icons.svg',
        'tiles' :'/images/game/mage/game-tiles.svg'};
        this.svgToLoad = Object.keys(urls).length;
        for (var i in urls) {
            MageS.Game.loadSingleSvg(urls[i], i);
        }
    };
    this.loadSingleSvg = function(url, key) {
        jQuery.get(url, function (data) {

            MageS.Game.svg.append(jQuery(data).find('svg'));
            MageS.Game.singleSvgLoadDone();
        }, 'xml');

    };

    this.singleSvgLoadDone = function() {
        this.svgToLoad --;
        if (this.svgToLoad == 0) {
            this.svgCallback();
        }
    };

    this.replaceMissingSvg = function() {
        $('.svg.svg-replace').each(function() {

            MageS.Game.replaceSvg($(this));
        });
    };

    this.replaceSvg = function(svgContainerEl) {
        var icon = MageS.Game.svg.find('#' + svgContainerEl.data('svg') + ' path');
        var newIcon = icon.clone();
        var colorName = svgContainerEl.data('color');
        svgContainerEl.removeClass('svg-replace').find('svg').append(newIcon);
        if (colorName) {
            newIcon.css({'fill': this.color[colorName]});
        }
    };

    this.startAction = function(action) {
        switch (action) {
            case 'spell':
                break;
            case '':
            default:
                //$('.battle-border').addClass('action');
                $('.loading-field').fadeIn();
                break;
        }
        if (this.device == 'mobile') {
            $('.mobile-actions').find('path').animate({'svgFill':this.color.brownBright});
        } else if (this.device == 'pc') {
            $('.actions-container .default-actions').fadeOut(this.animationTime / 2);
        }
        $('.actions-container .actions').fadeOut(this.animationTime / 2);
        this.actionInProcess = true;
    };

    this.endAction = function() {
        this.actionInProcess = false;
        $('.loading-field').fadeOut(50);
        $('.actions-container .actions').fadeIn();
        if (this.device == 'mobile') {
            $('.mobile-actions').find('path').animate({'svgFill':this.color.clay}, {duration:200});
        } else if (this.device == 'pc') {
            $('.actions-container .default-actions').fadeIn();
        }
        this.admin.actionEnded();
    };
    
    this.getIcon = function(name, color) {
        var svg = $(this.svg).find('#' + name);
        if (svg.length == 0) {
            info('icon for "' + name + '" not found');
            return;
        }
        var children = svg.children();
        if (color) {
            children.css({'fill': this.color[color]});
        }
        return children;
    };

    this.drawCell = function(cell, x, y, target) {
        if (!target) {
            target = $('.battle-field.current');
        }
        var temaplate = $('#template-map-cell').html();
        Mustache.parse(temaplate);
        var rendered = Mustache.render(temaplate, {'x': x, 'y': y, 'class': cell});
        var obj = $(rendered);
        this.worlds.cell(this.worldType, cell, obj);
        target.append(obj);
        obj.css({
            'margin-left' : (x * this.cellSize) + 'rem',
            'margin-top' : (y * this.cellSize) + 'rem'
        })
    };

    this.itemsMessage = function(message, strong) {
        var temaplate = $('#template-alert-items').html();
        Mustache.parse(temaplate);
        var rendered = Mustache.render(temaplate, {'message': message, 'strong': strong});
        var obj = $(rendered);
        $('.inventory-message-container').append(obj);
        setTimeout(function(){
            $('.inventory-message-container .alert').hide(500);
        }, 3000);
    };

    this.registrationPopup = function() {
        var temaplate = $('#template-registration').html();
        Mustache.parse(temaplate);
        var rendered = Mustache.render(temaplate, {});
        var obj = $(rendered);
        $('.battle-border').append(obj);
        obj.css({opacity:0});
        obj.animate({opacity:1});
        MageS.Game.isGameRuning = false;

    };
    this.cancelRegistration = function() {
        MageS.Game.isGameRuning = true;;
        $('.mage-registration').animate({opacity:0}, {duration:500,complete:function(){$(this).remove()}});
        // !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    };

    this.register = function() {
        this.cancelRegistration();
        var email = $('.mage-registration .email').val();
        var password= $('.mage-registration .password').val();
        MageS.Game.action('register', '{"email":"' + email + '", "password":"' + password + '"}');
    };

    this.configureKeys = function() {
        $(document).keydown(function (event) {
            switch (event.keyCode) {
                case 38: // down
                case 1094:
                    MageS.Game.action('move-up');
                    break;
                case 37: // left
                case 1092:
                    MageS.Game.action('move-left');
                    break;
                case 40: // up
                case 1099:
                    MageS.Game.action('move-down');
                    break;
                case 39: // right
                case 1074:
                    MageS.Game.action('move-right');
                    break;
            }
        });
        $(document).keypress(function (event) {
            if (!MageS.Game.isGameRuning) {
                return;
            }
            switch (event.keyCode) {
                // case 38: // down
                // case 1094:
                //     MageS.Game.action('move-up');
                //     break;
                // case 37: // left
                // case 1092:
                //     MageS.Game.action('move-left');
                //     break;
                // case 40: // up
                // case 1099:
                //     MageS.Game.action('move-down');
                //     break;
                // case 39: // right
                // case 1074:
                //     MageS.Game.action('move-right');
                //     break;

                case 13:  // Enter
                    break;
                case 119 : // w
                    MageS.Game.action('move-up');
                    break;
                case 97 : // a
                    MageS.Game.action('move-left');
                    break;
                case 115 : // s
                    MageS.Game.action('move-down');
                    break;
                case 100 : // d
                    MageS.Game.action('move-right');
                    break;
                case 32 :  // space
                    break;
                case 113 :  // q
                    MageS.Game.spellcraft.showSpellCrafting();
                    break;
                case 101 :  // e
                    MageS.Game.keyPressed('E');
                    break;
                case 114 :  // r
                    break;
                case 102 :  // f
                    MageS.Game.keyPressed('F');
                    break;
                case 0 :                  //// For Mozila
                    switch (event.charCode) {
                        case 119 : // w
                            MageS.Game.action('move-up');
                            break;
                        case 97 : // a
                            MageS.Game.action('move-left');
                            break;
                        case 115 : // s
                            MageS.Game.action('move-down');
                            break;
                        case 100 : // d
                            MageS.Game.action('move-right');
                            break;
                        case 32 :  // space
                            break;
                        case 101 :  // e
                            MageS.Game.keyPressed('E');
                            break;
                        case 113 :  // q
                            MageS.Game.spellcraft.showSpellCrafting();
                            break;
                        case 114 :  // r
                            break;
                        case 102 :  // f
                            MageS.Game.keyPressed('F');
                            break;
                    }
                    break;
            }
        });
    }

};

 
 /**
 * Created by Ilya Rubinchik (ilfate) on 06/11/15.
 */




MageS.Inventory = function (game) {
    this.game = game;
    this.items = {};

    this.buildItems = function() {
        var template = $('#template-item').html();
        Mustache.parse(template);
        var itemsEl = $('.inventory .items');
        var items = itemsEl.data('items');
        for (var id in items) {
            var obj = this.renderItem(template, items[id]);
            itemsEl.append(obj);
            MageS.Game.inventory.addItemDescription(items[id], obj);
            MageS.Game.inventory.bindItem(obj);
        }
        itemsEl.data('items', '').attr('data-items', '');

        // build filters
        $('.items-filter').each(function(){
            $(this).on('click', function(){
                MageS.Game.inventory.filterItems($(this));
            })
        });
        $('.inventory .item').on('click', function() {
            //MageS.Game.spells.IceCrown();
            //MageS.Game.monimations.skweeze($(this));
            //MageS.Game.monimations.spinItem($(this));
            //MageS.Game.monimations.scaleIn($(this));
            //$(this).animate({ textIndent2: 100 }, {
            //    step: function(now,fx) {
            //        info(now);
            //        $(this)[0].style.transform = 'scale(' + now/ 100 + ')';
            //    },
            //    duration:'slow', 'easing':'easeOutElastic'
            //});
        })
    };

    this.filterItems = function(filterEl) {
        var activeFilter = $('.items-filter.active');
        this.turnOffFilters();
        if (activeFilter.length && activeFilter.data('name') == filterEl.data('name')) {
            return;
        }
        filterEl.addClass('active');
        $('.inventory .item:not(.type-' + filterEl.data('name') + '):not(.type-all)').addClass('filtered-out');
    };
    this.turnOffFilters = function () {
        $('.items-filter.active').removeClass('active');
        $('.inventory .item.filtered-out').removeClass('filtered-out');
    };

    this.renderItem = function(template, item) {
        var rendered = Mustache.render(template, {
            'id': item.id,
            //'class': item.class,
            'name': item.name,
            'type': item.type,
            'quantity': item.quantity,
        });
        var obj = $(rendered);
        var icon = $(this.game.svg).find('#' + item.icon + ' path');
        obj.find('svg').append(icon.clone());
        if (item.iconColor !== undefined) {
            obj.find('.svg').addClass(item.iconColor);
        }
        this.items[item.id] = item;
        return obj;
    };

    this.updateItems = function(items) {
        this.turnOffFilters();

        for(var id in items) {
            var config = items[id];
            var existingEl = $('.inventory .item.id-' + id);
            if (existingEl.length) {
                //add item
                var currentValue = parseInt(existingEl.find('.value').html());
                var newQuantity = currentValue + config.quantity;
                if (newQuantity > 0) {
                    existingEl.find('.value').html(newQuantity);
                    this.items[id] = config;
                } else {
                    existingEl.remove();
                }
                if (config.quantity > 0) {
                   // existingEl.
                   // this.game.monimations.spinItem(existingEl);
                    this.showInventory();
                    this.game.monimations.bounce(existingEl);
                    existingEl.find('.value').css({'background-color': '#069E2D', 'color':'#fff'}).animate({
                        'background-color': '#FCEBB6', 'color':'#5E412F'
                    }, {'duration': 2000});
                }
            } else {
                this.showInventory();
                //create new item
                var template = $('#template-item').html();
                Mustache.parse(template);
                var obj = this.renderItem(template, config);
                $('.inventory .items').append(obj);
                MageS.Game.monimations.scaleIn(obj);
                this.addItemDescription(config, obj);
                this.bindItem(obj);

            }
        }
    };

    this.addItemDescription = function(data, item) {
        var temaplate = $('#template-item-tooltip').html();
        Mustache.parse(temaplate);
        var rendered = Mustache.render(temaplate, {'id': data.id, 'name': data.name, 'stats' : data.stats, 'item': data.type});
        var obj = $(rendered);
        $('.tooltip-helper-area').append(obj);
        //if (this.game.device == 'pc') {
            this.bindItemTooltip(item);
        //}
    };

    this.bindItemTooltip = function(item) {
        item.on({
            'mouseenter': function () {
                if (MageS.Game.spellcraft.craftingIsInProgress) {
                    return;
                }
                var id = $(this).data('id');
                $('.tooltip-helper-area .item-tooltip.id-' + id).show();
            },
            'mouseleave': function () {
                var id = $(this).data('id');
                $('.tooltip-helper-area .item-tooltip.id-' + id).hide();
            }
        });
    };

    this.toggleInventory = function() {
        if ($('.items-col').hasClass('active')) {
            //this.hideInventory();
        } else {
            this.showInventory();
        }
    };
    this.showInventory = function() {
        if (this.game.device !== 'pc') {
            if (!$('.items-col').hasClass('active')) {
                this.game.spellbook.hideSpellbook();
                $('.items-col').addClass('active').fadeIn();
                $('.toggle-inventory').addClass('active');
                this.game.spellbook.turnOffPatterns();
                this.game.spellbook.turnOffActiveSpell();
            }
                this.game.chat.hideChat();
        }
    };
    this.hideInventory = function() {
        $('.items-col').hide().removeClass('active');
        $('.toggle-inventory').removeClass('active');
    };

    this.itemClick = function (itemObj) {
        if (MageS.Game.spellcraft.craftingIsInProgress) {
            MageS.Game.spellcraft.itemClick(itemObj);
        }
    };

    this.bindItem = function (item) {
        item.on('mousedown', function() {
            MageS.Game.inventory.itemClick($(this));
        })
    };

    this.addItems = function(game) {
    };
};

 
 /**
 * Created by Ilya Rubinchik (ilfate) on 06/11/15.
 */

$.fn.animateRotate = function(start, angle, duration, easing, complete) {
    var args = $.speed(duration, easing, complete);
    var step = args.step;
    return this.each(function(i, e) {
        args.complete = $.proxy(args.complete, e);
        args.step = function(now) {
            $.style(e, 'transform', 'rotate(' + now + 'deg)');
            if (step) return step.apply(e, arguments);
        };

        $({deg: start}).animate({deg: angle}, args);
    });
};


MageS.Animations = function (game) {
    this.game = game;
    this.animationsInQueue = [];
    this.currentStage = '';
    this.animationsRunning = [];
    this.isAnimationsRunning = false;

    this.stages = [];
    this.stagesDefenition = [
        'mage-before-action-speech',
        'mage-action',
        'mage-action-2',
        'mage-action-3',
        'mage-after-action-speech',
        'mage-action-effect',
        'mage-action-effect-2',
        'unit-action',
        'unit-action-2',
        'unit-action-3',
        'turn-end-effects',
        'turn-end-effects-2',
        'message-time',
        'message-time-2',
        'message-time-3',
    ];

    this.animateEvents = function(game) {
        this.animationsInQueue = game.events;
        this.stages = this.stagesDefenition;
        this.isAnimationsRunning = true;
        this.runAnimations();
    };

    this.runAnimations = function() {

        this.runSingleStageAnimation();
    };

    this.getNextStageName = function() {
        var stage = this.stages[0];
        this.stages = this.stages.slice(1);
        return stage;
    };

    this.runSingleStageAnimation = function() {
        //if (cardId !== undefined) {
        //    var unit = this.getUnitObj(cardId);
        //    this.stopUnitAnimation(unit);
        //}
        var stage = this.getNextStageName();
        if (!stage) {
            this.game.endAction();
            this.isAnimationsRunning = false;
            return;
        }
        if (this.animationsInQueue[stage] === undefined) {
            this.runSingleStageAnimation();
            return;
        }
        this.currentStage = stage;
        var stageAnimations = this.animationsInQueue[stage];
        this.animationsRunning[stage] = stageAnimations.length;
        for (var i in stageAnimations) {
            this.selectAnimationByName(stageAnimations[i], stage);
        }

    };

    this.singleAnimationFinished = function(stage) {
        this.animationsRunning[stage]--;
        if (this.animationsRunning[stage] == 0) {
            this.runSingleStageAnimation();
        } else if (this.animationsRunning[stage] < 0) {
            info('Error. More animations finished then started');
        }
    };

    this.selectAnimationByName = function(data, stage) {
        switch (data.name) {
            case 'mage-move':
                this.mageMoveAnimation(data.data, stage);
                break;
            case 'mage-rotate':
                this.mageRotateAnimation(data.data, stage);
                break;
            case 'mage-spell-cast':
                this.spellCastAnimation(data.data, stage);
                break;
            case 'mage-add-armor':
                this.mageAddArmorAnimation(data.data, stage);
                break;
            case 'mage-add-status':
                this.mageAddStatusAnimation(data.data, stage);
                break;
            case 'mage-remove-status':
                this.mageRemoveStatusAnimation(data.data, stage);
                break;
            case 'mage-damage':
                this.mageDamageAnimation(data.data, stage);
                break;
            case 'mage-heal':
                this.mageHealAnimation(data.data, stage);
                break;
            case 'mage-use-portal':
                this.mageUsePortalAnimation(data.data, stage);
                break;
            case 'mage-death':
                this.mageUsePortalAnimation(data.data, stage);
                break;
            case 'unit-kill':
                this.unitKillAnimation(data.data, stage);
                break;
            case 'unit-move':
                this.unitMoveAnimation(data.data, stage);
                break;
            case 'unit-rotate':
                this.unitRotateAnimation(data.data, stage);
                break;
            case 'unit-attack':
                this.unitAttackAnimation(data.data, stage);
                break;
            case 'unit-remove-status':
                this.unitRemoveStatusAnimation(data.data, stage);
                break;
            case 'unit-spawn':
                this.unitSpawnAnimation(data.data, stage);
                break;
            case 'spell-craft':
                this.game.spellcraft.endSpellCraftAnimations(data.data, stage);
                break;
            case 'unit-damage':
                info('Unit got ' + data.data.value + ' damage');
                //$('.health-value').html(data.data.health);
                this.showDamageAnimation(data.data, 'damage', true, stage);
                break;
            case 'object-destroy':
                this.objectDestroyAnimation(data.data, stage);
                break;
            case 'object-activate':
                this.game.objects.activate(data.data, stage);
                break;
            case 'object-move':
                this.game.objects.move(data.data, stage);
                break;
            case 'add-object':
                this.addObjectAnimation(data.data, stage);
                break;
            case 'add-unit':
                this.addUnitAnimation(data.data, stage);
                break;
            case 'add-unit-status':
                this.addUnitStatusAnimation(data.data, stage);
                break;
            case 'cell-change':
                this.changeCellAnimation(data.data, stage);
                break;
            case 'say-message':
                this.sayMessageAnimation(data.data, stage);
                break;
            case 'user-ask-to-register':
                this.askRegistrationAnimation(data.data, stage);
                break;
            case 'effect':
                this.effectAnimation(data.data, stage);
                break;
            case 'wait':
                this.waitAnimation(data.data, stage);
                break;
        }
    };

    this.mageMoveAnimation = function(data, stage) {
        this.game.mage.moveMage(data, stage);
    };
    
    this.mageRotateAnimation = function(data, stage) {
        var el = $('.battle-border .mage');
        var currentD = el.data('d');
        if (currentD == data.d) {
            MageS.Game.animations.singleAnimationFinished(stage);
            return;
        }
        this.rotate(el, data, stage);
    };
    this.rotate = function(el, data, stage) {
        var d = data.d * 90;
        var oldD = data.wasD * 90;
        if (oldD == 270 && d == 0) {
            oldD = -90;
        }
        if (oldD == 0 && d == 270) {
            oldD = 360;
        }

        el.removeClass('d-' + data.d);
        el.animateRotate(oldD, d, this.game.animationTime / 3, "swing", function(){
            $(this).addClass('d-' + data.d).data('d', data.d);
            if (stage) {
                MageS.Game.animations.singleAnimationFinished(stage);
            }
        });
    };
    this.unitKillAnimation = function(data, stage) {
        var unit = $('.battle-border .unit.id-' + data.id);
        if (unit.length < 1) {
            MageS.Game.animations.singleAnimationFinished(stage);
            return;
        }
        this.game.units.animateDeath(unit, stage);
    };
    
    this.unitMoveAnimation = function(data, stage) {
        this.game.units.moveUnit(data, stage);
    };
    
    this.unitRotateAnimation = function(data, stage) {
        var unit = $('.battle-border .unit.id-' + data.id + ' .rotate-div');

        if (unit.length > 0) {
            this.rotate(unit, data, stage);
        } else {
            info('unit for rotate with id = ' + data.id + ' was not found');
            var unit2 = $('.unit-field .unit.id-' + data.id + ' .rotate-div');
            if (unit2.length > 0) {
                info('ANIMATION ORDER IS FUCKED UP!!!!!!')
            }
            MageS.Game.animations.singleAnimationFinished(stage);
        }
    };
    this.unitAttackAnimation = function(data, stage) {

        this.game.attacks.attack(data, stage);
    };
    this.unitRemoveStatusAnimation = function(data, stage) {

        var unitFlag = $('.battle-border .unit.id-' + data.id + ' .unit-status.flag-' + data.flag);
        if (unitFlag.length > 0) {
            unitFlag.remove();
        }

        MageS.Game.animations.singleAnimationFinished(stage);
     
    };
    this.unitSpawnAnimation = function(data, stage) {

        this.game.units.unitSpawn(data, stage);

        
     
    };
    this.addUnitStatusAnimation = function(data, stage)
    {
        var unit = $('.battle-border .unit.id-' + data.id);
        if (unit.length > 0) {
            this.game.units.addUnitStatusIcons(unit, data.flags);
        }

        setTimeout(function () {
            MageS.Game.animations.singleAnimationFinished(stage);
        }, 600);
    };
    this.mageAddStatusAnimation = function(data, stage)
    {
        var mage = $('.battle-border .mage');
        this.game.mage.addMageStatus(data.flags);

        setTimeout(function () {
            MageS.Game.animations.singleAnimationFinished(stage);
        }, 600)
    };
    this.mageRemoveStatusAnimation = function(data, stage) {

        var mage = $('.battle-border .mage');
        mage.find('.unit-status.flag-' + data.flag).remove();

        MageS.Game.animations.singleAnimationFinished(stage);
     
    };
    this.spellCastAnimation = function(data, stage) {
        this.game.spells.cast(data, stage);
    };
    this.mageDamageAnimation = function(data, stage) {
        info('Some one dealed ' + data.value + ' damage to you');
        //$('.health-value').html(data.health);
        this.game.updateHealth(data);
        //$('.health-bar .progress-bar-success').css('width', data.health + '%');
        this.showDamageAnimation(data, 'damage', false, stage);
    };
    this.mageHealAnimation = function(data, stage) {
        info('Healing for ' + data.value);
        //$('.health-value').html(data.health);
        this.game.updateHealth(data);
        //$('.health-bar .progress-bar-success').css('width', data.health + '%');
        this.showDamageAnimation(data, 'heal', false, stage);
    };
    this.mageAddArmorAnimation = function(data, stage) {
        info('Adding armor ' + data.value);
        //$('.health-value').html(data.health);
        this.game.updateHealth(data);
        //$('.health-bar .progress-bar-success').css('width', data.health + '%');
        this.showDamageAnimation(data, 'armor', false, stage);
    };
    this.mageUsePortalAnimation = function(data, stage) {
        info('PORTAL');
        //$('.battle-field.current .cell').css('position', 'fixed').each(function() {
        //    //var thisTop = parseInt($(this).offset().top);
        //    //var thisLeft = parseInt($(this).offset().left);
        //    //info(thisTop);
        //    //$(this).css({'top' : thisTop, 'left': thisLeft})
        //    $(this).animate({
        //        'margin-top': Math.random() * 500
        //    }, {'easing': 'easeOutBack'});
        //    $(this).animate({
        //        'margin-left': Math.random() * 500
        //    }, {'easing': 'easeInBack'})
        //});
        this.game.monimations.rotateWithScale($('body'), 0, 540, 1, -1, 1500);
        setTimeout(function(){
            if (MageS.Game.admin.isEnabled) {
                window.location = '/Spellcraft/admin';
            } else {
                window.location = '/Spellcraft';
            }
        }, 750);
            //.animate()
    };

    this.showDamageAnimation = function (data, type, enemy, stage) {
        var id = data.id; var target = {};
        if (type == 'damage') {
            var value = -data.value;
        } else {
            var value = data.value;
        }
        if (enemy) {
            target = $('.unit.id-' + id);
            if (target.length < 1) {
                MageS.Game.animations.singleAnimationFinished(stage);
                return;
            }
            var unitTooltip = $('.tooltip-unit-area .unit-tooltip.id-' + data.id);
            if (unitTooltip.length > 0) {
                unitTooltip.find('.current-health').html(data.health);
            }
        } else {
            target = $('.battle-border .mage-damage-container');
        }
        
        var el = $('<div>' + value + '</div>').addClass('damage');
        if (type == 'heal') {
            el.addClass('heal');
        } if(type == 'armor') {
            el.addClass('armor');
        }
        target.prepend(el);
        var distanceInRem = 0.75;
        if (rand(0,1) == 1) {
            var randX = distanceInRem * 100;
            var randY = rand(0, distanceInRem * 100);
        } else {
            var randX = rand(0, distanceInRem * 100);
            var randY = distanceInRem * 100;
        }
        randX = randX / 100;
        randY = randY / 100;
        var y = parseInt(el.css('margin-top'))/20;
        var x = parseInt(el.css('margin-left'))/20;
        if (rand(0,1) == 1) {
            y += randY;
        } else {
            y -= randY;
        }
        if (rand(0,1) == 1) {
            x += randX;
        } else {
            x -= randX;
        }
        el.animate(
                {'margin-top':y + 'rem','margin-left':x + 'rem', opacity: 0.3},
                {duration:400, complete:function() {
            $(this).remove();
        }});
        setTimeout(function () {
            MageS.Game.animations.singleAnimationFinished(stage);
        }, 400);
    };

    this.askRegistrationAnimation = function(data, stage)
    {
        setTimeout(function() {
            MageS.Game.registrationPopup();
        }, data.time);


        setTimeout(function() {
            MageS.Game.animations.singleAnimationFinished(stage);
        }, data.time+ 2000);
    };

    this.effectAnimation = function(data, stage)
    {
        this.game.spells.isSecondPartWaiting = stage;
        this.game.spells.continue(data.spell, data)
    };

    this.waitAnimation = function(data, stage)
    {
        setTimeout(function() {
            MageS.Game.animations.singleAnimationFinished(stage);
        }, data.time);
    };

    this.sayMessageAnimation = function(data, stage)
    {
        this.game.chat.dialogMessage(data, stage);
    };

    this.objectDestroyAnimation = function(data, stage)
    {
        var el = $('.object.id-' + data.id);
        if (el.length > 0) {
            el.animate({opacity:0},{'duration':300, 'complete':function(){
                $(this).remove();
            }});
        }
        setTimeout(function () {
            MageS.Game.animations.singleAnimationFinished(stage);
        }, 300);
    };

    this.addObjectAnimation = function(data, stage)
    {
        var newObject = this.game.objects.drawObject(data.object, data.object.x, data.object.y);
        MageS.Game.animations.singleAnimationFinished(stage);
    };

    this.addUnitAnimation = function(data, stage)
    {
        info(data.unit);
        var newUnit = this.game.units.drawUnit(data.unit, data.targetX, data.targetY);
        MageS.Game.animations.singleAnimationFinished(stage);
    };
    
    this.changeCellAnimation = function(data, stage)
    {
        // var newObject = this.game.drawObject(data.object, data.object.x, data.object.y);
        this.game.worlds.cellsChange(data, stage);
    };
    
    
};

 
 /**
 * Created by Ilya Rubinchik (ilfate) on 06/11/15.
 */




MageS.Attacks = function (game) {
    this.game = game;
    this.field = {};
    this.attacks = {};

    this.init = function () {
        this.field = $('.attacks-field');
    };

    this.attack = function(data, stage) {
        var attackId = Math.random() * 10000;
        if (this.attacks[attackId] !== undefined) {
            this.attack(data, stage);
            info('Restart attack');
            return;
        }
        var container = $('<div></div>').addClass('id-' + attackId);
        this.attacks[attackId] = {
            'data': data,
            'container': container
        };
        $('.attacks-field').append(container);
        switch (data.attack.animation) {
            case 'melee':
                this.game.units.meleeAttack(data, container, attackId, stage);
                break;
            case 'fireSpit':
                this.fireSpit(attackId, stage);
                break;
            case 'web':
                this.web(attackId, stage);
                break;
            case 'spawn':
                this.spawn(attackId, stage);
                break;
            case 'greenLaser':
                this.greenLaser(attackId, stage);
                break;
            case 'bow':
                this.bow(attackId, stage);
                break;
            default:
                info('there is no attack animation for ' + data.attack.animation);
                MageS.Game.attacks.finishAttack(attackId, stage);
                break;
        }
    };

    this.fireSpit = function(id, stage) {
        var data = this.attacks[id].data;
        MageS.Game.spells.beam(data.fromX, data.fromY, data.targetX, data.targetY, '#F07818');
        MageS.Game.spells.beam(data.fromX, data.fromY, data.targetX, data.targetY, '#F07818', 'icon-bullet-line-small-curve-right');
        MageS.Game.spells.beam(data.fromX, data.fromY, data.targetX, data.targetY, '#F07818', 'icon-bullet-line-small-curve-left');

        setTimeout(function() {
            MageS.Game.attacks.finishAttack(id, stage);
        }, 800);
    };

    this.web = function(id, stage) {
        var data = this.attacks[id].data;
        var options = {time:700, rotate:true};
        MageS.Game.spells.moveIcon('icon-spider-web', 'color-white', data.fromX, data.fromY, data.targetX, data.targetY, options);


        setTimeout(function() {
            MageS.Game.attacks.finishAttack(id, stage);
        }, 800);
    };

    this.spawn = function(id, stage) {
        var data = this.attacks[id].data;
        //var options = {time:700, rotate:true};
        for (var n in data.targets) {
            var options = {
                'moveLeft': ((data.targets[n][0] + 0.5) * MageS.Game.cellSize) + 'rem',
                'moveTop': ((data.targets[n][1] + 0.5) * MageS.Game.cellSize) + 'rem',
                'time': 1,
                'beamWidth': 10,
                'segment1': ["100%", "100%"],
                'segment2': ["-8%", "0"],
                'delete':true
            };
            for (var i = 0; i < 5; i++) {
                //'icon-bullet-simple-middle-line'
                MageS.Game.spells.beamStrike(4, 360 / 5 * i, 'icon-bullet-start-spin', '#07B26A', options)
            }
        }

        setTimeout(function() {
            MageS.Game.attacks.finishAttack(id, stage);
        }, 800);
    };

    this.greenLaser = function(id, stage) {
        var data = this.attacks[id].data;
        var options = {
            'time': 0.2,
            'beamWidth': 10,
            'segment1': ["0%", "0%"],
            'segment2': ["0%", "100%"],
        };
        var unit = $('.battle-border .unit.id-' + data.attackerId);
        MageS.Game.units.rotateUnitToTarget(unit, data);
        var beam = MageS.Game.spells.beam(data.fromX, data.fromY, data.targetX, data.targetY, '#07B26A', 'icon-bullet-line',  options);

        var options2 = {time:300};
        var x = 0;
        var y = 0;
        for(var i = 0; i < 30; i ++) {
            x = data.targetX + (Math.random() * 2) - 1;
            y = data.targetY + (Math.random() * 2) - 1;
            options2.delay = 200 + (Math.random() * 800);
            options2.scale = 0.1;
            MageS.Game.spells.moveIcon('icon-cercle', 'color-green', data.targetX, data.targetY, x, y, options2);
        }

        setTimeout(function() {
            MageS.Game.units.rotateUnitBack(unit);
            beam.remove();
            MageS.Game.attacks.finishAttack(id, stage);
        }, 1200);
    };
    
    this.bow = function(id, stage) {
        var data = this.attacks[id].data;
        var options = {
            'time': 0.1,
            'time2': 0.1,
            'beamWidth': 12,
            'segment1': ["0%", "0%"],
            'segment2': ["40%", "60%"],
            'segment3': ["80%", "100%"],
            'delete':true,
        };
        var unit = $('.battle-border .unit.id-' + data.attackerId);
        MageS.Game.units.rotateUnitToTarget(unit, data);
        var beam = MageS.Game.spells.beam(data.fromX, data.fromY, data.targetX, data.targetY, MageS.Game.color.white, 'icon-bullet-line',  options);

        setTimeout(function() {
            MageS.Game.units.rotateUnitBack(unit);
            beam.remove();
            MageS.Game.attacks.finishAttack(id, stage);
        }, 350);
    };

    this.finishAttack = function (id, stage) {
        this.clearAttack(id);
        MageS.Game.animations.singleAnimationFinished(stage);
    };
    
    this.clearAttack = function (id) {
        if (this.attacks[id] === undefined) {
            info('Wtf I cant clear attack with id = ' + id);
            return;
        }
        this.attacks[id].container.remove();
        delete this.attacks[id];
    };
};

 
 /**
 * Created by Ilya Rubinchik (ilfate) on 06/11/15.
 */




MageS.Spellbook = function (game) {
    this.game = game;
    this.spellsPatterns = {};

    this.buildSpells = function() {

        var template = $('#template-inventory-spell').html();
        Mustache.parse(template);
        var spellsEl = $('.spellBook .spells');
        var spells = spellsEl.data('spells');
        for (var id in spells) {
            var obj = this.renderSpell(template, spells[id]);
            spellsEl.append(obj);
            MageS.Game.spellbook.buildSpell(obj);

        }
        spellsEl.data('spells', '').attr('data-spells', '');

        // build filters
        $('.spell-filter').each(function(){
            $(this).on('click', function(){
                MageS.Game.spellbook.filterSpells($(this));
            })
        });

        $('.pattern-field .pattern-cell').on('click', function() {MageS.Game.spellbook.patternClick($(this))});


    };

    this.buildSpell = function(spellEl) {
        spellEl.on('click', function() {
            MageS.Game.spellbook.spellClick($(this));
        });
    };

    this.spellClick = function(spellEl) {
        if (this.game.spellcraft.isBlenderActive) {
            this.game.spellcraft.itemClick(spellEl);
            return;
        }
        if (spellEl.hasClass('cooldown') && this.game.device !== 'mobile') {
            info('This spell is on cooldown');
            return;
        }
        if (this.game.animations.isAnimationsRunning) {
            this.game.monimations.shake(spellEl);
            return;
        }
        var spellType = spellEl.data('spell-type');
        var targetType = spellEl.data('target-type');
        var isCastAllowed = false;
        var isCreateHiddenDescription = false;
        var isAddCastToDescription = false;
        if (this.game.device == 'mobile') {
            if (spellEl.hasClass('active')) {
                isCastAllowed = true;
            } else {
                isCreateHiddenDescription = true;
            }
        } else if(this.game.device == 'pc') {
            isCastAllowed = false;

        } else if(this.game.device == 'tablet') {
            isCastAllowed = false;
        }
        switch (spellType) {
            case 'noTargetSpell':
                if (isCastAllowed && !spellEl.hasClass('cooldown')) {
                    this.castSpellStart(spellEl, '{"id":"' + spellEl.data('id') + '"}');
                    spellEl.removeClass('active');
                } else {
                    if (this.checkForActiveSpells(spellEl)) {
                        isAddCastToDescription = true;
                        spellEl.addClass('active');
                        this.activateSpellTooltipPermanent(spellEl);
                    }
                }
                break;
            case 'directTargetSpell':
                isAddCastToDescription = true;
                switch (targetType) {
                    case 'enemy':
                        //find all enemies/
                        // hgihtlight them
                        MageS.Game.spellbook.showEnemyTargets(spellEl);
                        break;
                }
                break;
            case 'pattern':
                isAddCastToDescription = true;
                // display the pattern
                MageS.Game.spellbook.showPattern(spellEl, this.spellsPatterns[spellEl.data('id')]);
                break;
        }
        if (isCreateHiddenDescription) {
            this.createHiddenDescription(spellEl);
        }
        if (isAddCastToDescription) {
            this.addCastToDescription(spellEl);
        }
    };
    this.spellCastClick = function() {
        var spellEl = $('.spell.active');
        this.castSpellStart(spellEl, '{"id":"' + spellEl.data('id') + '"}');
    };

    this.updateSpells = function(spells) {
        for(var id in spells) {
            var spell = spells[id];
            var existingEl = $('.spell.id-' + id);
            if (spell.status == 'new') {
                //create new spell
                var template = $('#template-inventory-spell').html();
                Mustache.parse(template);
                var obj = this.renderSpell(template, spell);
                $('.spellBook .spells').append(obj);
                this.game.monimations.scaleIn(obj, 2000);
                obj.tooltip();
                MageS.Game.spellbook.buildSpell(obj);
                MageS.Game.spellbook.addSpellDescription(spell, obj);

                //do wee need to create filter?
                var filter = $('.spells-filter-panel .spell-filter.school-' + spell.schoolId);
                if (filter.length < 1) {
                    // create new filter
                    var template = $('#template-inventory-spell-filter').html();
                    Mustache.parse(template);
                    var rendered = Mustache.render(template, {
                        'schoolId': spell.schoolId,
                        'class': spell.schoolViewData.class,
                    });
                    var objFilter = $(rendered);
                    var icon = this.game.getIcon(spell.schoolViewData.icon, spell.schoolViewData.color);
                    objFilter.find('svg').append(icon.clone());
                    objFilter.on('click', function(){
                        MageS.Game.spellbook.filterSpells($(this));
                    });
                    $('.spells-filter-panel').append(objFilter);
                }
                $('.spellBook .spells').append(obj);
            } else {
                if (existingEl.length) {
                    //add spell
                    if (spell.status == 'deleted') {
                        this.deleteSpellFromInventory(existingEl);
                    } else {
                        var newQuantity = spell.config.usages;
                        if (newQuantity > 0) {
                            existingEl.find('.value').html(newQuantity);
                            existingEl.data('cooldown-mark', spell.config.cooldownMark);
                            existingEl.find('.value').css({'background-color': '#FF8360', 'color':'#fff'}).animate({
                                'background-color': '#FCEBB6', 'color':'#5E412F'
                            }, {'duration': 2000});
                            MageS.Game.monimations.skweeze(existingEl);
                            //cooldowns
                            if (!existingEl.hasClass('cooldown')) {
                                if (this.game.turn < spell.config.cooldownMark) {
                                    this.addCooldown(existingEl);
                                }
                            } else {
                                if (this.game.turn >= spell.config.cooldownMark) {
                                    this.removeCooldown(existingEl);
                                }
                            }
                        } else {
                            this.deleteSpellFromInventory(existingEl);
                        }
                    }
                }
            }
        }
    };

    this.deleteSpellFromInventory = function(spellEl) {
       spellEl.animate({
           bullshit: 100
       },{
           step: function(now,fx) {
               var x = now / 100;
               $(this)[0].style.transform = 'scale(' + (1 - x) + ') rotate(' + x * 360 + 'deg)';
           },
           duration:1500, 'easing':'easeInBounce',
           'complete': function() {
               $(this).remove();
           }
       });
    };

    this.renderSpell = function(template, spell) {
        var spellType = '';
        var targetType = '';
        if (spell.viewData.noTargetSpell) {
            spellType = 'noTargetSpell';
        } else if (spell.viewData.directTargetSpell) {
            spellType = 'directTargetSpell';
            targetType = spell.viewData.directTargetSpell;
        } else if(spell.pattern) {
            spellType = 'pattern'
            this.spellsPatterns[spell.id] = spell.pattern;
        }
        var icon = $(this.game.svg).find('#' + spell.viewData.iconClass + ' path');
        //<use xlink:href="/images/game/mage/game-icons.svg#{{icon-class}}"></use>
        var rendered = Mustache.render(template, {
            'id': spell.id,
            'viewData': spell.viewData,
            'quantity': spell.config.usages,
            'cooldownMark': spell.config.cooldownMark,
            'spellType': spellType,
            'targetType': targetType,
            'school': spell.schoolId,
        });
        var obj = $(rendered);
        obj.find('svg').append(icon.clone());
        if (spell.viewData.iconColor !== undefined) {
            obj.find('.svg').addClass(spell.viewData.iconColor);
        }
        MageS.Game.spellbook.addSpellDescription(spell, obj);
        if (this.game.turn < spell.config.cooldownMark) {
            // this spell is on cooldown
            this.addCooldown(obj);
        }
        return obj;
    };

    this.turn = function() {
        $('.spellBook .spell.cooldown').each(function() {
            if ($(this).data('cooldown-mark') <= MageS.Game.turn) {
                MageS.Game.spellbook.removeCooldown($(this));

            } else {
                MageS.Game.spellbook.stepCooldown($(this));
            }
        });
    };

    this.addCooldown = function(spellEl) {
        spellEl.addClass('cooldown');
        var id = spellEl.data('id');
        $('.spell-tooltip.id-' + id + ' .cooldown')
            .find('.active').show().find('.value')
            .html(spellEl.data('cooldown-mark') - this.game.turn);
    };

    this.removeCooldown = function(spellEl) {
        info('removing cooldown');
        spellEl.removeClass('cooldown');
        var id = spellEl.data('id');
        $('.spell-tooltip.id-' + id + ' .cooldown .active').hide();
    };

    this.stepCooldown = function(spellEl) {
        var id = spellEl.data('id');
        $('.spell-tooltip.id-' + id + ' .cooldown .active .value')
            .html(spellEl.data('cooldown-mark') - this.game.turn);
    };

    this.filterSpells = function(filterEl) {
        var activeFilter = $('.spell-filter.active');
        $('.spell-filter.active').removeClass('active');
        $('.spellBook .spell.filtered-out').removeClass('filtered-out');
        if (activeFilter.length && activeFilter.data('school') == filterEl.data('school')) {
            return;
        }
        filterEl.addClass('active');
        $('.spellBook .spell:not(.school-' + filterEl.data('school') + ')').addClass('filtered-out');
    };
    this.turnOffFilters = function () {
        $('.spell-filter.active').removeClass('active');
        $('.spellBook .spell.filtered-out').removeClass('filtered-out');
    };
    this.filterAllWithValueLessThen = function(value) {
        $('.spellBook .spell').each(function() {
            if (!$(this).hasClass('filtered-out') && parseInt($(this).find('.value').html()) < value) {
                $(this).addClass('filtered-out');
            }
        })
    };

    this.checkForActiveSpells = function(spell) {
        var activeSpell = $('.spell.active');
        if (activeSpell.length) {
            this.turnOffPatterns();
            this.removePermanentTooltip();
            this.turnOffActiveSpell();
            if (spell && activeSpell.data('id') == spell.data('id')) {
                return false;
            }
        }
        return true;
    };

    this.turnOffActiveSpell = function() {
        $('.spell.active').removeClass('active');
    };

    this.showPattern = function (spell, pattern) {
        if (this.game.actionInProcess == true) {
            info('Can`t show pattern while action is in process');
            return;
        }
        if (!this.checkForActiveSpells(spell)) {
            return;
        }
        this.activateSpellTooltipPermanent(spell);
        spell.addClass('active');
        $('#move-control-field').addClass('disable');
        mageDirection = 0;
        for(var d = 0; d < 4; d++) {
            for (var key in pattern) {
                var x = pattern[key][0];
                var y = pattern[key][1];
                var relativeCoords = this.rotatePatternCoordinats(x, y, d)
                var patternCell = $('.pattern-cell.x-' + relativeCoords[0] + '.y-' + relativeCoords[1]);
                patternCell.addClass('group-d-' + d).data('d', d);
                if (d == mageDirection) {
                    patternCell.addClass('active');
                } else {
                    patternCell.addClass('visible');
                }
                patternCell.on('mouseenter', function() {MageS.Game.spellbook.patternSwitchDirection($(this))});
            }
        }
    };
    this.rotatePatternCoordinats = function(x, y, d) {
        switch (d) {
            case 0: return [x, y];
            case 1: return [-y, x];
            case 2: return [-x, -y];
            case 3: return [y, -x];
        }
    };
    this.patternSwitchDirection = function(patternCell) {
        if (patternCell.hasClass('active')) {return;}
        var d = patternCell.data('d');
        $('.pattern-cell.active').removeClass('active').addClass('visible');
        $('.pattern-cell.group-d-' + d).removeClass('visible').addClass('active');

    };
    this.turnOffPatterns = function() {
        for(var d = 0; d < 4; d++) {
            $('.pattern-cell.group-d-' + d)
                .removeClass('group-d-' + d)
                .data('d', '');
        }
        $('.pattern-cell.active').removeClass('active');
        $('.pattern-cell.visible').removeClass('visible');
        $('#move-control-field').removeClass('disable');
        this.deleteHiddenDescription();
    };

    this.patternClick = function(patternCell) {
        var spell = $('.spell.active');
        if (spell.length !== 1) {
            info('ERROR not one spell active');
        }
        spell.removeClass('active');
        var d = patternCell.data('d');
        var x = patternCell.data('x');
        var y = patternCell.data('y');
        var dataString = '{"id":"' + spell.data('id') + '","d":"' + d + '","x":"' + x + '","y":"' + y + '"}';
        this.castSpellStart(spell, dataString);
    };

    this.castSpellStart = function(spellEl, dataString) {
        this.removePermanentTooltip();
        MageS.Game.action('spell', dataString);
        var spellName = spellEl.data('spell');
        this.game.spells.startCast(spellName);
    };

    this.showEnemyTargets = function(spell) {
        if (!this.checkForActiveSpells(spell)) {
            return;
        }
        this.activateSpellTooltipPermanent(spell);
        spell.addClass('active');
        $('#move-control-field').addClass('disable');

        $('.battle-border .unit-field .unit').each(function () {
            // var cellElem = $(this).parent('.cell');
            var x = $(this).data('x');
            var y = $(this).data('y');
            var patternCell = $('.pattern-cell.x-' + x + '.y-' + y);
            patternCell.addClass('active');
        });
    };

    this.addSpellDescription = function(data, spell) {
        var temaplate = $('#template-spell-tooltip').html();
        Mustache.parse(temaplate);

        var ingredients = false;
        if (data.ingredients !== undefined && data.ingredients.length > 0) {
            ingredients = data.ingredients;
        }

        var rendered = Mustache.render(temaplate, {'id': data.id, 'name': data.viewData.name,
            'description' : data.viewData.description, 'cooldown': data.config.cooldown, 'ingredients':ingredients
        });

        var obj = $(rendered);
        if (data.viewData.noTargetSpell !== undefined) {
            obj.addClass('noTargetSpell');
        }
        if (ingredients) {
            for (var i in ingredients) {
                var item = ingredients[i];
                var icon = this.game.getIcon(item.icon);
                obj.find('.' + item.icon + ' svg').append(icon.clone());
                if (item.iconColor !== undefined) {
                    obj.find('.svg.' + item.icon).addClass(item.iconColor);
                }
            }
        }
        $('.tooltip-spell-area').append(obj);
        if (this.game.device == 'pc') {
            spell.on({
                'mouseenter': function () {
                    var id = $(this).data('id');
                    $('.tooltip-spell-area .spell-tooltip.id-' + id).addClass('hover');
                },
                'mouseleave': function () {
                    var id = $(this).data('id');
                    $('.tooltip-spell-area .spell-tooltip.id-' + id).removeClass('hover');
                }
            });
        }
    };
    this.createHiddenDescription = function(spellEl) {
        var id = spellEl.data('id');
        var tooltip = $('.tooltip-spell-area .spell-tooltip.id-' + id).clone();
        tooltip.height(this.game.chat.inventorySize + 'rem');
        $('#mobile-spell-info-container').show().append(tooltip);
    };
    this.deleteHiddenDescription = function() {
        $('#mobile-spell-info-container').hide().find('.spell-tooltip').remove();
        if ($('#mobile-spell-info-container').hasClass('active')) {
            this.toggleHiddenDescription();
        }
    };
    this.toggleHiddenDescription = function() {
        if ($('#mobile-spell-info-container').hasClass('active')) {
            $('#mobile-spell-info-container').removeClass('active').animate({
                'margin-left': - this.game.mageInventorySize + ((parseInt($('.right-panel').width()) * 15) / (this.game.rem * 100)) + 'rem'
            }, {'easing': 'easeOutElastic'});
        } else if (!$('#mobile-spell-info-container').hasClass('active')) {
            $('#mobile-spell-info-container').addClass('active').animate({
                'margin-left': '0'
            }, {'easing': 'easeOutElastic'});
        }
    };
    this.activateSpellTooltipPermanent = function(spellEl) {
        var id = spellEl.data('id');
        $('.tooltip-spell-area .spell-tooltip.id-' + id).addClass('click');
        var spellType = spellEl.data('spell-type');
        switch (spellType) {
            case 'noTargetSpell':

                break;
            case 'directTargetSpell':
            case 'pattern':

                break;
        }
    };
    this.removePermanentTooltip = function() {
        $('.spell-tooltip.click').removeClass('click');
    };
    this.addCastToDescription = function(spellEl) {
        var newCastButton = spellEl.find('.svg').clone().addClass('cast-button');
        if (spellEl.hasClass('cooldown')) {
            newCastButton.find('path').css({'fill': '#ccc'});
        } else {
            newCastButton.on('click', function (e) {
                e.stopPropagation();
                MageS.Game.spellbook.spellClick($('.spellBook .spell.active'));
            });
        }
        $('#mobile-spell-info-container .spell-tooltip').prepend(newCastButton);
    };

    this.panMobileSpellDescriptionRight = function (event) {
        if ($('#mobile-spell-info-container').hasClass('active')) {
            return;
        }
        $('#mobile-spell-info-container').css({
            'margin-left': - this.game.mageInventorySize + (1.5 * this.game.cellSize) + (event.distance / this.game.rem) + 'rem'
        });
    };
    this.panMobileSpellDescriptionLeft = function (event) {
        if (!$('#mobile-spell-info-container').hasClass('active')) {
            return;
        }
        $('#mobile-spell-info-container').css({
            'margin-left': - (event.distance / this.game.rem) + 'rem'
        });
    };

    this.toggleSpellbook = function() {
        if ($('.spells-col').hasClass('active')) {
            //this.hideSpellbook();
        } else {
            this.showSpellbook();
        }
    };
    this.showSpellbook = function() {
        if (this.game.device !== 'pc') {
            this.game.inventory.hideInventory();
            $('.spells-col').addClass('active').fadeIn();
            $('.toggle-spellbook').addClass('active');
            this.game.chat.hideChat();
        }
    };
    this.hideSpellbook = function() {
        $('.spells-col').hide().removeClass('active');
        $('.toggle-spellbook').removeClass('active');
        this.removePermanentTooltip();
        this.turnOffPatterns();
    };



};

 
 /**
 * Created by Ilya Rubinchik (ilfate) on 06/11/15.
 */

MageS.Spells = function (game) {
    this.game = game;
    this.currentSpellName = '';
    this.isSecondPartWaiting = false;
    this.spellAnimationRunning = false;
    this.stopAnimation = false;
    this.currentSpellData = {};
    this.savedData = [];
    this.fire = {};
    this.water = {};
    this.air = {};
    this.earth = {};
    this.arcane = {};
    this.init = function () {
        this.fire = new MageS.Spells.Fire(this.game, this);
        this.water = new MageS.Spells.Water(this.game, this);
        this.air = new MageS.Spells.Air(this.game, this);
        this.earth = new MageS.Spells.Earth(this.game, this);
        this.arcane = new MageS.Spells.Arcane(this.game, this);
    };

    this.cast = function(data, stage) {

        if (this.spellAnimationRunning) {
            this.currentSpellData = data;
            this.isSecondPartWaiting = stage;
        } else {
            info('there is no animation running for spell ' + data.spell);
            MageS.Game.animations.singleAnimationFinished(stage);
        }
    };

    this.startCast = function(name) {
        var isSpellAnimated = true;
        switch (name) {
           case 'Fireball': this.fire.startFireball() ; break;
           case 'FireNova': 
           case 'ExplodingBees': 
           case 'ButthurtJump': 
           case 'LightMyFire': 
           case 'Bomb': 
           case 'FireLady': 
           case 'FaceCanon': 
           case 'LetFireInYourEyes': 
           case 'PhoenixStrike': 
           case 'RainOfFire': 
           case 'BurnCitiesToTheGround': 
           case 'FireImp': 
           case 'DoesItBurns': 
               this.fire.startStandartFire() ; break;
           case 'IceCrown': this.water.startIceCrown() ; break;
           case 'Freeze': 
           case 'IceSlide': 
           case 'IceWall': 
           case 'IceSpear': 
           case 'IceCone': 
           case 'WashAndGo': 
           case 'Blizzard': 
           case 'IceShield': 
           case 'Icelock': 
           case 'FreshWaterFountain':
           case 'WaterBody': 
               this.water.startStandartWater() ; break; 
           case 'Push': 
           case 'Harmony': 
           case 'NoMoreAirForYou': 
           case 'HardLanding': 
           case 'QuardroLightning': 
           case 'Lightning': 
           case 'SkyFist':
           case 'LightingShield':
           case 'WindSword':
           case 'LootItAll':
           case 'Push2':
           case 'TeslaTrap':
           case 'ChainLighting':
               this.air.startStandartAir() ; break;
           case 'StoneFace':
           case 'GroundShake':
           case 'Quicksand':
           case 'StoneSpear':
           case 'TunnelTravel':
           case 'EarthProtection':
           case 'StalactitesFall':
           case 'Earthquake':
           case 'Astonishing':
           case 'WallUp':
           case 'MilestoneHit':
           case 'RollingStones':
               this.earth.startStandartEarth() ; break;
           case 'arcane':
               this.arcane.startStandartArcane() ; break;
           default:
               isSpellAnimated = false;
               info('No start animation for "' + name + '"');
        }
        if (isSpellAnimated) {
            this.spellAnimationRunning = true;
            this.currentSpellName = name;
            $('.battle-border .mage path.hand').hide();
            $('.battle-border .mage path.active-hand').show();
        }
    };
    this.iterate = function(name) {
        switch (name) {
            case 'Fireball': this.fire.iterateFireball() ; break;
            case 'FireNova':
            case 'ExplodingBees':
            case 'ButthurtJump':
            case 'LightMyFire':
            case 'Bomb':
            case 'FireLady':
            case 'FaceCanon':
            case 'LetFireInYourEyes':
            case 'PhoenixStrike':
            case 'RainOfFire':
            case 'BurnCitiesToTheGround':
            case 'FireImp':
            case 'DoesItBurns':
                this.fire.iterateStandartFire() ; break;
            case 'IceCrown': this.water.iterateIceCrown(); break;
            case 'IceSlide':
            case 'Freeze':
            case 'IceWall':
            case 'IceSpear':
            case 'IceCone':
            case 'WashAndGo':
            case 'Blizzard':
            case 'IceShield':
            case 'Icelock': 
            case 'FreshWaterFountain': 
            case 'WaterBody':
                this.water.iterateStandertWater() ; break;
            case 'Push':
            case 'Harmony':  
            case 'NoMoreAirForYou':  
            case 'HardLanding':  
            case 'QuardroLightning':  
            case 'Lightning':  
            case 'SkyFist':
            case 'LightingShield':
            case 'WindSword':
            case 'LootItAll':
            case 'Push2':
            case 'TeslaTrap':
            case 'ChainLighting':
                this.air.iterateStandartAir() ; break;
            case 'StoneFace':
            case 'GroundShake':
            case 'Quicksand':
            case 'StoneSpear':
            case 'TunnelTravel':
            case 'EarthProtection':
            case 'StalactitesFall':
            case 'Earthquake':
            case 'Astonishing':
            case 'WallUp':
            case 'MilestoneHit':
            case 'RollingStones':
                this.earth.iterateStandartEarth() ; break;
            case 'arcane':
                this.arcane.iterateStandartArcane() ; break;
            default:
                info('No iteration animation for "' + name + '"');
        }
    };
    this.continue = function(name, data) {
        if (!data) {
            data = this.currentSpellData;
        }
        switch (name) {
            case 'Fireball': this.fire.finishFireball(data); break;
            case 'FireNova': this.fire.finishFireNova(data); break;
            case 'ExplodingBees': this.fire.finishExplodingBees(data); break;
            case 'ButthurtJump': this.fire.finishButthurtJump(data); break;
            case 'LightMyFire': this.fire.finishLightMyFire(data); break;
            case 'Bomb': this.fire.finishBomb(data); break;
            case 'FireLady': this.fire.finishExplodingBees(data); break;
            case 'FaceCanon': this.fire.finishFaceCanon(data); break;
            case 'LetFireInYourEyes': this.fire.finishLetFireInYourEyes(data); break;
            case 'PhoenixStrike': this.fire.finishPhoenixStrike(data); break;
            case 'RainOfFire': this.fire.finishRainOfFire(data); break;
            case 'BurnCitiesToTheGround': this.fire.finishBurnCitiesToTheGround(data); break;
            case 'FireImp': this.fire.finishFireImp(data); break;
            case 'DoesItBurns': this.fire.finishDoesItBurns(data); break;
            
            case 'IceCrown': this.water.finishIceCrown(data); break;
            case 'IceSlide': this.water.finishIceSlide(data); break;
            case 'Freeze': this.water.finishFreeze(data); break;
            case 'IceWall': this.water.finishIceWall(data); break;
            case 'IceSpear': this.water.finishIceSpear(data); break;
            case 'IceCone': this.water.finishIceCone(data); break;
            case 'WashAndGo': this.water.finishWashAndGo(data); break;
            case 'Blizzard': this.water.finishBlizzard(data); break;
            case 'IceShield': this.water.finishIceShield(data); break;
            case 'Icelock': this.water.finishIcelock(data); break;
            case 'FreshWaterFountain': this.water.finishFreshWaterFountain(data); break;
            case 'WaterBody': this.water.finishWaterBody(data); break;
            
            case 'Push': this.air.finishPush(data); break;
            case 'Harmony':  this.air.finishHarmony(data); break;
            case 'NoMoreAirForYou':  this.air.finishNoMoreAirForYou(data); break;
            case 'HardLanding':  this.air.finishHardLanding(data); break;
            case 'QuardroLightning':  this.air.finishQuardroLightning(data); break;
            case 'Lightning':  this.air.finishLightning(data); break;
            case 'SkyFist':  this.air.finishSkyFist(data); break;
            case 'LightingShield':  this.air.finishLightingShield(data); break;
            case 'WindSword':  this.air.finishWindSword(data); break;
            case 'LootItAll':  this.air.finishLootItAll(data); break;
            case 'Push2':  this.air.finishPush2(data); break;
            case 'TeslaTrap':  this.air.finishTeslaTrap(data); break;
            case 'ChainLighting':  this.air.finishChainLighting(data); break;
            
            case 'StoneFace':  this.earth.finishStoneFace(data); break;
            case 'GroundShake':  this.earth.finishGroundShake(data); break;
            case 'Quicksand':  this.earth.finishQuicksand(data); break;
            case 'StoneSpear':  this.earth.finishStoneSpear(data); break;
            case 'TunnelTravel':  this.earth.finishTunnelTravel(data); break;
            case 'EarthProtection':  this.earth.finishEarthProtection(data); break;
            case 'StalactitesFall':  this.earth.finishStalactitesFall(data); break;
            case 'Earthquake':  this.earth.finishEarthquake(data); break;
            case 'Astonishing':  this.earth.finishAstonishing(data); break;
            case 'WallUp':  this.earth.finishWallUp(data); break;
            case 'MilestoneHit':  this.earth.finishMilestoneHit(data); break;
            case 'RollingStones':  this.earth.finishRollingStones(data); break;
            
            case 'arcane':  this.arcane.finisharcane(data); break;
            default:
                info('No last animation for "' + name + '"');
                MageS.Game.animations.singleAnimationFinished(this.isSecondPartWaiting);
        }
    };
    this.tryToEndFirstPart = function() {
        if (this.isSecondPartWaiting)  {
            this.continue(this.currentSpellName);
        } else if (this.stopAnimation) {
            this.clearAnimationField();
        } else {
            this.iterate(this.currentSpellName);
        }
    };
    this.endSpellAnimation = function () {
        var stage = this.isSecondPartWaiting;
        this.clearAnimationField();
        MageS.Game.animations.singleAnimationFinished(stage);
    };
    this.clearAnimationField = function() {
        $('.battle-border .mage path.hand').show();
        $('.battle-border .mage path.active-hand').hide();
        $('.animation-field').html('');
        this.savedData = [];
        this.currentSpellName = '';
        this.isSecondPartWaiting = false;
        this.stopAnimation = false;
        this.currentSpellData = {};
        this.spellAnimationRunning = false;
    };

    this.createIcon = function(icon, color, rotate) {
        var iconEl = $(this.game.svg).find('#' + icon + ' path');
        var svg = $('<div class="svg animation"><svg class="svg-icon" viewBox="0 0 512 512"></svg></div>');
        svg.find('svg').append(iconEl.clone());
        if (color) {
            svg.addClass(color);
        }
        if (rotate) {
            svg.find('svg').rotate(rotate + 'deg');
        }
        return svg;
    };

    this.angle_trunc = function(a) {
        while (a < 0.0) {
            a += Math.PI * 2
        }
        return a
    };
    this.getDistanceBetweenTwoDots = function(x1, y1, x2, y2) {
        var deltaY = y2 - y1;
        var deltaX = x2 - x1;
        var rad = this.angle_trunc(Math.atan2(deltaY, deltaX));
        //var rad = Math.atan2(data.targetY, data.targetX); // In radians
        //Then you can convert it to degrees as easy as:
        var deg = rad * (180 / Math.PI);
        var distance = Math.sqrt(Math.pow(deltaX, 2) + Math.pow(deltaY, 2));
        return [distance, deg];
    };
    this.transformDegAndDistanceToMargin = function(deg, distance) {
        var leftSign = 1;
        var topSign = 1;
        if (deg > 360) {
            deg -= 360;
            return this.transformDegAndDistanceToMargin(deg, distance);
        }
        else if (deg < 0) {
            deg += 360;
            return this.transformDegAndDistanceToMargin(deg, distance);
        }
        if (deg > 0 && deg <= 90) {
            // topSign = -1;
        }
        else if (deg > 90 && deg <= 180) {
            deg = 180 - deg;
            leftSign = -1;
        }
        else if (deg > 180 && deg <= 270) {
            deg = deg - 180;
            topSign = -1;
            leftSign = -1;
        }else  if (deg > 270 && deg <= 360) {
            deg = 360 - deg;
            topSign = -1;
        }
        var top = distance * Math.sin(Math.radians(deg)) * topSign;
        var left = distance * Math.sin(Math.radians(90 - deg)) * leftSign;
        return [left, top];
    };

    this.beam = function (x1,y1,x2,y2, color, lineType, options) {
        if (!options) {
            options = {};
        }
        var calculations = MageS.Game.spells.getDistanceBetweenTwoDots(x1, y1, x2, y2);

        if (options.moveTop === undefined) {
            options.moveTop = ((y1 + 0.5) * MageS.Game.cellSize) + 'rem';
        }
        if (options.moveLeft === undefined) {
            options.moveLeft = ((x1 + 0.5) * MageS.Game.cellSize) + 'rem';
        }
        if (!lineType) {
            lineType = 'icon-bullet-line';
        }
        return MageS.Game.spells.beamStrike(calculations[0], calculations[1], lineType, color, options);
    };

    this.beamStrike = function(length, deg, svgline, color, options) {
        if (!options) { options = {}; }
        deg -= 45;
        var beam = this.createIcon(svgline).addClass('beam');
        var transform = ' rotate(' + deg +'deg)';
        beam[0].style.transform = transform;
        var icon = beam.find('.svg-icon');
        var moveTop = '';
        if (options.moveTop !== undefined) {
            moveTop = options.moveTop;
        } else {
            moveTop = this.game.cellSize / 2 + 'rem';
        }
        var moveLeft = '';
        if (options.moveLeft !== undefined) {
            moveLeft = options.moveLeft;
        } else {
            moveLeft = this.game.cellSize / 2 + 'rem';
        }
        beam.css({'width':'1px','height':'1px', 'margin-left': moveLeft, 'margin-top': moveTop});
        var side = length / Math.sqrt(2);
        beam.find('svg').css({'width':side * this.game.cellSize + 'rem', 'height':side * this.game.cellSize + 'rem'});
        icon.css({'position':'absolute'});

        $('.animation-field').append(beam);

        var path = beam.find('path');
        var baseBeamWidth = 10;
        if (options.beamWidth !== undefined) { baseBeamWidth = options.beamWidth; }
        var strokeWidth = (baseBeamWidth - length) / 10;
        path.css({'fill': 'none', 'stroke': color, 'stroke-width': strokeWidth + 'rem', 'stroke-opacity': 1});
        var pathEl = path[0];
        var segment = new Segment(pathEl);
        var time = 0.8;
        if (options.time !== undefined) { time = options.time}
        var segment1Start = "0";
        var segment1End = "0";
        var segment2Start = "100%";
        var segment2End = "150%";
        var isSegment3 = false;
        var time2 = 0;
        if (options.segment1 !== undefined) { segment1Start = options.segment1[0]; segment1End = options.segment1[1]; }
        if (options.segment2 !== undefined) { segment2Start = options.segment2[0]; segment2End = options.segment2[1]; }
        if (options.segment3 !== undefined) { isSegment3 = true; var segment3Start = options.segment3[0]; var segment3End = options.segment3[1]; time2 = options.time2 }
        if (options.yesIWantToHaveBlinkBug === undefined) {
            segment.draw(segment1Start, segment1End, 0);
        }
        var delay = 0;
        var delay2 = 0;
        if (options.delay !== undefined) { delay = options.delay; }
        if (options.delay2 !== undefined) { delay2 = options.delay2; }
        setTimeout(function() {
            if (options.yesIWantToHaveBlinkBug !== undefined) {
                segment.draw(segment1Start, segment1End, 0);
            }
            segment.draw(segment2Start, segment2End, time);
        }, delay);
        if (isSegment3) {
            setTimeout(function () {
                segment.draw(segment3Start, segment3End, time2);
            }, delay + (time * 1000) + delay2);
        }
        if (options.delete !== undefined) {
            setTimeout(function() {
                beam.remove();
            }, delay + (time * 1000) + (time2 * 1000) + delay2)
        }
        return beam;
    };

    this.spinIcon = function(icon, color, range, options) {
        var delay = 0;
        if (options.delay !== undefined) { delay = options.delay; }
        var spinIcon = MageS.Game.spells.createIcon(icon, color).addClass('spinIcon');
        setTimeout(function(){
            $('.animation-field').append(spinIcon);

            var halfCell = 0.5 * MageS.Game.cellSize * MageS.Game.rem;
            spinIcon.css({width:'1px', height:'1px', opacity:0,
                'margin-left': halfCell,
                'margin-top': halfCell,
            });
            var svg = spinIcon.find('svg');
            if (options.rangeRandom !== undefined) { range += (Math.random() * options.rangeRandom) - (options.rangeRandom / 2) }
            svg.css({
                'margin-left' : range * MageS.Game.cellSize * MageS.Game.rem,
                'margin-top': -halfCell
            });
            if (options.scale !== undefined) {
                svg[0].style.transform = 'scale(' + options.scale + ')';
            }
            var time = 500;
            if (options.time !== undefined) {
                time = options.time;
            }
            var angleStart = 0;
            if (options.angleStart !== undefined) {
                angleStart = options.angleStart;
            } else {
                angleStart = Math.random() * 360;
            }
            var rotateDistance = 360;
            if (options.rotateDistance !== undefined) { rotateDistance = options.rotateDistance; }
            var angleEnd = angleStart + rotateDistance;
            var preAnimationDelay = 0;
            if (options.preAnimationDelay !== undefined) { preAnimationDelay = options.preAnimationDelay; }
            spinIcon[0].style.transform = 'rotate(' + angleStart +'deg)';
            setTimeout(function(){
                spinIcon.animateRotate(angleStart, angleEnd, time, 'linear');
            }, preAnimationDelay);
            spinIcon.animate({opacity:1}, {duration:100, queue:false});
            if (options.rangeMove !== undefined) {
                var rangeMove = (Math.random() * options.rangeMove * 2) - options.rangeMove;
                svg.animate({'margin-left' : (range + rangeMove) * MageS.Game.cellSize * MageS.Game.rem}, {duration:time})
            }
            if (options.delete !== undefined) {
                setTimeout(function () {
                    spinIcon.animate({opacity: 0}, {duration: 100, queue: false, complete: function() {
                        $(this).remove();
                    }});
                }, time - 100);
            }
        }, delay);
        return spinIcon;
    };

    this.moveIcon = function(icon, color, fromX, fromY, toX, toY, options) {
        var delay = 0;
        if (options.delay === undefined) {
            var delayRange = 400;
            if (options.delayRange !== undefined) { delayRange = options.delayRange; }
            delay = Math.random() * delayRange;
        } else {
            delay = options.delay;
        }
        setTimeout(function(){
            var flake = MageS.Game.spells.createIcon(icon, color);
            $('.animation-field').append(flake);
            var coordMultiplaer = MageS.Game.cellSize * MageS.Game.rem;
            var randomRange = 0;
            if (options.randomRange !== undefined) {
                randomRange = options.randomRange;
            }
            var startRandomRange = 0;
            if (options.startRandomRange !== undefined) {
                startRandomRange = options.startRandomRange;
            }
            fromX = (fromX * coordMultiplaer) + (Math.random() * startRandomRange) - (startRandomRange / 2);
            fromY = (fromY * coordMultiplaer) + (Math.random() * startRandomRange) - (startRandomRange / 2);
            flake.css({opacity:0,'margin-left':fromX, 'margin-top':fromY}); //'height': 0.25 * coordMultiplaer
            var transform = '';
            if (options.scale !== undefined) {
                transform += ' scale(' + options.scale + ', ' + options.scale + ')';
            }
            if (options.startRotate !== undefined) {
                transform += ' rotate(' + options.startRotate + 'deg)';
            }
            if (transform) {
                flake[0].style.transform = transform;
            }
            var svg = flake.find('svg');
            flake.animate({opacity:1},{duration:50});
            toX = (toX * coordMultiplaer) + (Math.random() * randomRange) - (randomRange / 2);
            toY = (toY * coordMultiplaer) + (Math.random() * randomRange) - (randomRange / 2);
            var easing = 'swing';
            if (options.easing !== undefined) { easing = options.easing; }
            flake.animate({'margin-left':toX, 'margin-top':toY}, {queue:false, duration:options.time, easing:easing });
            if (options.rotate !== undefined) {
                svg.animateRotate(0, 720, options.time);
            }
            var deleteDelay = 0;
            if (options.deleteDelay !== undefined) {
                deleteDelay = options.deleteDelay;
            }
            setTimeout(function(){
                flake.fadeOut(50, function() {
                    $(this).remove();
                });
            }, options.time - 50 + deleteDelay);
        }, delay);
    };

    this.particleExplosion = function(x, y, color, options) {
        if (options.time === undefined) {
            options.time = 300;
        }
        var options2 = {
            time:options.time
        };
        var toX = 0;
        var toY = 0;
        var count = 20;
        if (options.count !== undefined) {
            count = options.count;
        }
        var delay = 0;
        if (options.delay !== undefined) {
            delay = options.delay;
        }
        var randomDelay = 400;
        if (options.randomDelay !== undefined) {
            randomDelay = options.randomDelay;
        }
        for(var i = 0; i < count; i ++) {
            toX = x + (Math.random() * 2) - 1;
            toY = y + (Math.random() * 2) - 1;
            options2.delay = delay + (Math.random() * randomDelay);
            options2.scale = 0.1;
            MageS.Game.spells.moveIcon('icon-cercle', color, x, y, toX, toY, options2);
        }
    };
    
    this.addScreen = function(options) {
        var delay = 0;
        if (options.delay !== undefined) {
            delay = options.delay;
        }
        setTimeout(function () {
            var duration = 100;
            if (options.duration !== undefined) {
                duration = options.duration;
            }
            var shadow = $('.animation-shadow');
            if (options.color !== undefined) {
                shadow.css({'background-color': options.color});
            }
            var opacity = 0.8;
            if (options.opacity !== undefined) {
                opacity = options.opacity;
            }
            shadow.show().animate({'opacity': opacity}, {'duration': duration, complete:function(){
                if (options.delete !== undefined) {
                    var deleteDelay = 0;
                    if (options.deleteDelay !== undefined) {
                        deleteDelay = options.deleteDelay;
                    }
                    var deleteDuration = 100;
                    if (options.deleteDuration !== undefined) {
                        deleteDuration = options.deleteDuration;
                    }
                    setTimeout(function () {
                    shadow.animate({opacity:0}, {duration: deleteDuration, complete: function() {
                        $(this).hide();
                    }})
                    }, deleteDelay);
                }
            }});
        }, delay);
    };
    
    this.cellShake = function(cells, options) {
        var x = 0;
        var y = 0;
        var amplitude = 5;
        if (options.amplitude !== undefined) {
            amplitude = options.amplitude; 
        }
        var duration = 200;
        if (options.duration !== undefined) {
            duration = options.duration; 
        }
        var delay = 0;
        if (options.delay !== undefined) {
            delay = options.delay; 
        }
        for (var i in cells) {
            x = cells[i][0];
            y = cells[i][1];
            var cellObj = $('.battle-border .cell.x-' + x + '.y-' + y);
            MageS.Game.monimations.camShake('Y', duration, amplitude, {el:cellObj, delay:delay});
        }
    };

    this.getRightHandCoordinates = function(distance) {
        var d = $('.battle-border .mage').data('d');
        var x = 0, y = 0;
        switch(d) {
            case 0:
                x = distance; break;
            case 1:
                y = distance; break;
            case 2:
                x = -distance; break;
            case 3:
                y = -distance; break;
        }
        return [x, y];
    }

    this.getLeftHandCoordinates = function(distance) {
        var d = $('.battle-border .mage').data('d');
        var x = 0, y = 0;
        switch(d) {
            case 0:
                x = -distance; break;
            case 1:
                y = -distance; break;
            case 2:
                x = distance; break;
            case 3:
                y = distance; break;
        }
        return [x, y];
    }

    this.getMiddleCoordinats = function(x1,y1,x2,y2) {
        return [(x1 + x2) / 2, (y1 + y2) / 2];
    }
};

 
 /**
 * Created by Ilya Rubinchik (ilfate) on 06/11/15.
 */




MageS.Spells.Fire = function (game, spells) {
    this.game = game;
    this.spells = spells;

    this.startStandartFire = function()
    {
        // info('Standart Fire start');
        // for (var i = 0; i < 4; i++)
        // {
        //     var svg = this.spells.createIcon('icon-flame', 'color-red');
        //     var radius = this.game.cellSize / 2;
        //     switch (i) {
        //         case 0: svg.css('margin-top', '-' + radius + 'rem'); break;
        //         case 1: svg.css('margin-left', radius + 'rem'); break;
        //         case 2: svg.css('margin-top', radius + 'rem'); break;
        //         case 3: svg.css('margin-left', '-' + radius + 'rem'); break;
        //     }
        //     $('.animation-field').append(svg);
        //     var path = svg.find('path')
        //     path.css({'fill': 'none', 'stroke': '#F07818', 'stroke-width': '1.5rem', 'stroke-opacity': 1});
        //     var pathEl = path[0];
        //     var segment = new Segment(pathEl);
        //
        //     segment.draw("0", "0", 0);
        //     segment.draw("0", "100%", 0.5);
        //     this.spells.savedData[i] = svg;
        // }
        // setTimeout(function(){
        //     MageS.Game.spells.fire.iterateStandartFire();
        // }, 500);
        var icon = 'icon-bullet-cast-2-spirals';
        var icon2 = 'icon-bullet-cast-2-spirals-2';
        // var icon = 'icon-bullet-cast-angle-2';
        var rightHand = this.spells.getRightHandCoordinates(0.7);
        var leftHand = this.spells.getLeftHandCoordinates(0.7);
        var time = 0.5;
        for(var i2 = 0 ; i2 < 1; i2++) {
            var options = {
                'time':time,
                'time2':time,
                'delay2':0,
                'beamWidth': 12,
                'segment1': ["0%", "0%"],
                'segment2': ["25%", "75%"],
                'segment3': ["100%", "200%"],
                'delete': true,
            };
            this.spells.beam(
                rightHand[0], rightHand[1], leftHand[0], leftHand[1],
                MageS.Game.color.red, icon, options
            );
            this.spells.beam(
                rightHand[0], rightHand[1], leftHand[0], leftHand[1],
                MageS.Game.color.red, icon2, options
            );
            var options2 = {
                'time':time,
                'time2':time,
                'delay2':0,
                'beamWidth': 12,
                'segment1': ["0%", "0%"],
                'segment2': ["0%", "100%"],
                'segment3': ["100%", "200%"],
                'delete': true,
            };
            this.spells.beam(
                leftHand[0], leftHand[1], rightHand[0], rightHand[1],
                MageS.Game.color.red, icon, options2
            );
            this.spells.beam(
                leftHand[0], leftHand[1], rightHand[0], rightHand[1],
                MageS.Game.color.red, icon2, options2
            );
        }
        // info(rightHand[0] + ' '  +rightHand[1] + ' ' + leftHand[0] + ' ' + leftHand[1]);


        setTimeout(function(){
            MageS.Game.spells.fire.iterateStandartFire();
        }, 600);
        //this.game.monimations.blastInScale(svg.find('svg.svg-icon'), 1.5, function() {
        //    MageS.Game.spells.fire.iterateStandartFire();
        //});

    };

    this.iterateStandartFire = function() {
        var icon = 'icon-bullet-cast-2-segments';

        // info('FIRE standart iterate');
        // for (var i = 0; i < 4; i++) {
        //     var svg = this.spells.savedData[i];
        //     if (i == 3) {
        //         this.game.monimations.rotate(svg, 0, 360, 300, false, false, function() {
        //             MageS.Game.spells.tryToEndFirstPart();
        //         })
        //     } else {
        //         this.game.monimations.rotate(svg, 0, 360, 300, false, false);
        //     }
        // }
        for (var n = 0; n < 3; n++) {
            var options = {
                'moveLeft': ((0.5) * MageS.Game.cellSize) + 'rem',
                'moveTop': ((0.5) * MageS.Game.cellSize) + 'rem',
                'time': 0.2,
                'time2': 0.2,
                'beamWidth': 12,
                'segment1': ["100%", "100%"],
                'segment2': ["15%", "85%"],
                'segment3': ["-50%", "0%"],
                'delete': true,
                delay: n * 200
            };
            for (var i = 0; i < 4; i++) {
                this.spells.beamStrike(2, (360 / 4 * i) + (n * 45), icon, MageS.Game.color.red, options);
            }
        }

        setTimeout(function(){
            MageS.Game.spells.tryToEndFirstPart();
        }, 800);
    };

    this.standartFireToMiddle = function(duration) {
        if (!duration) {
            duration = 300;
        }
        // for (var i = 0; i < 4; i++) {
        //     var svg = this.spells.savedData[i];
        //     this.game.monimations.rotate(svg, 0, 360, 300, false, false);
        //     svg.animate({'margin':0}, {'duration':duration, complete:function() {
        //         $(this).animate({opacity:0}, {'duration':100, complete:function() {
        //             $(this).remove();
        //         }});
        //     }
        //     });
        // }
    };

    this.finishFireNova = function(data) {
        this.standartFireToMiddle();
        this.blastSunRing('color-red-bright');
        setTimeout(function() {
            MageS.Game.spells.fire.blastSunRing('color-yellow');
        }, 100);
        setTimeout(function() {
            MageS.Game.spells.fire.blastSunRing('color-white');
        }, 200);
        setTimeout(function() {
            MageS.Game.spells.endSpellAnimation();
        }, 1400);
    };

    this.blastSunRing = function(color, options) {
        if (options === undefined) {
            options = {};
        }
        var svg = this.spells.createIcon('icon-sun-fire', color);
        $('.animation-field').append(svg);
        var scale = 6;
        if (options.scale !== undefined) {
            scale = options.scale;
        }
        this.game.monimations.blastInScale(svg.find('svg.svg-icon'), scale, null, 1200);
        if (options.marginTop !== undefined) { svg.css('margin-top', options.marginTop * MageS.Game.cellSize * MageS.Game.rem)}
        if (options.marginLeft !== undefined) { svg.css('margin-left', options.marginLeft * MageS.Game.cellSize * MageS.Game.rem)}
        setTimeout(function() {
            svg.animate({opacity:0}, {duration:400, complete: function() {
                $(this).remove();
            }});
        }, 800);
    };



    this.finishExplodingBees = function(data) {
        this.standartFireToMiddle();
        if (data.targetX === undefined) {
            MageS.Game.spells.endSpellAnimation();
            return;
        }
        var rad = Math.atan2(data.targetY, data.targetX); // In radians
        //Then you can convert it to degrees as easy as:
        var deg = rad * (180 / Math.PI);
        var distance = Math.sqrt(Math.pow(data.targetX, 2) + Math.pow(data.targetY, 2));

        MageS.Game.spells.beamStrike(distance, deg, 'icon-sinusoidal-line', '#F07818');
        setTimeout(function() {
            MageS.Game.spells.beamStrike(distance, deg, 'icon-bullet-around-side-line', '#F07818');
        }, 50);
        setTimeout(function() {
            MageS.Game.spells.beamStrike(distance, deg, 'icon-bullet-backward-line', '#F07818');
        }, 100);
        setTimeout(function() {
            MageS.Game.spells.beamStrike(distance, deg, 'icon-bullet-cercle-line', '#F07818');
        }, 200);
        setTimeout(function() {
            MageS.Game.spells.beamStrike(distance, deg, 'icon-bullet-around-line', '#F07818');
        }, 250);
        setTimeout(function() {
            $('.animation-field .beam').remove();
        }, 1200);
        //var beam = this.spells.createIcon('icon-sinusoidal-line', 'color-red');

        var blastIcon = this.spells.createIcon('icon-fireflake', 'color-red').addClass('blast').css({
            'margin-left': data.targetX * this.game.cellSize + 'rem',
            'margin-top': data.targetY * this.game.cellSize + 'rem'
        });
        var blastSvg = blastIcon.find('svg.svg-icon');
        blastSvg[0].style.transform = 'scale(0)';
        $('.animation-field').append(blastIcon);
        setTimeout(function() {
            MageS.Game.monimations.blastInScale(blastSvg, 1, function() {
                $('.animation-field .blast').animate({opacity:0}, {duration:300, complete:function() {
                    $(this).remove();
                    MageS.Game.spells.endSpellAnimation();
                }})
            }, 500);
        }, 500);
    };

    this.buttFire = function(rotate, mTop, mLeft) {
        var icon = this.spells.createIcon('icon-celebration-fire');
        var path = icon.find('path');
        path.attr('fill', '#ff3f03');
        $('.animation-field').append(icon);
        icon[0].style.transform = 'rotate(' + rotate + 'deg) translate('+ (mLeft * MageS.Game.cellSize * MageS.Game.rem) + 'px, ' + (mTop * MageS.Game.cellSize * MageS.Game.rem) + 'px)';
        path.animate({'svgFill':'#fff'}, {duration:600})
        MageS.Game.monimations.blastInScale(icon.find('svg.svg-icon'), 0.8, null, 250);
        setTimeout(function(){
            icon.animate({opacity:0}, {duration:200,complete:function(){
                $(this).remove();
            }})
        }, 250);
    };

    this.finishButthurtJump = function(data) {
        this.standartFireToMiddle(50);

        $('.battle-border .mage path.hand').show();
        $('.battle-border .mage path.active-hand').hide();

        var d = data.d;
        var rotate = 0;
        var mTop = -0.3;
        var mLeft = 0;
        switch (d) {
            case 0: rotate = 180;  break;
            case 1: rotate = -90; mTop = -0.4; mLeft = 0.1; break;
            case 2: mTop = -0.5; break;
            case 3: rotate = 90; mTop = -0.4; mLeft = -0.1; break;
        }
        MageS.Game.animations.singleAnimationFinished(MageS.Game.spells.isSecondPartWaiting);
        this.buttFire(rotate, mTop, mLeft);
        setTimeout(function(){ MageS.Game.spells.fire.buttFire(rotate, mTop, mLeft); }, 150);
        setTimeout(function(){ MageS.Game.spells.fire.buttFire(rotate, mTop, mLeft); }, 300);
        setTimeout(function(){ MageS.Game.spells.fire.buttFire(rotate, mTop, mLeft); }, 450);
        // setTimeout(function(){ MageS.Game.spells.fire.buttFire(rotate, mTop, mLeft); }, 600);
        setTimeout(function(){ 
            MageS.Game.spells.clearAnimationField();
        }, 900);
    };

    this.finishBomb = function(data) {
        this.standartFireToMiddle(800);
        MageS.Game.animations.singleAnimationFinished(MageS.Game.spells.isSecondPartWaiting);
        setTimeout(function(){
            MageS.Game.spells.clearAnimationField();
        }, 800);
    };
    this.finishLightMyFire = function(data) {
        this.standartFireToMiddle(800);

        var torch = this.spells.createIcon('icon-torch', 'color-red');
        $('.animation-field').append(torch);
        torch.animate({'margin-left': data.targetX * MageS.Game.cellSize * MageS.Game.rem},
            {duration:600, easing:'easeInBack', queue:false});
        torch.animate({'margin-top': data.targetY * MageS.Game.cellSize * MageS.Game.rem},
            {duration:600, easing:'easeInOutCirc', queue:false});

        setTimeout(function(){
            MageS.Game.spells.endSpellAnimation();
        }, 800);
    };

    this.finishFaceCanon = function(data) {
        this.standartFireToMiddle();

        var shakeDirection = 'X';
        if (data.d == 0 || data.d == 2) {
            shakeDirection = 'Y';
        }
        var slash = this.spells.createIcon('icon-quick-slash');

        $('.animation-field').append(slash);
        var deg = 0;
        var mLeft = 0;
        var mTop = 0;
        var rTop = 0;
        var rLeft = 0;
        var rTopFinal = 0;
        var rLeftFinal = 0;
        switch (data.d) {
            case 0: deg = -90; mTop = -1.5; rLeft = 3; break;
            case 1: mLeft = 1.5; rTop = 3; break;
            case 2: deg = 90; mTop = 1.5; rLeft = 3; break;
            case 3: deg = 180; mLeft = -1.5; rTop = 3; break;
        }
        slash.animate({'margin-left': (this.game.cellSize * mLeft) + 'rem',
            'margin-top': (this.game.cellSize * mTop) + 'rem'}, {duration: 1200});
        slash[0].style.transform='rotate(' + deg + 'deg)';
        this.game.monimations.blastInScale(slash.find('svg.svg-icon'), 6, null, 1200);
        slash.find('path').attr('fill', '#ff3f03').animate(
            {opacity:0, 'svgFill': '#fff'},
            {duration:1050, easing: 'easeInExpo'}
        );

        var svgContEl = $('<div class="animation animation-centred-block"></div>');
        for (var i = 0; i <= 5; i++ ) {
            var svgEl = $('<div class="circle n-' + i + '" data-n="' + i + '"></div>').width('0').height('0').css({'position':'absolute'});
            svgEl.svg({
                onLoad: function (svg) {
                    svg.circle(0, 0, 0.1 * MageS.Game.rem,
                        {fill: '#ff3f03', stroke: 'none'});
                }
            });
            if (rTop) { rTopFinal = rTop - (i * rTop / 2.5); }
            if (rLeft) { rLeftFinal = rLeft - (i * rLeft / 2.5); }
            svgEl.find('svg circle').delay(550).animate({
                'svgCx':(mLeft * 5 + rLeftFinal) * MageS.Game.cellSize * MageS.Game.rem,
                'svgCy':(mTop * 5 + rTopFinal) * MageS.Game.cellSize * MageS.Game.rem,
            }, {duration:400});
            svgContEl.append(svgEl);
        }
        $('.animation-field').append(svgContEl);

        MageS.Game.monimations.camShake(shakeDirection, 500, 6, {delay:800});

        setTimeout(function() {
                    MageS.Game.spells.endSpellAnimation();
        }, 1200);
    };

    this.finishLetFireInYourEyes = function(data) {
        this.standartFireToMiddle(100);
        var castTime = 900;
        var calculations = this.spells.getDistanceBetweenTwoDots(0, 0, data.targetX, data.targetY);

        for (var n = 0; n < 2; n++) {

            var eye = this.spells.createIcon('icon-eyeball', 'color-white');
            var eye2 = this.spells.createIcon('icon-eyeball2', 'color-red');
            var eyeMoveDeg = calculations[1] + 90 + (n * (-180) );

            var diagonal =  MageS.Game.cellSize * MageS.Game.rem;
            var marginCalc = this.spells.transformDegAndDistanceToMargin(eyeMoveDeg, diagonal);
            eye.animate({'margin-left': marginCalc[0], 'margin-top': marginCalc[1]}, {duration:300});
            eye2.animate({'margin-left': marginCalc[0], 'margin-top': marginCalc[1]}, {duration:300});
            eye.find('svg').css({'width':'0.1rem', 'height':'0.1rem'}).animate({
                'width':'1.6rem', 'height':'1.6rem'
            }, {duration:600});
            eye2.find('svg').css({'width':'0.1rem', 'height':'0.1rem'}).animate({
                'width':'1.6rem', 'height':'1.6rem'
            }, {duration:600});
            $('.animation-field').append(eye).append(eye2);
            // MageS.Game.spells.beamStrike(calculations[0], calculations[1], 'icon-bullet-line', '#F07818');
            var cellSize = MageS.Game.cellSize * MageS.Game.rem;
            var eyeCalculations = MageS.Game.spells.getDistanceBetweenTwoDots(marginCalc[0] / cellSize, marginCalc[1] / cellSize, data.targetX, data.targetY);

            var options = {'segment2': ['0', '100%'], 'time':0.05, 'delay':castTime, 'moveLeft' : (marginCalc[0] + (cellSize / 2)), 'moveTop' : (marginCalc[1] + (cellSize / 2))};
            MageS.Game.spells.beamStrike(eyeCalculations[0], eyeCalculations[1],'icon-bullet-line',  '#F07818', options);

            var ang = eyeCalculations[1] - 30;
            var angStart = ang - (180 + (Math.random() * 90));
            if (n === 1) {
                angStart = ang + (180 + (Math.random() * 90));
            }
            eye.find('svg').animateRotate(angStart, ang, castTime, 'easeInOutBack');
            eye2.find('svg').animateRotate(angStart, ang, castTime, 'easeInOutBack');
        }
        var shakeDirection = 'X';
        if (calculations[1] >= 45 && calculations[1] < 135 || calculations[1] >= 225 && calculations[1] < 315) {
            shakeDirection = 'Y';
        }
        MageS.Game.monimations.camShake(shakeDirection, 400, 3, {delay:castTime});

        setTimeout(function(){
            MageS.Game.spells.endSpellAnimation();
        }, 1400);
    };
    
    this.doPhoenixStep = function(phoenix, data, step, d) {
        var currentPoint = data[step].point;
        var targets = [];
        if (data[step].targets !== undefined) {
            targets = data[step].targets;
            for( var targetNum in targets) {
                var calculations = this.spells.getDistanceBetweenTwoDots(currentPoint[0], currentPoint[1], targets[targetNum][0], targets[targetNum][1]);
                var options = {
                    'moveTop': ((currentPoint[1] + 0.5) * MageS.Game.cellSize) + 'rem',
                    'moveLeft': ((currentPoint[0] + 0.5) * MageS.Game.cellSize) + 'rem',
                    'time' : 1,
                    'delay': 500,
                    'beamWidth': 15,
                };
                var bulletType = 'icon-bullet-simple-middle-line';
                if (Math.random() > 0.5) { bulletType = 'icon-sinusoidal-line'; }
                    MageS.Game.spells.beamStrike(calculations[0], calculations[1], bulletType, '#F07818', options);
            }
        }

        phoenix.animate({
            'margin-left': (currentPoint[0] * MageS.Game.cellSize) + 'rem',
            'margin-top': (currentPoint[1] * MageS.Game.cellSize) + 'rem',
        }, {
            duration: 500, easing:'linear', complete: function () {
                if (data[step + 1] !== undefined) {
                    MageS.Game.spells.fire.doPhoenixStep(phoenix, data, step + 1, d);
                } else {
                    var addX = 0;
                    var addY = 0;
                    switch (d) {
                        case 0: addY -= 5; break;
                        case 1: addX += 5; break;
                        case 2: addY += 5; break;
                        case 3: addX -= 5; break;
                    }
                    phoenix.animate({
                        'opacity':0,
                        'margin-left': ((currentPoint[0] + addX) * MageS.Game.cellSize) + 'rem',
                        'margin-top': ((currentPoint[1] + addY) * MageS.Game.cellSize) + 'rem',},
                        {duration:1000, complete: function() {
                            MageS.Game.spells.fire.clearPhoenix();
                        }});
                }
            }
        })
    };
    this.clearPhoenix = function () {
        MageS.Game.spells.endSpellAnimation();
    };
    this.finishPhoenixStrike = function(data) {
        this.standartFireToMiddle();

        var phoenix = this.spells.createIcon('icon-crow-dive', 'color-red').addClass('phoenix');
        $('.animation-field').append(phoenix);
        var angle = -45;
        switch (data.d) {
            case 0: angle -= 90; break;
            case 2: angle += 90; break;
            case 3: angle += 180; break;
        }
        phoenix[0].style.transform = 'rotate(' + angle + 'deg)';

        this.doPhoenixStep(phoenix, data.data, 0, data.d);
    };

    this.meteorFromSkyOnCell = function (x, y) {
        var fire = this.spells.createIcon('icon-plasma-bolt');//, 'color-red-bright'
        fire.find('path').attr('fill', '#ff3f03');
        fire.css({
            'margin-top' : (y * MageS.Game.cellSize) + 'rem',
            'margin-left' : (x * MageS.Game.cellSize) + 'rem',
        });
        $('.animation-field').append(fire);
        var svg = fire.find('svg.svg-icon');
        svg.css({
            'top' : '-4rem', 'left' : '-4rem',
            'position': 'absolute', 'opacity':0
        });
        setTimeout(function() {
            svg.animate({ 'top' : '0', 'left' : '0' }, { 'duration': 300, easing:'easeInBack' });
            setTimeout(function() {
                svg.animate({'opacity': 1}, {'duration': 210, queue: false});
            }, 50);
            setTimeout(function() {
                svg.find('path').animate({'svgFill':'#fff'});
                svg.animate({ whyNotToUseANonExistingProperty: 100, 'svgFill':'#fff' }, {
                    step: function(now,fx) {
                        $(this).css('-webkit-transform',"skew(" + (-now / 3) + "deg, " + (-now / 2) + "deg)");
                    },
                    duration:200, easing:'linear', queue:false, complete: function() {
                        $(this).remove();
                    }
                });
            }, 260);
        }, Math.random() * 300);
    };

    this.finishRainOfFire = function(data) {
        this.standartFireToMiddle();

        MageS.Game.monimations.camShake('Y', 1500, 3, {delay:100}, function() {
            MageS.Game.spells.endSpellAnimation();
        });

        for (var i in data.data) {
            this.meteorFromSkyOnCell(data.data[i][0], data.data[i][1]);
        }
        setTimeout(function () {
            for (var i in data.data) {
                MageS.Game.spells.fire.meteorFromSkyOnCell(data.data[i][0], data.data[i][1]);
            }
        }, 300);
        setTimeout(function () {
            for (var i in data.data) {
                MageS.Game.spells.fire.meteorFromSkyOnCell(data.data[i][0], data.data[i][1]);
            }
        }, 600);

    };

    this.finishBurnCitiesToTheGround = function(data) {
        this.standartFireToMiddle(50);
        var icon = 'icon-bullet-cast-2-segments';
        var colors = [
            MageS.Game.color.red,
            MageS.Game.color.white,
            MageS.Game.color.orange,
        ];
        for (var n = 0; n < 3; n++) {
            var options = {
                'moveLeft': ((0.5) * MageS.Game.cellSize) + 'rem',
                'moveTop': ((0.5) * MageS.Game.cellSize) + 'rem',
                'time': 0.3,
                'beamWidth': 12,
                'segment1': ["100%", "100%"],
                'segment2': ["0%", "100%"],
                delay: n * 400
            };
            for (var i = 0; i < 4; i++) {
                this.spells.beamStrike(2, (360 / 4 * i), icon, colors[n], options);
            }
        }


        // var rightHand = this.spells.getRightHandCoordinates(0.7);
        // var leftHand = this.spells.getLeftHandCoordinates(0.7);
        // var hands = [rightHand, leftHand];
        var icons = [
            'icon-bullet-line',
            'icon-bullet-line-small-curve-right',
            'icon-bullet-line-small-curve-left',
        ];

        MageS.Game.monimations.camShake('Y', 500, 3, {delay:50});
        MageS.Game.monimations.camShake('X', 500, 3, {delay:550});
        MageS.Game.monimations.camShake('Y', 500, 3, {delay:1050});

        for (var i2 = 0; i2 < 60; i2++) {
            // var target = array_rand(hands);
            var options2 = {
                'moveLeft': ((0.5 ) * MageS.Game.cellSize) + 'rem',
                'moveTop': ((0.5 ) * MageS.Game.cellSize) + 'rem',
                'time': 0.3,
                'beamWidth': 12,
                'segment1': ["8%", "8%"],
                'segment2': ["100%", "140%"],
                'delete': true,
                delay: i2 * 20
            };
            var icon2 = array_rand(icons);
            this.spells.beamStrike(7, 360 / 60 * i2, icon2, MageS.Game.color.red, options2);
        }

        setTimeout(function() {
            MageS.Game.spells.endSpellAnimation();
        }, 1500);

    };

    this.finishFireImp = function(data) {
        this.standartFireToMiddle(50);

        // MageS.Game.monimations.camShake('Y', 1500, 3, 100, function() {
        //     MageS.Game.spells.endSpellAnimation();
        // });
        var options = {
            'moveLeft': ((data.targetX + 0.5) * MageS.Game.cellSize) + 'rem',
            'moveTop': ((data.targetY + 0.5) * MageS.Game.cellSize) + 'rem',
            'time': 1.3,
            'beamWidth': 12,
            'segment1': ["100%", "100%"],
            'segment2': ["-8%", "0"],
        };
        for(var i = 0 ; i < 9; i++) {
            //'icon-bullet-simple-middle-line'
            this.spells.beamStrike(8, 360 / 9 * i, 'icon-bullet-start-spin', '#F07818', options)
        }
        setTimeout(function() {
            MageS.Game.animations.singleAnimationFinished(MageS.Game.spells.isSecondPartWaiting);
        }, 1150);
        setTimeout(function() {
            MageS.Game.spells.clearAnimationField();
        }, 1500);

    };

    this.finishDoesItBurns = function(data) {

        var iconHalfCercle = 'icon-bullet-cast-middle-half-cercle';
        var iconCercle = 'icon-bullet-cast-middle-only-cercle';
        // MageS.Game.monimations.camShake('Y', 1500, 3, 100, function() {
        //     MageS.Game.spells.endSpellAnimation();
        // });
        var x = parseInt(data.targetX);
        var y = parseInt(data.targetY);
        var middle = this.spells.getMiddleCoordinats(0,0, x, y);
        var options = {
            'delay': 0,
            'scale': 0.5,
            time:500,
            rotate:true,
            'easing': 'easeOutCubic',
            deleteDelay:400
        };
        this.spells.moveIcon('icon-fireflake', 'color-red', 0, 0, middle[0], middle[1], options);
        for (var i = 0; i < 4; i ++) {
            var options = {
                'time': 0.5,
                'delay':100 * i,
                'segment1': ["0%", "0%"],
                'segment2': ["100%", "110%"],
                'delete': true,
            };
            this.spells.beam(
                0, 0, x, y,
                MageS.Game.color.white, iconCercle, options
            );
        }
        var time = 0.5;
        var options = {
            'time':time,
            'delay':500,
            'segment1': ["8%", "8%"],
            'segment2': ["100%", "200%"],
            'delete': true,
        };
        this.spells.beam(
            0, 0, x, y,
            MageS.Game.color.red, iconHalfCercle, options
        );
        var options2 = {
            'time':time,
            'delay':500,
            'segment1': ["92%", "92%"],
            'segment2': ["-100%", "0%"],
            'delete': true,
        };
        this.spells.beam(
            x, y, 0, 0,
            MageS.Game.color.red, iconHalfCercle, options2
        );
        var optionsE = {
            delay:700,
            randomDelay:300,
        };
        this.spells.particleExplosion(x, y, 'color-red', optionsE)
        setTimeout(function() {
            MageS.Game.spells.endSpellAnimation();
        }, 1200);

    };







    this.startFireball = function() {
        var svgContEl = $('<div class="animation animation-centred-block"></div>');
        for (var i = 0; i < 3; i++ ) {
            var svgEl = $('<div class="circle n-' + i + '" data-n="' + i + '"></div>').width('0').height('0').css({'position':'absolute'});
            svgEl.svg({
                onLoad: function (svg) {
                    svg.circle(0, 0, 0.25 * MageS.Game.rem,
                        {fill: 'none', stroke: '#F07818'});
                }
            });
            svgEl.find('svg circle').animate({ 'svgR':(0.75 + (i*0.25)) * this.game.rem}, {duration:250});
            svgContEl.append(svgEl);
        }
        for (var i = 0; i < 2; i++ ) {
            var svgEl = $('<div class="fire-dot n-' + i +'"></div>').width('0').height('0').css({'position':'absolute'});
            svgEl.svg({
                onLoad: function (svg) {
                    svg.circle(0, 0, 0.1 * MageS.Game.rem,
                        {fill: '#F07818', stroke: 'none'});
                }
            });
            svgEl.find('svg circle').animate({ 'svgCx':(1 + (i*0.25)) * this.game.rem},
                {duration:250});
            MageS.Game.monimations.rotate(svgEl, 0, 360, 250, i == 0, false);
            svgContEl.append(svgEl);
        }
        setTimeout(function() {
            MageS.Game.spells.fire.iterateFireball();
        }, 260);

        this.spells.savedData[0] = true;
        $('.animation-field').prepend(svgContEl);
    };

    this.iterateFireball = function() {
        var iterateTime = 400;
        var animEl = $('.animation-field .animation');

        MageS.Game.monimations.rotate(animEl.find('.fire-dot.n-0'), 0, 360, iterateTime, true, false, function() {
            MageS.Game.spells.tryToEndFirstPart();
        });
        MageS.Game.monimations.rotate(animEl.find('.fire-dot.n-1'), 0, 360, iterateTime, false, false);
        if (this.spells.savedData[0]) {var color = '#FFF';} else {var color = '#F07818';}
        this.spells.savedData[0] = ! this.spells.savedData[0];
        animEl.find('.fire-dot circle').animate({'svgStroke':color}, {duration: iterateTime});
    };

    this.finishFireball = function(data) {
        var iterateTime = 400;
        var animEl = $('.animation-field .animation');

        MageS.Game.monimations.rotate(animEl.find('.fire-dot.n-0'), 180 + Math.random() * 180, 180, 500, true, false);
        MageS.Game.monimations.rotate(animEl.find('.fire-dot.n-1'), 180 + Math.random() * 180, 180, 500, false, false);

        animEl.find('.fire-dot circle').animate({'svgCx':0}, {duration: 350, complete: function() {
            animEl.find('.fire-dot').remove();
            //}, easing: 'easeInOutBack'});
        }, easing: 'easeInBack'});

        var rad = Math.atan2(data.targetY, data.targetX); // In radians
        //Then you can convert it to degrees as easy as:
        var deg = rad * (180 / Math.PI);

        var easings = ['easeOutCubic', 'easeOutQuart','easeOutExpo'];
        var range = Math.round(Math.sqrt(Math.pow(data.targetX, 2) + Math.pow(data.targetY, 2)) * this.game.cellSize);
        for (var i = 0; i < 3; i++ ) {
            animEl.find('.circle.n-' + i + ' circle').animate({'svgR': (0.1 + i * 0.1) * this.game.rem }, {
                duration: 200, complete: function () {
                    var obj = $(this);
                    var n = obj.parents('.circle').data('n');
                    obj.css({'stroke': 'none', 'fill': '#F07818'});

                    obj.parent()[0].style.transform = 'rotate(' + deg + 'deg)';
                    obj.parent()[0].style['transform-origin'] = '0% 0%';
                    setTimeout( function() {
                        obj.animate({'svgCx': range * MageS.Game.rem}, {duration: 400, 'easing': easings[n]});
                    }, 100);
                    setTimeout( function() {
                        obj.animate({'svgTransform': 'skewX(' + 40 * n + ')', 'svgFill': '#fff'},
                            {duration:300, 'easing': easings[n], queue:false});
                    }, 420);
                }
            });
        }

        $('.animation-field .animation').animate({
            opacity: '0.9'
        }, {
            duration:1300,
            easing:'easeInExpo',
            complete: function() {
                MageS.Game.spells.endSpellAnimation();
            }
        })
    };

};

 
 /**
 * Created by Ilya Rubinchik (ilfate) on 06/11/15.
 */




MageS.Spells.Water = function (game, spells) {
    this.game = game;
    this.spells = spells;

    this.sparklingAnimation = function(animationEl) {
        var svgContEl = $('<div class="animation-centred-block"></div>');
        for (var i = 0; i < 6; i++ ) {
            var svgEl = $('<div></div>').width('0').height('0').css({'position':'absolute'});
            svgEl.svg({
                onLoad: function (svg) {
                    svg.circle(0, 0, 0.25 * MageS.Game.rem,
                        {fill: '#fff', stroke: 'none'});
                }
            });
            svgEl.find('svg circle').animate({'svgCx': 4 * this.game.rem, 'svgR':0.05 * this.game.rem},
                {duration:500});
            svgEl[0].style.transform = 'rotate(' + parseInt(360 / 6 * i) + 'deg)';
            svgContEl.append(svgEl);
        }
        animationEl.prepend(svgContEl);
        return svgContEl;
    };

    this.createCastingSphere = function(x, y, icon, color)
    {
        var castSphere = this.spells.createIcon(icon).addClass('casting-sphere');

        $('.animation-field').append(castSphere);

        var path = castSphere.find('path');
        castSphere.css({
            'margin-left': x * MageS.Game.cellSize * MageS.Game.rem,
            'margin-top': y * MageS.Game.cellSize * MageS.Game.rem,
        });
        path.css({'fill': 'none', 'stroke': color, 'stroke-width': '1rem', 'stroke-opacity': 1});
        var pathEl = path[0];
        var segment = new Segment(pathEl);
        segment.draw(0, 0, 0);
        segment.draw('100%', '110%', 1.5);
        return segment;
    }

    this.startStandartWater = function() {
        var d = $('.battle-border .mage').data('d');
        var x1 = 0, y1 = 0, x2 = 0, y2 = 0;
        var distance = 0.7;
        switch(d) {
            case 1:
            case 3:
                y1 = -distance;
                y2 = distance;
                break;
            case 0:
            case 2:
                x1 = -distance;
                x2 = distance;
                break;
        }
        this.spells.savedData[0] = this.createCastingSphere(x1, y1, 'icon-bullet-sphere-cast', '#37A4F9');
        this.spells.savedData[1] = this.createCastingSphere(x1, y1, 'icon-bullet-sphere-cast-2', '#fff');
        this.spells.savedData[2] = this.createCastingSphere(x1, y1, 'icon-bullet-sphere-cast-3', '#37A4F9');
        this.spells.savedData[3] = this.createCastingSphere(x2, y2, 'icon-bullet-sphere-cast', '#37A4F9');
        this.spells.savedData[4] = this.createCastingSphere(x2, y2, 'icon-bullet-sphere-cast-2', '#fff');
        this.spells.savedData[5] = this.createCastingSphere(x2, y2, 'icon-bullet-sphere-cast-3', '#37A4F9');
        setTimeout(function(){
            MageS.Game.spells.tryToEndFirstPart();
        }, 1500);
    };
    this.iterateStandertWater = function() {
        for (var n in this.spells.savedData) {
            var segment = this.spells.savedData[n];
            segment.draw(0, 0, 0);
            segment.draw('100%', '120%', 1.5);
        }
        setTimeout(function(){
            MageS.Game.spells.tryToEndFirstPart();
        }, 1500);
    };
    this.finishStandartWater = function() {
        $('.casting-sphere').remove();
    };

    this.finishIceSlide = function(data) {
        this.finishStandartWater();

        var targets = [
            [3, 3],
            [-3, -3],
            [-3, 3],
            [3, -3],
        ];
        var icon2 = 'icon-bullet-cercle-sinus-2';
        var icon3 = 'icon-bullet-cercle-sinus';
        var options3 = {
            'moveLeft': ((0.5) * MageS.Game.cellSize) + 'rem',
            'moveTop': ((0.5) * MageS.Game.cellSize) + 'rem',
            'time': 0.8,
            'beamWidth': 10,
            'segment1': ["0%", "0%"],
            'segment2': ["100%", "200%"],
        };
        for(var i = 0 ; i < 4; i++) {
            this.spells.beamStrike(2.7 - (i * 0.3), 360 / 4 * i, icon2, MageS.Game.color.darkBlue, options3);
            this.spells.beamStrike(2.9 - (i * 0.3), 360 / 4 * i, icon3, MageS.Game.color.darkBlue, options3);

            // this.spells.beam(0, 0, targets[i][0], targets[i][1], MageS.Game.color.darkBlue, icon2, options3);
            // this.spells.beam(0, 0, targets[i][0], targets[i][1], MageS.Game.color.darkBlue, icon3, options3);
        }
        var options4 = {
            'moveLeft': ((0.5) * MageS.Game.cellSize) + 'rem',
            'moveTop': ((0.5) * MageS.Game.cellSize) + 'rem',
            'time': 0.8,
            'beamWidth': 10,
            'segment1': ["100%", "100%"],
            'segment2': ["-100%", "0%"],
        };
        for(var i = 0 ; i < 4; i++) {
            this.spells.beamStrike(3 - (i * 0.5), 360 / 4 * i, icon2, MageS.Game.color.darkBlue, options4);
            this.spells.beamStrike(3.3 - (i * 0.5), 360 / 4 * i, icon3, MageS.Game.color.darkBlue, options4);

            // this.spells.beam(0, 0, targets[i][0], targets[i][1], MageS.Game.color.darkBlue, icon2, options3);
            // this.spells.beam(0, 0, targets[i][0], targets[i][1], MageS.Game.color.darkBlue, icon3, options3);
        }

        setTimeout(function () {
            MageS.Game.spells.endSpellAnimation();
        }, 800)
    };

    this.finishFreeze = function(data) {
        this.finishStandartWater();

        var options = {
            time:400,
            startRandomRange:MageS.Game.cellSize * MageS.Game.rem,
            randomRange:MageS.Game.cellSize * MageS.Game.rem,
            delayRange:300,
            scale: 0.25,
            rotate:true
        };
        var toX = data.targetX;
        var toY = data.targetY;
        var x = 0, y = 0;
        for (var i = 0; i < 20; i ++) {

            if (Math.random() > 0.5) {
                if (Math.random() > 0.5) { x = 5; } else { x = -5 }
                y = Math.round((Math.random() * 10) - 5);
            } else {
                if (Math.random() > 0.5) { y = 5; } else { y = -5 }
                x = Math.round((Math.random() * 10) - 5);
            }
            options.from = [x, y];
            this.spells.moveIcon('icon-snowflake-1', 'color-white', x, y, toX, toY, options);
        }

        setTimeout(function () {
            MageS.Game.spells.endSpellAnimation();
        }, 800)
    };

    

    this.finishIceWall = function(data) {
        this.finishStandartWater();
        var options = {
            time:500,
            startRandomRange:MageS.Game.cellSize * 1.5 * MageS.Game.rem, 
            randomRange:MageS.Game.cellSize * 1.5 * MageS.Game.rem, 
            scale: 0.25, rotate:true};
        var range = 3;
        if (data.patternId == 14) { range = 2; }
        switch (data.d) {
            case 0: var fromX = 4;      var fromY = -range; var toX = -3;     var toY = -range; break;
            case 1: var fromX = range;  var fromY = -4;     var toX = range;  var toY = 3; break;
            case 2: var fromX = 4;      var fromY = range;  var toX = -3;     var toY = range; break;
            case 3: var fromX = -range; var fromY = -4;     var toX = -range; var toY = 3; break;
        }
        for (var i = 0; i < 20; i ++) {
            this.spells.moveIcon('icon-snowflake-1', 'color-white', fromX, fromY, toX, toY, options);
        }

        setTimeout(function () {
            MageS.Game.spells.endSpellAnimation();
        }, 900)
    };

    this.finishIceSpear = function(data) {
        this.finishStandartWater();

        var spear = this.spells.createIcon('icon-ice-spear', 'color-dark-blue');

        $('.animation-field').append(spear);

        var calculations = this.spells.getDistanceBetweenTwoDots(0, 0, data.targetX, data.targetY);
        spear.find('svg')[0].style.transform = 'rotate(' + (calculations[1] - 45) + 'deg)';

        var margins = this.spells.transformDegAndDistanceToMargin(calculations[1], calculations[0]);

        spear.animate({
            'margin-left' : margins[0] * MageS.Game.cellSize * MageS.Game.rem,
            'margin-top' : margins[1] * MageS.Game.cellSize * MageS.Game.rem,
        }, {duration: 400, easing:'easeInQuart', complete:function(){
            $(this).remove();
        }});
        var options = {
            segment2: ['100%', '105%'],
            time:0.50,
            delay:100
        };
        var line1 = 'icon-bullet-sinus-2';
        var line2 = 'icon-bullet-sinus';
        this.spells.beamStrike(calculations[0], calculations[1], line1, '#fff', options);
        this.spells.beamStrike(calculations[0], calculations[1], line2, '#fff', options);
        options.delay = 250;
        this.spells.beamStrike(calculations[0], calculations[1], line1, '#fff', options);
        this.spells.beamStrike(calculations[0], calculations[1], line2, '#fff', options);
        options.delay = 400;
        this.spells.beamStrike(calculations[0], calculations[1], line1, '#fff', options);
        this.spells.beamStrike(calculations[0], calculations[1], line2, '#fff', options);

        setTimeout(function () {
            MageS.Game.spells.endSpellAnimation();
        }, 900)
    };

    this.finishIceCone = function(data) {
        this.finishStandartWater();

        var options = {
            time:400,
            startRandomRange:MageS.Game.cellSize * MageS.Game.rem, 
            randomRange:MageS.Game.cellSize * MageS.Game.rem, 
            scale:0.25, rotate:true};
        var possibleCells = [];
        for (var n in data.pattern) {
            if (Math.abs(data.pattern[n][0]) + Math.abs(data.pattern[n][1]) > 2) {
                possibleCells.push([data.pattern[n][0], data.pattern[n][1]]);
            }
        }

        var cell = [];
        for (var i = 0; i < 20; i ++) {
            cell = array_rand(possibleCells);
            this.spells.moveIcon('icon-snowflake-1', 'color-white', 0, 0, cell[0], cell[1], options);
        }

        setTimeout(function () {
            MageS.Game.spells.endSpellAnimation();
        }, 800)
    };

    this.finishWashAndGo = function(data) {
        this.finishStandartWater();

        var options = {beamWidth:20};

        var colors = [
            '#529BCA', '#37A4F9', '#ffffff'
        ];
        var color = '';
        var lines = [
            'icon-bullet-line-small-curve-right', 'icon-bullet-line-small-curve-left', 'icon-bullet-line', 'icon-bullet-sinus'
        ];
        var line = '';
        for (var i = 0; i < 10; i ++) {
            color = array_rand(colors);
            line = array_rand(lines);
            this.spells.beam(
                data.targetX + (Math.random() * 0.5) - 0.25,
                data.targetY + (Math.random() * 0.5) - 0.25,
                0,
                0,
                color,
                line,
                options);
        }

        setTimeout(function () {
            MageS.Game.spells.endSpellAnimation();
        }, 800)
    };

    this.finishBlizzard = function(data) {
        this.finishStandartWater();

        var options = {
            scale:0.25,
            time:300,
            rotateDistance: 180,
            rangeRandom:2,
            rangeMove: 1,
            'delete': true
        };
        for (var i = 0; i < 70; i ++) {
            options.delay = Math.random() * 1200;
            this.spells.spinIcon('icon-snowflake-1', 'color-white', 2, options);
        }

        setTimeout(function () {
            MageS.Game.spells.endSpellAnimation();
        }, 1500)
    };

    this.finishIceShield = function(data) {
        this.finishStandartWater();

        var options = {
            time:400,
            startRandomRange:MageS.Game.cellSize * MageS.Game.rem,
            randomRange:MageS.Game.cellSize * MageS.Game.rem,
            delayRange:300,
            scale: 0.25,
            rotate:true
        };
        var x = 0, y = 0, toY = 0, toX = 0;
        for (var i = 0; i < 20; i ++) {

            if (Math.random() > 0.5) {
                if (Math.random() > 0.5) { x = 5; } else { x = -5 }
                y = Math.round((Math.random() * 10) - 5);
            } else {
                if (Math.random() > 0.5) { y = 5; } else { y = -5 }
                x = Math.round((Math.random() * 10) - 5);
            }
            options.from = [x, y];
            this.spells.moveIcon('icon-snowflake-1', 'color-white', x, y, toX, toY, options);
        }

        var icon = this.spells.createIcon('icon-ice-shield', 'color-white');
        $('.animation-field').append(icon);

        MageS.Game.monimations.blastInScale(icon, 3, function(){}, 700);

        setTimeout(function () {
            MageS.Game.spells.endSpellAnimation();
        }, 1000)
    };

    this.finishIcelock = function(data) {
        this.finishStandartWater();

        if (data.data.length == 0) {
            MageS.Game.spells.endSpellAnimation();
            info('there is no targets for Icelock');
            return;
        }

        var options = {
            segment2: ['100%', '110%'],
            time:0.80,
            delay:100
        };
        var possibleLines = [
            'icon-bullet-line',
            'icon-bullet-sinus',
            'icon-bullet-sinus-2',
            'icon-bullet-around-side-line',
            'icon-bullet-simple-right-line',
            'icon-bullet-simple-middle-line',
            'icon-bullet-simple-middle-line-2',
            'icon-bullet-line-small-curve-left',
            'icon-bullet-line-small-curve-right'
        ];

        for (var n in data.data) {
            //options.delay = Math.random() * 1200;
            this.spells.beam(0,0, data.data[n][0], data.data[n][1], '#fff', array_rand(possibleLines), options);
            this.spells.beam(0,0, data.data[n][0], data.data[n][1], '#fff', array_rand(possibleLines), options);
            this.spells.beam(0,0, data.data[n][0], data.data[n][1], '#fff', array_rand(possibleLines), options);

        }

        setTimeout(function () {
            MageS.Game.spells.endSpellAnimation();
        }, 1000)
    };

    this.finishFreshWaterFountain = function(data) {
        this.finishStandartWater();

        MageS.Game.animations.singleAnimationFinished(MageS.Game.spells.isSecondPartWaiting);
        setTimeout(function(){
            MageS.Game.spells.clearAnimationField();
        }, 800);
    };

    this.finishWaterBody = function(data) {
        this.finishStandartWater();

        MageS.Game.monimations.skweeze($('.battle-border .mage .svg-icon'));
        setTimeout(function(){
            MageS.Game.spells.endSpellAnimation();
        }, 800);
    };

    this.startIceCrown = function() {
        var icon = this.spells.createIcon('icon-frozen-orb', 'color-white');
        $('.animation-field').append(icon);
        this.spells.savedData[0] = icon;
        this.spells.savedData[1] = this.sparklingAnimation(icon);
        this.spells.savedData[2] = false;
        icon.find('svg.svg-icon path').animate({'svgFill': '#fff'}, {duration:1500});
        this.game.monimations.blastInScale(icon.find('svg.svg-icon'), 3, function() {
            MageS.Game.spells.water.iterateIceCrown();
        });
    };

    this.iterateIceCrown = function() {
        var iterateTime = 400;
        MageS.Game.monimations.rotate(this.spells.savedData[1], parseInt(30), 90, iterateTime, true, false);
        if (this.spells.savedData[2]) {
            var radius = 0.15 * this.game.rem; var range = 2.5 * this.game.rem;
        }
        else {
            var radius = 0.05 * this.game.rem; var range = 4 * this.game.rem;
        }
        this.spells.savedData[1].find('circle').animate({'svgCx': range, 'svgR':radius}, {duration:iterateTime});
        this.spells.savedData[2] = ! this.spells.savedData[2];

        var el = this.spells.savedData[0].find('svg.svg-icon');
        var grad = 60;
        new mojs.Tween({
            repeat:   0,
            delay:    1,
            duration: iterateTime,
            onUpdate: function (progress) {
                progress = progress * grad - grad;
                el[0].style.transform = 'scale(2.25) rotate(' + (progress) + 'deg)';

            }, onComplete: function() {
                MageS.Game.spells.tryToEndFirstPart();
            }
        }).run();
    };

    this.finishIceCrown = function (data) {
        MageS.Game.monimations.rotate(this.spells.savedData[1], parseInt(30), 150, 1000, true, false);
        this.spells.savedData[1].find('circle').animate({'svgCx': 0.5 * this.game.rem, 'svgR':0.15 * this.game.rem},
            {duration:1000, easing:'easeOutBounce'});

        var icon = this.spells.savedData[0];

        MageS.Game.monimations.rotateWithScale(icon.find('svg.svg-icon'), 0, 360, 2.25, -2, 1000);

        $('.animation-field .animation').animate({
            opacity: '0'
        }, {
            duration:1000,
            easing:'easeInExpo',
            complete: function() {
                MageS.Game.spells.endSpellAnimation();
            }
        })
    };
};

 
 /**
 * Created by Ilya Rubinchik (ilfate) on 06/11/15.
 */




MageS.Spells.Air = function (game, spells) {
    this.game = game;
    this.spells = spells;

    this.startStandartAir = function()
    {
        var options = {
            'moveLeft': ((0.5) * MageS.Game.cellSize) + 'rem',
            'moveTop': ((0.5) * MageS.Game.cellSize) + 'rem',
            'time': 1,
            'beamWidth': 7,
            'segment1': ["100%", "100%"],
            'segment2': ["6%", "16%"],
            'delete':true
        };
        for(var i = 0 ; i < 7; i++) {
            //'icon-bullet-simple-middle-line'
            this.spells.beamStrike(5, 360 / 7 * i, 'icon-bullet-start-spin', MageS.Game.color.lightBlue, options);
        }
        setTimeout(function(){
            MageS.Game.spells.air.iterateStandartAir();
        }, 1000);
    };

    this.iterateStandartAir = function() {
        var icon = 'icon-bullet-cercle';
        var options = {
            'moveLeft': ((0.5) * MageS.Game.cellSize) + 'rem',
            'moveTop': ((0.5) * MageS.Game.cellSize) + 'rem',
            'time': 0.5,
            'beamWidth': 10,
            'segment1': ["100%", "100%"],
            'segment2': ["0%", "5%"],
            'delete': true
        };
        for(var i = 0 ; i < 7; i++) {
            //'icon-bullet-simple-middle-line'
            this.spells.beamStrike(2.2, 360 / 7 * i, icon, MageS.Game.color.lightBlue, options)
        }
        setTimeout(function() {
            MageS.Game.spells.tryToEndFirstPart();
        }, 500);
    };

    this.finishPush = function(data) {
        var icon = this.spells.createIcon('icon-cloud-ring', 'color-light-blue');
        $('.animation-field').append(icon);
        icon[0].style.transform = 'rotate(' + (data.d * 90) + 'deg)';
        this.game.monimations.blastInScale(icon.find('svg.svg-icon'), 4, null, 900);
        var left = 0, top = 0;
        switch (data.d) {
            case 0: top = -2 * MageS.Game.cellSize + 'rem'; break;
            case 1: left = 2 * MageS.Game.cellSize + 'rem'; break;
            case 2: top = 2 * MageS.Game.cellSize + 'rem'; break;
            case 3: left = -2 * MageS.Game.cellSize + 'rem'; break;
        }
        icon.animate({'margin-left': left, 'margin-top':top}, {duration:600, easing:'easeInSine'});
        MageS.Game.monimations.camShake(data.d, 200, 4, {'delay':100});
        setTimeout(function() {
            icon.animate({opacity: 0.3}, {duration:200, queue:false});
        }, 500);
        setTimeout(function() {
            MageS.Game.spells.endSpellAnimation();
        }, 600);
    };

    this.finishHarmony = function(data) {
        var icon = this.spells.createIcon('icon-triorb', 'color-light-blue');
        $('.animation-field').append(icon);
        icon.css({opacity:0});
        var options = {
            'delay': 0,
            'scale': 0.4,
            time:700,
            'easing': 'easeOutCubic'
        };
        //easeOutBounce
        this.spells.moveIcon('icon-cercle', 'color-light-blue', 5, -3, 0.5, -0.1, options);
        this.spells.moveIcon('icon-cercle', 'color-light-blue', -5, -3, 0, -0.1, options);
        this.spells.moveIcon('icon-cercle', 'color-light-blue', 0, 5, 0.25, 0.25, options);


        setTimeout(function() {
            icon.animate({opacity: 1}, {duration:200, queue:false});
        }, 650);
        setTimeout(function() {
            icon.animate({opacity:0}, {duration:200});
        }, 1000);
        setTimeout(function() {
            MageS.Game.spells.endSpellAnimation();
        }, 1200);
    };

    this.finishNoMoreAirForYou = function(data) {
        
        var options = {
            'moveLeft': ((0.5 + parseInt(data.targetX)) * MageS.Game.cellSize) + 'rem',
            'moveTop': ((0.5 + parseInt(data.targetY)) * MageS.Game.cellSize) + 'rem',
            'time': 1,
            'beamWidth': 12,
            'segment1': ["-10%", "0%"],
            'segment2': ["100%", "116%"],
            'delete':true
        };
        for(var i = 0 ; i < 12; i++) {
            this.spells.beamStrike(2, 360 / 12 * i, 'icon-bullet-around-side-line', MageS.Game.color.lightBlue, options);
        }
        setTimeout(function() {
            MageS.Game.spells.endSpellAnimation();
        }, 1000);
    };

    this.finishHardLanding = function(data) {
        MageS.Game.animations.singleAnimationFinished(MageS.Game.spells.isSecondPartWaiting);
        var icon = 'icon-bullet-cercle';
        var options = {
            'moveLeft': ((0.5) * MageS.Game.cellSize) + 'rem',
            'moveTop': ((0.5) * MageS.Game.cellSize) + 'rem',
            'time': 0.7,
            'beamWidth': 10,
            'segment1': ["100%", "100%"],
            'segment2': ["0%", "3%"],
            'delete': true
        };
        for(var i = 0 ; i < 12; i++) {
            //'icon-bullet-simple-middle-line'
            this.spells.beamStrike(2 + (Math.random() * 0.4), 360 / 12 * i, icon, MageS.Game.color.lightBlue, options)
        }
        MageS.Game.monimations.camShake('Y', 200, 5, {'delay':700});
        var options2 = {
            'moveLeft': ((0.5) * MageS.Game.cellSize) + 'rem',
            'moveTop': ((0.5) * MageS.Game.cellSize) + 'rem',
            'time': 0.3,
            'beamWidth': 12,
            'segment1': ["0%", "0%"],
            'segment2': ["100%", "200%"],
            'delete':true,
            delay:700
        };
        for(var i2 = 0 ; i2 < 12; i2++) {
            this.spells.beamStrike(2, 360 / 12 * i2, 'icon-bullet-around-side-line', MageS.Game.color.lightBlue, options2);
        }
        setTimeout(function(){
            MageS.Game.spells.clearAnimationField();
        }, 900);
    };

    this.finishQuardroLightning = function(data) {
        if (data.targets.length == 0 ) {
            MageS.Game.spells.endSpellAnimation(); return;
        }
        var screenOptions = {color:'#000', 'delete':true, 'duration': 200, deleteDelay:300, deleteDuration:200};
        this.spells.addScreen(screenOptions);
        var icons = ['icon-bullet-lightning', 'icon-bullet-lightning-2'];
        var options = {
            // 'moveLeft': ((0.5 + data.targetX) * MageS.Game.cellSize) + 'rem',
            // 'moveTop': ((0.5 + data.targetY) * MageS.Game.cellSize) + 'rem',
            'time': 0.1,
            'beamWidth': 10,
            'segment1': ["100%", "100%"],
            'segment2': ["0%", "100%"],
            'delete':true,
            'delay': 100,
            'yesIWantToHaveBlinkBug': true,
        };
        // MageS.Game.monimations.camShake('Y', 200, 8, 300, false, {el:$('body')});
        var icon = '';
        setTimeout(function() {
            for (var i = 0; i < data.targets.length; i++) {
                icon = array_rand(icons);
                MageS.Game.spells.beam(0, 0, data.targets[i][0], data.targets[i][1], '#FFF', icon, options);
            }
        }, 300);
        setTimeout(function() {
            MageS.Game.spells.endSpellAnimation();
        }, 800);
    };

    this.finishLightning = function(data) {
        var screenOptions = {color:'#000', 'delete':true, 'duration': 200, deleteDelay:300, deleteDuration:200};
        this.spells.addScreen(screenOptions);
        var icon = 'icon-bullet-lightning';
        var options = {
            'moveLeft': ((0.5 + parseInt(data.targetX)) * MageS.Game.cellSize) + 'rem',
            'moveTop': ((0.5 + parseInt(data.targetY)) * MageS.Game.cellSize) + 'rem',
            'time': 0.1,
            'beamWidth': 10,
            'segment1': ["100%", "100%"],
            'segment2': ["0%", "100%"],
            'delete':true,
            'delay': 100,
            'yesIWantToHaveBlinkBug': true,
        };
        MageS.Game.monimations.camShake('Y', 200, 8, {el:$('body'), delay:300});
        setTimeout(function() {
            MageS.Game.spells.beamStrike(5, -90, icon, '#FFF', options);
        }, 300);
        setTimeout(function() {
            MageS.Game.spells.endSpellAnimation();
        }, 800);
    };

    this.finishSkyFist = function(data) {
        var targetX = data.pattern[0][0];
        var targetY = data.pattern[0][1];
        var options = {delay:0, time:300, scale:3, startRotate:180};
        var startX = targetX;
        var startY = targetY - 16;
        this.spells.moveIcon('icon-fist', 'color-white',
            startX, startY,
            targetX, targetY-1, options);
        MageS.Game.monimations.camShake('Y', 200, 8, {delay:300});
        var rand = [];

        for(var i = 0; i < 10; i++) {
            var beamOptions = {time:0.3, beamWidth: 17, 'delete':true}; // YES WE NEED IT HERE
            rand[0] = (Math.random() * 2) - 1;
            rand[1] = (Math.random() * 2) - 1;
            MageS.Game.spells.beam(startX + rand[0], startY + rand[1], targetX + rand[0], targetY + rand[1], MageS.Game.color.lightBlue, 'icon-bullet-line', beamOptions);
        }
        var beamOptions2 = {
            'moveLeft': ((0.5 + targetX) * MageS.Game.cellSize) + 'rem',
            'moveTop': ((0.5 + targetY) * MageS.Game.cellSize) + 'rem',
            'time': 0.3,
            'beamWidth': 10,
            'segment1': ["0%", "0%"],
            'segment2': ["100%", "200%"],
            'delay': 300,
            'delete':true
        };
        for(var i2 = 0 ; i2 < 10; i2++) {
            this.spells.beamStrike(2, 360 / 10 * i2, 'icon-bullet-start-spin', MageS.Game.color.lightBlue, beamOptions2);
        }
        setTimeout(function() {
            MageS.Game.spells.endSpellAnimation();
        }, 800);
    };

    this.finishLightingShield = function(data) {

        var icon = 'icon-bullet-cercle';
        var options = {
            'moveLeft': ((0.5) * MageS.Game.cellSize) + 'rem',
            'moveTop': ((0.5) * MageS.Game.cellSize) + 'rem',
            'time': 0.5,
            'beamWidth': 10,
            'segment1': ["0%", "0%"],
            'segment2': ["0%", "100%"],
            'delete': true
        };
        for(var i = 0 ; i < 7; i++) {
            icon = 'icon-bullet-simple-middle-line'
            this.spells.beamStrike(1, 360 / 7 * i, icon, MageS.Game.color.lightBlue, options)
        }

        setTimeout(function() {
            MageS.Game.spells.endSpellAnimation();
        }, 800);
    };

    this.finishWindSword = function(data) {
        for (var key in data.pattern) {
            var icon = 'icon-bullet-around-side-line';
            var options = {
                'moveLeft': ((0.5 + data.pattern[key][0]) * MageS.Game.cellSize) + 'rem',
                'moveTop': ((0.5 + data.pattern[key][1]) * MageS.Game.cellSize) + 'rem',
                'time': 0.3,
                'beamWidth': 10,
                'segment1': ["0%", "0%"],
                'segment2': ["100%", "150%"],
                'delete': true,
                'delay': (key * 200)
            };
            for (var i = 0; i < 7; i++) {
                this.spells.beamStrike(1.5, 360 / 7 * i, icon, MageS.Game.color.lightBlue, options)
            }
        }

        setTimeout(function() {
            MageS.Game.spells.endSpellAnimation();
        }, 1200);
    };

    this.finishLootItAll = function(data) {
        if (data.targets.length == 0) {
            MageS.Game.spells.endSpellAnimation();
            return;
        }
        for (var key in data.targets) {
            var icon = 'icon-bullet-start-spin';

            for (var i = 0; i < 10; i++) {
                var options = {
                    'time': 0.7,
                    'beamWidth': 10,
                    'segment1': ["100%", "100%"],
                    'segment2': ["-2%", "0%"],
                    'delete': true,
                    'delay': (i * 50)
                };
                this.spells.beam(0,0, data.targets[key][0], data.targets[key][1], MageS.Game.color.lightBlue, icon, options)
            }
        }

        setTimeout(function() {
            MageS.Game.spells.endSpellAnimation();
        }, 1200);
    };

    this.finishPush2 = function(data) {
        var icon = 'icon-bullet-sinus-2';

        for (var i = 0; i < 20; i++) {
            var options = {
                'moveLeft': ((0.5) * MageS.Game.cellSize) + 'rem',
                'moveTop': ((0.5) * MageS.Game.cellSize) + 'rem',
                'time': 0.4,
                'beamWidth': 20,
                'segment1': ["0%", "0%"],
                'segment2': ["100%", "150%"],
                'delete': true,
                'delay': (i * 5)
            };
            this.spells.beamStrike(2.5, 360 / 20 * i, icon, MageS.Game.color.lightBlue, options)
        }

        setTimeout(function() {
            MageS.Game.spells.endSpellAnimation();
        }, 600);
    };

    this.finishTeslaTrap = function(data) {

        var screenOptions = {color:'#000', 'delete':true, 'duration': 200, deleteDelay:300, deleteDuration:200};
        this.spells.addScreen(screenOptions);
        var icon = 'icon-bullet-lightning';
        var options = {
            'moveLeft': ((0.5 + parseInt(data.pattern[0][0])) * MageS.Game.cellSize) + 'rem',
            'moveTop': ((0.5 + parseInt(data.pattern[0][1])) * MageS.Game.cellSize) + 'rem',
            'time': 0.1,
            'beamWidth': 10,
            'segment1': ["100%", "100%"],
            'segment2': ["0%", "100%"],
            'delete':true,
            'delay': 100,
            'yesIWantToHaveBlinkBug': true,
        };
        setTimeout(function() {
            MageS.Game.spells.beamStrike(5, -90, icon, '#FFF', options);
        }, 300);
        setTimeout(function() {
            MageS.Game.animations.singleAnimationFinished(MageS.Game.spells.isSecondPartWaiting);
        }, 300);
        setTimeout(function() {
            MageS.Game.spells.clearAnimationField();
        }, 800);
    };

    this.finishChainLighting = function(data) {

        if (data.targets.length == 0 ) {
            MageS.Game.spells.endSpellAnimation(); return;
        }
        var screenOptions = {color:'#000', 'delete':true, 'duration': 400, deleteDelay:300, deleteDuration:200};
        this.spells.addScreen(screenOptions);
        var icons = ['icon-bullet-lightning', 'icon-bullet-lightning-2'];

        // MageS.Game.monimations.camShake('Y', 200, 8, 300, false, {el:$('body')});
        var icon = '';
        var centerX = 0;
        var centerY = 0;
        setTimeout(function() {
            for (var i = 0; i < data.targets.length; i++) {
                var options = {
                    // 'moveLeft': ((0.5 + data.targetX) * MageS.Game.cellSize) + 'rem',
                    // 'moveTop': ((0.5 + data.targetY) * MageS.Game.cellSize) + 'rem',
                    'time': 0.1,
                    'beamWidth': 10,
                    'segment1': ["100%", "100%"],
                    'segment2': ["0%", "100%"],
                    'delete':true,
                    'delay': 100 + (i * 100),
                    'yesIWantToHaveBlinkBug': true,
                };
                icon = array_rand(icons);
                MageS.Game.spells.beam(centerX, centerY, data.targets[i][0], data.targets[i][1], '#FFF', icon, options);
                centerX = data.targets[i][0];
                centerY = data.targets[i][1];
            }
        }, 300);
        setTimeout(function() {
            MageS.Game.spells.endSpellAnimation();
        }, 800);
    };

   

};

 
 /**
 * Created by Ilya Rubinchik (ilfate) on 06/11/15.
 */




MageS.Spells.Earth = function (game, spells) {
    this.game = game;
    this.spells = spells;

    this.startStandartEarth = function()
    {
        var startX = 0;
        var startY = 0;
        var icon = 'icon-bullet-small-spiral';
        for (var n = 0; n < 4; n++) {
            switch (n) {
                case 0: startX = 0; startY = -1; break;
                case 1: startX = 1; startY = 0; break;
                case 2: startX = 0; startY = 1; break;
                case 3: startX = -1; startY = 0; break;
            }
            var options = {
                'moveLeft': ((0.5 + startX) * MageS.Game.cellSize) + 'rem',
                'moveTop': ((0.5 + startY) * MageS.Game.cellSize) + 'rem',
                'time': 0.3,
                'beamWidth': 12,
                'segment1': ["100%", "100%"],
                'segment2': ["-20%", "0%"],
                'delete': true
            };
            for (var i = 0; i < 3; i++) {
                this.spells.beamStrike(2.5, 360 / 3 * i, icon, MageS.Game.color.brown, options);
            }
        }

        var icons = []
        for (var i = 0; i < 4; i ++) {
            var options2 = {
                scale:0.5,
                time:600,
                rotateDistance: 90,
                delay: 200,
                angleStart:(i * 90) - 7,
                preAnimationDelay: 200
            };
            var iconObject = this.spells.spinIcon('icon-stone-sphere', 'color-brown', 0.5, options2);
            icons.push(iconObject);
        }
        this.spells.savedData[0] = icons;

        var icons2 = []
        var icons3 = []
        var icon2 = 'icon-bullet-cercle-sinus-2';
        var icon3 = 'icon-bullet-cercle-sinus';
        var options3 = {
            'moveLeft': ((0.5) * MageS.Game.cellSize) + 'rem',
            'moveTop': ((0.5) * MageS.Game.cellSize) + 'rem',
            'time': 0.6,
            'beamWidth': 10,
            'segment1': ["40%", "40%"],
            'segment2': ["24%", "16%"],
            'delay':400
        };
        for(var i = 0 ; i < 4; i++) {
            icons2.push(this.spells.beamStrike(2.7, 360 / 4 * i, icon2, MageS.Game.color.orange, options3));
            icons3.push(this.spells.beamStrike(2.9, 360 / 4 * i, icon3, MageS.Game.color.orange, options3));
        }
        this.spells.savedData[1] = icons2;
        this.spells.savedData[2] = icons3;

        setTimeout(function(){
            MageS.Game.spells.earth.iterateStandartEarth();
        }, 1000);
    };

    this.iterateStandartEarth = function() {
        for (var i in this.spells.savedData[0]) {
            var iconObject = this.spells.savedData[0][i];
            var angleStart = (i * 90) - 7;
            iconObject.animateRotate(angleStart, angleStart + 90, 600, 'linear');
        }
        for (var i2 in this.spells.savedData[1]) {
            var beamObject = this.spells.savedData[1][i2];
            var pathEl = beamObject.find('path')[0];
            var segment = new Segment(pathEl);
            segment.draw("49%", "41%", 0);
            segment.draw("24%", "16%", 0.6);
        }
        for (var i3 in this.spells.savedData[2]) {
            var beamObject = this.spells.savedData[2][i3];
            var pathEl = beamObject.find('path')[0];
            var segment = new Segment(pathEl);
            segment.draw("49%", "41%", 0);
            segment.draw("24%", "16%", 0.6);
        }
        setTimeout(function() {
            $('.battle-border .mage-container .mage .svg').css({'overflow':'visible'});
            MageS.Game.spells.tryToEndFirstPart();
        }, 600);
    };

    this.finishStandartEarth = function(time) {
        for (var i in this.spells.savedData[0]) {
            var iconObject = this.spells.savedData[0][i];
            var angleStart = (i * 90) - 7;
            iconObject.animateRotate(angleStart, angleStart + 90, time, 'linear');
            var svg = iconObject.find('svg');
            svg.animate({'margin-left' : 0, opacity:0}, {duration:time, complete:function(){ $(this).remove();}})
        }
        for (var i2 in this.spells.savedData[1]) {
            var beamObject = this.spells.savedData[1][i2];
            beamObject.animate({opacity:0}, {duration:100, complete:function(){ $(this).remove();}});
        }
        for (var i3 in this.spells.savedData[2]) {
            var beamObject = this.spells.savedData[2][i3];
            beamObject.animate({opacity:0}, {duration:100, complete:function(){ $(this).remove();}});
        }
    };

    this.finishStoneFace = function(data) {
        this.finishStandartEarth(200);

        var beam = 'icon-bullet-simple-middle-line';
        for (var i = 0; i < 5; i++) {
            var options = {
                'moveLeft': ((0.5) * MageS.Game.cellSize) + 'rem',
                'moveTop': ((0.5) * MageS.Game.cellSize) + 'rem',
                'time': 0.4,
                'beamWidth': 15,
                'segment1': ["100%", "100%"],
                'segment2': ["-40%", "0%"],
                'delete': true,
                'delay': 100 + (i * 5)
            };
            this.spells.beamStrike(4, 360 / 5 * i, beam, MageS.Game.color.brown, options)
        }

        var icon = this.spells.createIcon('icon-iron-mask', 'color-brown');
        $('.animation-field').append(icon);

        MageS.Game.monimations.blastInScale(icon, 3, function(){}, 700);

        setTimeout(function() {
            MageS.Game.spells.endSpellAnimation();
        }, 1000);
    };

    this.finishGroundShake = function(data) {
        this.finishStandartEarth(200);

        this.spells.cellShake(data.pattern, {duration:350, amplitude:10, delay:200});
        this.spells.cellShake(data.pattern, {duration:350, amplitude:8, delay:500});
        this.spells.cellShake(data.pattern, {duration:350, amplitude:5, delay:800});


        setTimeout(function() {
            MageS.Game.spells.endSpellAnimation();
        }, 1000);
    };

    this.finishQuicksand = function(data) {
        this.finishStandartEarth(200);
        if (data.targets.length == 0) {
            MageS.Game.spells.endSpellAnimation();
            info ('no targets for quicksand');
            return;
        }
        var rightHand = this.spells.getRightHandCoordinates(0.7);
        var leftHand = this.spells.getLeftHandCoordinates(0.7);

        for (var i in data.targets) {
            var options = {
                'time':1,
                'segment1': ["0%", "0%"],
                'segment2': ["100%", "400%"],
                'delete': true,
            };
            this.spells.beam(
                rightHand[0], rightHand[1], data.targets[i][0], data.targets[i][1],
                MageS.Game.color.sand, 'icon-bullet-spiral-cast-line-2', options
            );
            var options = {
                'time':1,

                'segment1': ["0%", "0%"],
                'segment2': ["100%", "400%"],
                'delete': true,
            };
            this.spells.beam(
                leftHand[0], leftHand[1], data.targets[i][0], data.targets[i][1],
                MageS.Game.color.sand, 'icon-bullet-spiral-cast-line', options
            );
        }


        setTimeout(function() {
            MageS.Game.spells.endSpellAnimation();
        }, 1000);
    };

    this.finishStoneSpear = function(data) {
        this.finishStandartEarth(200);

        var target = [data.targetX, data.targetY];

        var spear = this.spells.createIcon('icon-stone-spear', 'color-brown');

        $('.animation-field').append(spear);

        var calculations = this.spells.getDistanceBetweenTwoDots(0, 0, target[0], target[1]);
        info(calculations);
        spear.find('svg')[0].style.transform = 'rotate(' + (calculations[1] - 45) + 'deg)';

        var margins = this.spells.transformDegAndDistanceToMargin(calculations[1], calculations[0]);

        spear.animate({
            'margin-left' : margins[0] * MageS.Game.cellSize * MageS.Game.rem,
            'margin-top' : margins[1] * MageS.Game.cellSize * MageS.Game.rem,
        }, {duration: 400, easing:'easeInQuart', complete:function(){
            $(this).remove();
        }});

        var options = {time:400, randomRange:MageS.Game.cellSize * MageS.Game.rem, scale:0.25, rotate:true, delay:400};

        for (var i = 0; i < 20; i ++) {
            // cell = array_rand(possibleCells);
            var randTargetX = (Math.random() * target[0]) + (target[0] * 1.5);
            var randTargetY = (Math.random() * target[1]) + (target[1] * 1.5);
            this.spells.moveIcon('icon-stone-sphere', 'color-brown', target[0], target[1], randTargetX, randTargetY, options);
        }
        var shakeDirection = 'Y';
        if (Math.abs(target[0]) > Math.abs(target[1])) { shakeDirection = 'X'; }
        MageS.Game.monimations.camShake(shakeDirection, 100, 4, {delay:380});

        setTimeout(function() {
            MageS.Game.spells.endSpellAnimation();
        }, 600);

    };

    this.finishTunnelTravel = function(data) {
        this.finishStandartEarth(200);



        for (var i = 0; i < 20; i ++) {
            var options = {
                time:400,
                randomRange:MageS.Game.cellSize * MageS.Game.rem * 2,
                scale:0.15,
                delay:(Math.random() * 400) + 200};
            this.spells.moveIcon('icon-stone-sphere', 'color-brown', 0, 0, 0, 0, options);
        }
        var shakeDirection = 'Y';
        //if (Math.abs(target[0]) > Math.abs(target[1])) { shakeDirection = 'X'; }
        MageS.Game.monimations.camShake(shakeDirection, 800, 6, {delay:200});

        setTimeout(function() {
            MageS.Game.spells.endSpellAnimation();
        }, 800);
    };

    this.finishEarthProtection = function(data) {
        this.finishStandartEarth(200);

        var icon = 'icon-bullet-cercle-cast';
        var options = {
            'moveLeft': ((0.5) * MageS.Game.cellSize) + 'rem',
            'moveTop': ((0.5) * MageS.Game.cellSize) + 'rem',
            'time': 1,
            'beamWidth': 10,
            'segment1': ["100%", "100%"],
            'segment2': ["-50%", "0%"],
            'delete': true
        };
        for (var i = 0; i < 8; i++) {
            this.spells.beamStrike(2 + (Math.random() * 2), 360 / 8 * i, icon, MageS.Game.color.brown, options);
        }

        setTimeout(function() {
            MageS.Game.spells.endSpellAnimation();
        }, 1000);
    };

    this.finishStalactitesFall = function(data) {
        this.finishStandartEarth(200);
        if (data.targets.length == 0) {
            MageS.Game.spells.endSpellAnimation();
            info ('no targets for StalactitesFall');
            return;
        }
        for (var key in data.targets) {
            var target = data.targets[key];
            var targetX = target[0];
            var targetY = target[1];
            var options = {delay:600 * key, time:300, scale:3};
            var startX = targetX;
            var startY = targetY - 16;
            this.spells.moveIcon('icon-stalactite', 'color-brown',
                startX, startY,
                targetX, targetY-1, options);
            MageS.Game.monimations.camShake('Y', 200, 8, {delay:300 + (600 * key)});
            var rand = [];

            for(var i = 0; i < 10; i++) {
                var beamOptions = {time:0.3, beamWidth: 17, 'delete':true, delay:600 * key}; // YES WE NEED IT HERE
                rand[0] = (Math.random() * 2) - 1;
                rand[1] = (Math.random() * 2) - 1;
                MageS.Game.spells.beam(startX + rand[0], startY + rand[1], targetX + rand[0], targetY + rand[1], MageS.Game.color.brown, 'icon-bullet-line', beamOptions);
            }
            var beamOptions2 = {
                'moveLeft': ((0.5 + targetX) * MageS.Game.cellSize) + 'rem',
                'moveTop': ((0.5 + targetY) * MageS.Game.cellSize) + 'rem',
                'time': 0.3,
                'beamWidth': 10,
                'segment1': ["0%", "0%"],
                'segment2': ["100%", "200%"],
                'delay': 300 + (600 * key),
                'delete':true
            };
            for(var i2 = 0 ; i2 < 10; i2++) {
                this.spells.beamStrike(2, 360 / 10 * i2, 'icon-bullet-start-spin', MageS.Game.color.brown, beamOptions2);
            }
        }


        setTimeout(function() {
            MageS.Game.spells.endSpellAnimation();
        }, 600 * data.targets.length);
    };

    this.finishEarthquake = function(data) {
        this.finishStandartEarth(100);

        MageS.Game.monimations.camShake('Y', 300, 4, {delay:50});
        MageS.Game.monimations.camShake('X', 300, 8, {delay:400});
        MageS.Game.monimations.camShake('Y', 300, 12, {delay:750});

        setTimeout(function() {
            MageS.Game.spells.endSpellAnimation();
        }, 1000);
    };

    this.finishAstonishing = function(data) {
        this.finishStandartEarth(200);

        var rightHand = this.spells.getRightHandCoordinates(0.7);
        var leftHand = this.spells.getLeftHandCoordinates(0.7);

        var colors = [
            MageS.Game.color.brown,
            MageS.Game.color.grey,
        ];
        var time = 0.4;
        for (var i = 0; i < 2; i++) {
            var options = {
                'time':time,
                'time2':time,
                'delay2':200,
                'segment1': ["0%", "0%"],
                'segment2': ["0%", "100%"],
                'segment3': ["100%", "200%"],
                'delete': true,
            };
            this.spells.beam(
                rightHand[0], rightHand[1], data.targetX, data.targetY,
                colors[i], 'icon-bullet-cast-angle-' + (2 + (i * 2)), options
            );
            var options2 = {
                'time':time,
                'time2':time,
                'delay2':200,
                'segment1': ["0%", "0%"],
                'segment2': ["0%", "100%"],
                'segment3': ["100%", "200%"],
                'delete': true,
            };
            this.spells.beam(
                leftHand[0], leftHand[1], data.targetX, data.targetY,
                colors[i], 'icon-bullet-cast-angle-' + (1 + (i * 2)), options2
            );
        }

        setTimeout(function() {
            MageS.Game.spells.endSpellAnimation();
        }, 1000);
    };

    this.finishWallUp = function(data) {
        this.finishStandartEarth(200);
        setTimeout(function() {
            MageS.Game.spells.endSpellAnimation();
        }, 200);
    };

    this.finishMilestoneHit = function(data) {
        this.finishStandartEarth(200);

        var x = parseInt(data.targetX);
        var y = parseInt(data.targetY);
        var tx = x;
        var ty = y - 2;

        var options = {
            'moveLeft': ((0.5 + tx) * MageS.Game.cellSize) + 'rem',
            'moveTop': ((0.5 + ty) * MageS.Game.cellSize) + 'rem',
            'time': 0.4,
            'beamWidth': 12,
            'segment1': ["100%", "100%"],
            'segment2': ["-100%", "0%"],
            'delay': 0,
            'delete':true
        };
        for(var i2 = 0 ; i2 < 10; i2++) {
            this.spells.beamStrike(3, 360 / 10 * i2, 'icon-bullet-cast-angle-1', MageS.Game.color.brown, options);
        }

        var icon = this.spells.createIcon('icon-stone-tablet', 'color-brown');
        icon.css({'margin-top': ((ty) * MageS.Game.cellSize) + 'rem', 'margin-left': ((tx) * MageS.Game.cellSize) + 'rem'});
        $('.animation-field').append(icon);
        MageS.Game.monimations.blastInScale(icon, 2, function(){}, 500);

        setTimeout(function(){
            icon.animate({
                'margin-top':((y) * MageS.Game.cellSize) + 'rem'
            }, {duration:400, easing:'easeOutBounce'});
        }, 500);

        MageS.Game.monimations.camShake('Y', 150, 6, {delay:700});

        setTimeout(function() {
            MageS.Game.spells.endSpellAnimation();
        }, 1100);
    };

    this.finishRollingStones = function(data) {
        //this.finishStandartEarth(200);
        var time = 500;
        for (var i in this.spells.savedData[0]) {
            var iconObject = this.spells.savedData[0][i];
            var angleStart = (i * 90) - 7;
            iconObject.animateRotate(angleStart, angleStart + 7, 100, 'linear');
            var svg = iconObject.find('svg');
            svg[0].style.transform = 'scale(1)';
            svg.animate({'margin-left' : 5 * MageS.Game.cellSize * MageS.Game.rem}, {duration:time, complete:function(){ $(this).remove();}})
        }
        for (var i2 in this.spells.savedData[1]) {
            var beamObject = this.spells.savedData[1][i2];
            beamObject.animate({opacity:0}, {duration:100, complete:function(){ $(this).remove();}});
        }
        for (var i3 in this.spells.savedData[2]) {
            var beamObject = this.spells.savedData[2][i3];
            beamObject.animate({opacity:0}, {duration:100, complete:function(){ $(this).remove();}});
        }

        var startX = 0;
        var startY = 0;
        var targetX = 0;
        var targetY = 0;
        var icon = 'icon-bullet-sinus';
        for (var n = 0; n < 4; n++) {
            switch (n) {
                case 0: targetX = 0; targetY = -5; break;
                case 1: targetX = 5; targetY = 0; break;
                case 2: targetX = 0; targetY = 5; break;
                case 3: targetX = -5; targetY = 0; break;
            }
            var options = {
                'time': 0.5,
                'beamWidth': 10,
                'segment1': ["8%", "8%"],
                'segment2': ["100%", "200%"],
                'delete': true
            };
            for (var i = 0; i < 3; i++) {
                var randX = Math.random() - 0.5;
                var randY = Math.random() - 0.5;
                this.spells.beam(startX, startY, targetX + randX, targetY + randY, MageS.Game.color.orange, icon, options);
            }
        }


        MageS.Game.monimations.camShake('Y', 350, 6, {delay:100});

        setTimeout(function() {
            MageS.Game.spells.endSpellAnimation();
        }, 1100);
    };


   

};

 
 /**
 * Created by Ilya Rubinchik (ilfate) on 06/11/15.
 */




MageS.Spells.Arcane = function (game, spells) {
    this.game = game;
    this.spells = spells;

    this.startStandartArcane = function()
    {
        var options = {
            'moveLeft': ((0.5) * MageS.Game.cellSize) + 'rem',
            'moveTop': ((0.5) * MageS.Game.cellSize) + 'rem',
            'time': 1,
            'beamWidth': 7,
            'segment1': ["100%", "100%"],
            'segment2': ["6%", "16%"],
            'delete':true
        };
        for(var i = 0 ; i < 7; i++) {
            //'icon-bullet-simple-middle-line'
            this.spells.beamStrike(5, 360 / 7 * i, 'icon-bullet-start-spin', MageS.Game.color.lightBlue, options);
        }
        setTimeout(function(){
            MageS.Game.spells.air.iterateStandartAir();
        }, 1000);
    };

    this.iterateStandartArcane = function() {
        var icon = 'icon-bullet-cercle';
        var options = {
            'moveLeft': ((0.5) * MageS.Game.cellSize) + 'rem',
            'moveTop': ((0.5) * MageS.Game.cellSize) + 'rem',
            'time': 0.5,
            'beamWidth': 10,
            'segment1': ["100%", "100%"],
            'segment2': ["0%", "5%"],
            'delete': true
        };
        for(var i = 0 ; i < 7; i++) {
            //'icon-bullet-simple-middle-line'
            this.spells.beamStrike(2.2, 360 / 7 * i, icon, MageS.Game.color.lightBlue, options)
        }
        setTimeout(function() {
            MageS.Game.spells.tryToEndFirstPart();
        }, 500);
    };

    

   

};

 
 /**
 * Created by Ilya Rubinchik (ilfate) on 08/04/16.
 */




MageS.Worlds = function (game) {
    this.game = game;

    this.worlds = {
        'Tutorial' : {
            'f1' : {'image':'tile-wood-plank' },
            'f2' : {'image':'tile-wood-plank', 'd' : 1 },
            'f3' : {'image':'tile-wood-plank', 'd' : 2 },
            'f4' : {'image':'tile-wood-plank', 'd' : 3 },
            's' : {'image':'tile-wood-plank', 'icon':'icon-rock'},
            's1' : {'icon':'tile-column-grey', 'image':'tile-wood-plank'},
            'w1' : {'icon':'icon-brick-wall', 'icon-color': 'color-grey'},
            'w2' : {'icon':'icon-brick-wall', 'icon-color': 'color-grey-darker'},
            'w3' : {'icon':'icon-brick-wall', 'icon-color': 'color-grey-lighter'},
            'w4' : {'icon':'icon-brick-wall-damaged', 'icon-color': 'color-grey'},
            'w5' : {'icon':'icon-brick-wall-damaged', 'icon-color': 'color-grey-darker'},
            'w6' : {'icon':'icon-brick-wall-damaged', 'icon-color': 'color-grey-lighter'},
        },
        'WitchForest' : {
            's' : {'icon':'icon-rock', 'icon-color': 'color-grey'},
            's1' : {'image':'cave-rock-1'},
            's2' : {'image':'cave-rock-2'},
            's3' : {'image':'cave-rock-3'},
            's4' : {'image':'cave-rock-4'},
            // 'f2' : {'icon':'icon-grass', 'icon-color': 'color-yellow'},
            // 't0' : {'icon':'icon-forest', 'icon-color': 'color-green-darker', 'icon2' : {
            //     'icon':'icon-forest-base', 'icon-color':'color-brown'
            // }},
            // 't0' : {'image':'forest1'},
            // 'tf' : {'image':'forest1', d : 1},
            // 'Tf' : {'image':'forest1', d : 2},
            // 'tF' : {'image':'forest2'},
            // 'TF' : {'image':'forest2', d : 3},
            // 'T0' : {'image':'forest2', d : 1},
            // 'tf' : {'icon':'icon-forest', 'icon-color': 'color-green', 'icon2' : {
            //     'icon':'icon-forest-base', 'icon-color':'color-brown'
            // }},
            // 'tF' : {'icon':'icon-forest', 'icon-color': 'color-green-darkest', 'icon2' : {
            //     'icon':'icon-forest-base', 'icon-color':'color-brown'
            // }},
            'f1' : {'image':'grass1'},
            'f2' : {'image':'grass2'},
            'f5' : {'image':'grass4'},
            'f6' : {'image':'grass-flowers-1'},
            'f7' : {'image':'grass-flowers-2'},
            'f8' : {'image':'grass-flowers-3'},
            'f9' : {'image':'grass-decor-1'},
            'f0' : {'image':'grass-decor-2'},
            'F1' : {'image':'grass-decor-3'},
            'F2' : {'image':'grass-stump'},
            'F3' : {'image':'grass3'},

            'f3' : {'image':'grass-stump-burned'},

            't1' : {'image':'forest-tree'},
            't2' : {'image':'forest-tree2'},
            't3' : {'image':'forest-tree3'},
            't4' : {'image':'forest-tree4'},
            't5' : {'image':'forest-tree5'},
            't6' : {'image':'forest-tree6'},
            
            'c1' : {'image':'cave-floor-1'},
            'c2' : {'image':'cave-floor-2'},
            'c3' : {'image':'cave-floor-3'},
            'r2' : {'image':'cave-road'},
            // 't2' : {'icon':'icon-pine-tree', 'icon-color': 'color-green-darkest'},
            // 't3' : {'icon':'icon-pine-tree', 'icon-color': 'color-green'},
            // 't4' : {'icon':'icon-tree-oak', 'icon-color': 'color-green-darker', 'icon2':{
            //     'icon':'icon-tree-oak-base', 'icon-color':'color-brown'
            // }},
            'w1' : {'icon':'icon-brick-wall', 'icon-color': 'color-brown'},
            'w2' : {'icon':'icon-obelisk', 'icon-color': 'color-clay'},
            // 'r2' : {'icon':'icon-footprints', 'icon-color': 'color-grey-darkest'},
            'r3' : {'icon':'icon-footprints-2', 'icon-color': 'color-grey-darkest'},
            'r4' : {'icon':'icon-footprints-3', 'icon-color': 'color-grey-darkest'},
            'c' : {'image':'cave-wall-1'},
            'cc' : {'image':'cave-wall-2'},
            'cC' : {'image':'cave-wall-3'},
        },
    };

    this.cell = function(world, cell, cellObj) {
        if (this.worlds[world] === undefined) {
            return false;
        }
        if (this.worlds[world][cell] === undefined) {
            return false;
        }
        var cellConfig = this.worlds[world][cell];
        if (cellConfig['image'] !== undefined) {
            this.addImage(cellConfig, cellObj);
        }
        if (cellConfig['icon'] !== undefined) {
            this.addIcon(cellConfig, cellObj);
        }
        if (cellConfig['icon2'] !== undefined) {
            this.addIcon(cellConfig['icon2'], cellObj);
        }
    };

    this.cellsChange = function(data, stage) {
        var cell = $('.battle-border .cell.x-' + data.targetX + '.y-' + data.targetY);
        var svgs = cell.find('.svg');
        if (svgs.length > 0) {
            svgs.remove();
        }
        var currentType = cell.data('class');
        var currentImage = cell.data('image');
        if (currentImage) {
            cell.removeClass(currentImage);
        }
        cell.removeClass(currentType).addClass(data.cell).data('class', data.cell);
        this.game.worlds.cell(this.game.worldType, data.cell, cell);
        MageS.Game.animations.singleAnimationFinished(stage);
    };

    this.addIcon = function(cellConfig, cellObj) {
        var icon = this.game.getIcon(cellConfig['icon']);
        var svgContainerEl = $('<div></div>').addClass('svg svg-cell').append($('<svg class="svg-icon" viewBox="0 0 512 512"></svg>'));
        if (cellConfig['d'] !== undefined) {
            var randAngle = [0, 90, 180, 270];
            var angle = randAngle[cellConfig['d']];
            svgContainerEl.find('svg')[0].style.transform = 'rotate(' + angle + 'deg)';
        }
        svgContainerEl.find('svg').append(icon.clone());
        cellObj.append(svgContainerEl);


        if (cellConfig['icon-color'] !== undefined) {
            svgContainerEl.addClass(cellConfig['icon-color']);
        }
    };

    this.addImage = function(cellConfig, cellObj) {
        cellObj.addClass('tile-image ' + cellConfig['image']).data('image', cellConfig['image']);
        if (cellConfig['d'] !== undefined) {
            var randAngle = [0, 90, 180, 270];
            var angle = randAngle[cellConfig['d']];
            cellObj[0].style.transform = 'rotate(' + angle + 'deg)';
        }
    };


};

 
 /**
 * Created by Ilya Rubinchik (ilfate) on 08/04/16.
 */




MageS.Objects = function (game) {
    this.game = game;

    this.drawObject = function(object, x, y, target) {
        if (!target) {
            target = '.battle-field.current';
        }
        var temaplate = $('#template-object').html();
        Mustache.parse(temaplate);
        var addClass = '';
        if (object.viewData.class !== undefined) {
            addClass = object.viewData.class;
        }
        var rendered = Mustache.render(temaplate, {'id': object.id, 'type':object.type, 'addClass' : addClass});
        var obj = $(rendered);
        var icon = $(this.game.svg).find('#' + object.config.icon + ' path');
        obj.find('svg').append(icon.clone());
        if (object.config.iconColor !== undefined) {
            obj.find('.svg').addClass(object.config.iconColor);
        }
        $(target + ' .cell.x-' + x + '.y-' + y).append(obj);
        if (object.config.centered !== undefined) {
            obj.addClass('centered');
        }
        if (object.config.morfIcon !== undefined && object.config.morfIcon) {
            this.morfObjectIcon(obj, object.config.morfIcon, object.config.icon);
        }

        this.appendAnimations(object.config.icon, obj);
        return obj;
    };
    this.morfObjectIcon = function(obj, morf, iconName) {
        switch (iconName) {
            case 'icon-water-huracane':
                switch(morf) {
                    case 'lightBlue':
                        info(obj);
                        obj.find('svg .blue-wave').css('fill', MageS.Game.color.lightBlue);
                        // obj.find('svg .head').css('fill', '#bab');
                        break;
                }
                break;
        }
    };

    this.appendAnimations = function(icon, obj) {

        switch (icon) {
            case 'icon-water-huracane':
                //this.spinObject(config.id, '.rotateble');
                var el = obj.find('.rotateble')
                new mojs.Tween({
                    repeat:   999,
                    delay:    10,
                    duration: 1500,
                    onUpdate: function (progress) {
                        var normalProgression = progress * 360;
                        el[0].style.transform = 'rotate(' + (normalProgression) + 'deg)';
                        el[1].style.transform = 'rotate(' + (-normalProgression) + 'deg)';
                        el[2].style.transform = 'rotate(' + (normalProgression) + 'deg)';
                    }
                }).run();
                break;
        }
    };
    this.spinObject = function(id, selector) {
        info('spinning object');
        var object = $('.battle-border .object.id-' + id);
        if (object.length == 0) return;
        var duration = 1000;
        object.find(selector).each( function() {
            MageS.Game.monimations.rotate($(this), 0, 360, duration, false, false, function(){ })
        });
        setTimeout(function(){ MageS.Game.objects.spinObject(id, selector)}, duration);
    };

    this.activate = function (data, stage) {
        switch(data.action) {
            case 'doorOpen':
                var door = $('.object.id-' + data.object);
                door.addClass('openDoor');
                setTimeout(function() {MageS.Game.animations.singleAnimationFinished(stage);}, 500);
                break;
            case 'doorClose':
                var door = $('.object.id-' + data.object);
                door.removeClass('openDoor');
                setTimeout(function() {MageS.Game.animations.singleAnimationFinished(stage);}, 500);
                break;
            case 'bombTrigger':
                var options = {'marginLeft' : data.targetX, 'marginTop' : data.targetY};
                MageS.Game.spells.fire.blastSunRing('color-red-bright', options);
                setTimeout(function() {
                    MageS.Game.spells.fire.blastSunRing('color-yellow', options);
                }, 100);
                setTimeout(function() {
                    MageS.Game.spells.fire.blastSunRing('color-white', options);
                }, 200);
                setTimeout(function() {MageS.Game.animations.singleAnimationFinished(stage);}, 500);
                break;
            case 'wallExplode':
                var icon = 'icon-wall-particle-';
                var options = {
                    time:400,
                    startRandomRange:MageS.Game.cellSize * MageS.Game.rem,
                    randomRange:4 * MageS.Game.cellSize * MageS.Game.rem,
                    scale:0.25, rotate:true};
                for (var i = 0; i < 15; i ++) {
                    MageS.Game.spells.moveIcon(icon + ((i % 4) + 1), 'color-grey', data.targetX, data.targetY, data.targetX, data.targetY, options);
                }
                MageS.Game.monimations.camShake('X', 300, 6, {});
                setTimeout(function() {MageS.Game.animations.singleAnimationFinished(stage);}, 400);
                break;
            case 'fountainHeal':
                var options = {beamWidth:20, 'delete':true};

                var colors = [ '#529BCA', '#37A4F9', '#ffffff' ];
                var color = '';
                var lines = [
                    'icon-bullet-line-small-curve-right', 'icon-bullet-line-small-curve-left', 'icon-bullet-line', 'icon-bullet-sinus'
                ];
                var line = '';
                for (var i = 0; i < 10; i ++) {
                    color = array_rand(colors);
                    line = array_rand(lines);
                    MageS.Game.spells.beam(
                        data.targetX + (Math.random() * 0.5) - 0.25,
                        data.targetY + (Math.random() * 0.5) - 0.25,
                        0,
                        0,
                        color,
                        line,
                        options);
                }
                setTimeout(function() {MageS.Game.animations.singleAnimationFinished(stage);}, 500);
                break;
            case 'lightingZap':
                //var screenOptions = {color:'#000', 'delete':true, 'duration': 200, deleteDelay:300, deleteDuration:200};
                //this.spells.addScreen(screenOptions);
                var icons = ['icon-bullet-lightning', 'icon-bullet-lightning-2'];
                var options = {
                    // 'moveLeft': ((0.5 + data.targetX) * MageS.Game.cellSize) + 'rem',
                    // 'moveTop': ((0.5 + data.targetY) * MageS.Game.cellSize) + 'rem',
                    'time': 0.1,
                    'beamWidth': 10,
                    'segment1': ["100%", "100%"],
                    'segment2': ["0%", "100%"],
                    'delete':true,
                    'delay': 100,
                    'yesIWantToHaveBlinkBug': true,
                };
                // MageS.Game.monimations.camShake('Y', 200, 8, 300, false, {el:$('body')});
                var icon = '';
                setTimeout(function() {
                    for (var i = 0; i < data.targets.length; i++) {
                        icon = array_rand(icons);
                        MageS.Game.spells.beam(data.centerX, data.centerY, data.targets[i][0], data.targets[i][1], '#FFF', icon, options);
                    }
                }, 300);
                setTimeout(function() {MageS.Game.animations.singleAnimationFinished(stage);}, 500);
                break;
        }
    };

    this.move = function(data, stage) {

        var object = $('.battle-field.current .object.id-' + data.id);
        if (object.length < 1) {
            info('object with ID = ' + data.id + ' was not on the map');
            
            // ok we don't have that unit at all.
            object = this.game.objects.drawObject(data.data, data.oldX, data.oldY);
            var oldX = data.oldX;
            var oldY = data.oldY;
        } else {
            var oldCell = object.parent('.cell');
            var oldX = oldCell.data('x');
            var oldY = oldCell.data('y');
        }

        var cellToGo = $('.battle-field.current .cell.x-' + data.x + '.y-' + data.y);
        $('.unit-field').append(object);
        object.css({
            'margin-left': oldX * this.game.cellSize + 'rem',
            'margin-top': oldY * this.game.cellSize + 'rem'
        });

        object.animate({
            'margin-left' : data.x * this.game.cellSize + 'rem',
            'margin-top' : data.y * this.game.cellSize + 'rem'
        }, {
            queue:false,
            duration: MageS.Game.animationTime,
            complete: function () {
                    if (cellToGo.length < 1) {
                        MageS.Game.animations.singleAnimationFinished(stage);
                        $(this).remove();
                        return;
                    }
                    $(this).css({
                        'margin-left' : '0',
                        'margin-top' : '0'
                    });
                    cellToGo.append($(this));

                    MageS.Game.animations.singleAnimationFinished(stage);
                },
            'easing': 'linear'
            });
        MageS.Game.objects.animateMove(object);

    };

    this.animateMove = function(object) {
        
    }

};

 
 /**
 * Created by Ilya Rubinchik (ilfate) on 08/04/16.
 */




MageS.Units = function (game) {
    this.game = game;

    this.drawUnit = function(unit, x, y, target) {
        // if (!target) {
        //     target = '.battle-field.current';
        // }
        var temaplate = $('#template-unit').html();
        Mustache.parse(temaplate);
        var rendered = Mustache.render(temaplate, {'id': unit.id, 'type': unit.type});
        var obj = $(rendered);
        var icons = this.game.getIcon(unit.icon);
        obj.data('icon', unit.icon);
        obj.find('svg').append(icons.clone());
        if (unit.iconColor !== undefined) { obj.find('.svg').addClass(unit.iconColor); }
        //
        if (!target) {
            this.unitToUnitField(obj, x, y);
        } else {
            obj.data('x', x);
            obj.data('y', y);
            this.unitToCell(obj, target);
        }
        if (unit.d !== undefined) {
            if ( unit.d > 0) {
                obj.find('.rotate-div')[0].style.transform = 'rotate(' + (unit.d * 90) + 'deg)';
            }
            obj.data('d', unit.d);
        }
        this.addDescription(unit, obj);
        if (unit.data.f !== undefined) {
            this.addUnitStatusIcons(obj, unit.data.f);
        }
        if (unit.morfIcon !== undefined && unit.morfIcon) {
            this.morfUnitIcon(obj, unit.morfIcon, unit.icon);
        }

        return obj;
    };

    this.unitToUnitField = function(unit, x, y) {
        unit.data('x', x);
        unit.data('y', y);
        $('.battle-border .unit-field').append(unit);
        unit.css({
            'margin-left': x * MageS.Game.cellSize + 'rem',
            'margin-top': y * MageS.Game.cellSize + 'rem'
        });
    };

    this.unitToCell = function(unit, target) {
        if (!target) {
            target = '.battle-field.current';
        }
        var x = unit.data('x');
        var y = unit.data('y');
        unit.css({
            'margin-left' : '0',
            'margin-top' : '0'
        });
        $(target + ' .cell.x-' + x + '.y-' + y).append(unit);
    };
    this.allToCell = function(mark) {
        $('.battle-border .unit-field .unit').each(function() {
            if (mark) {
                $(this).addClass(mark);
            }
            MageS.Game.units.unitToCell($(this));
        })
    };
    this.allBackToField = function() {
        $('.battle-field.current .unit').each(function() {
            var unit = $(this);
            if (unit.hasClass('toDelete')) {
                unit.remove();
            } else {
                MageS.Game.units.unitToUnitField(unit, unit.data('x'), unit.data('y'));
            }
        });
    };
    
    this.morfUnitIcon = function(obj, morf, iconName) {
        switch (iconName) {
            case 'icon-spider-2':
                switch(morf) {
                    case 'baby':
                        obj.find('svg .body').css('fill', '#aaa');
                        obj.find('svg .head').css('fill', '#bab');
                        break;
                }
                break;
        }   
    };
    this.addDescription = function(unit, unitObject) {
        var temaplate = $('#template-unit-tooltip').html();
        Mustache.parse(temaplate);

        var rendered = Mustache.render(temaplate, {'id': unit.id, 'name': unit.name,
            'description' : unit.description, 'health': unit.data.health, 'maxHealth': unit.maxHealth
        });
        var obj = $(rendered);
        $('.tooltip-unit-area').append(obj);
        if (this.game.device == 'pc') {
            unitObject.on({
                'mouseenter': function () {
                    var id = $(this).data('id');
                    $('.tooltip-unit-area .unit-tooltip.id-' + id).addClass('hover');
                },
                'mouseleave': function () {
                    var id = $(this).data('id');
                    $('.tooltip-unit-area .unit-tooltip.id-' + id).removeClass('hover');
                }
            });
        } else {
            unitObject.on({

                'click': function () {
                    MageS.Game.units.mobileUnitClick($(this));
                }
            });
        }
    };
    
    this.moveUnit = function(data, stage) {
        var unit = $('.battle-border .unit-field .unit.id-' + data.id);
        if (unit.length < 1) {
            info('unit with ID = ' + data.id + ' was not on the map');
            info(data);
            var unit2 =  $('.unit.id-' + data.id);
            if (unit2.length) {
                info('Animation unit is there... but not at right place...');
                info(unit2);
            }
            // ok we don't have that unit at all.
            var unit = this.drawUnit(data.data, data.oldX, data.oldY);
        }

        // var cellToGo = $('.battle-field.current .cell.x-' + data.x + '.y-' + data.y);
        // $('.unit-field').append(unit);
        // unit.css({
        //     'margin-left': oldX * this.game.cellSize + 'rem',
        //     'margin-top': oldY * this.game.cellSize + 'rem'
        // });
        unit.animate({
            'margin-left' : parseInt(data.x) * this.game.cellSize + 'rem',
            'margin-top' : parseInt(data.y) * this.game.cellSize + 'rem'
        }, {
            duration : MageS.Game.animations.animationTime,
            'complete': (function () {
                    $(this).data('x', data.x)
                        .data('y', data.y);
                    if (Math.abs(data.x) > MageS.Game.fieldRadius || Math.abs(data.y) > MageS.Game.fieldRadius) {
                        $(this).remove();
                    }
                    // if (cellToGo.length < 1) {
                    //     MageS.Game.animations.singleAnimationFinished(stage);
                    //     $(this).remove();
                    //     return;
                    // }
                    // $(this).css({
                    //     'margin-left' : '0',
                    //     'margin-top' : '0'
                    // });
                    // cellToGo.append($(this));

                    MageS.Game.animations.singleAnimationFinished(stage);
                }
            )});
        MageS.Game.units.animateMove(unit);
    };

    this.mobileUnitClick = function(el) {
        MageS.Game.inventory.showInventory();
        var id = el.data('id');
        var tooltip = $('.tooltip-unit-area .unit-tooltip.id-' + id);
        if (tooltip.hasClass('hover')) {
            MageS.Game.spellcraft.hideShadow();
        } else {
            MageS.Game.spellcraft.showShadow(function() { MageS.Game.units.mobileUnitClick(el); });
        }
        tooltip.toggleClass('hover');
    };

    this.animateMove = function(unit) {
        var iconName = unit.data('icon');
        switch (iconName) {
            case 'icon-spider-2':
                this.spiderAnimateMove(unit);
                break;
        }
    };

    this.meleeAttack = function(data, container, attackId, stage) {
        var unit = $('.battle-border .unit.id-' + data.attackerId);
        var iconName = unit.data('icon');

        switch (iconName) {
            case 'icon-spider-2':
                this.spiderAnimateMelee(unit, data, container);
                break;
            case 'icon-mouse-1':
                this.mouseAnimateMelee(unit, data, container);
                break;
        }

        setTimeout(function(){
            MageS.Game.attacks.finishAttack(attackId, stage);
        }, 1000);
    };

    this.rotateUnitToTarget = function (unit, data) {
        var calculations = this.game.spells.getDistanceBetweenTwoDots(data.fromX, data.fromY, data.targetX, data.targetY);
        var angleTo = calculations[1] + 90;
        var currentAngle = unit.data('d') * 90;
        if (angleTo - currentAngle > 180) {
            angleTo -= 360;
        } else if (currentAngle - angleTo > 180) {
            angleTo += 360;
        }
        unit.find('.rotate-div').animateRotate(currentAngle, angleTo , 150);
        unit.data('attackAngle' , angleTo);
    };
    this.rotateUnitBack = function (unit) {
        var currentD = unit.data('d');
        var angleFrom = unit.data('attackAngle');
        unit.find('.rotate-div').animateRotate(angleFrom, currentD * 90, 150);
        unit.data('attackAngle', '');
    };

    this.moveBodyPartForAttack = function(el, moveDistance, scale, options) {
        var timeoutIn = 150;
        var timeoutOut = 650;
        var durationIn = 500;
        var durationOut = 200;
        setTimeout(function(){
            el.animate({ whyNotToUseANonExistingProperty: 100 }, {
                step: function(now,fx) {
                    var k = now / 100;
                    $(this)[0].style.transform = 'translateY(' + (k * moveDistance) + 'px) scale(' + (1 + (k * scale)) + ')'
                },
                duration:durationIn, easing:'easeOutBounce', queue:false
            });
        }, timeoutIn);
        setTimeout(function(){
        el.animate({ whyNotToUseANonExistingProperty: 100 }, {
            step: function(now,fx) {
                var k = now / 100;
                $(this)[0].style.transform = 'translateY(' + (moveDistance - (k * moveDistance)) + 'px) scale(' + (1 + scale - (k * scale)) + ')'
            },
            duration:durationOut, easing:'linear', queue:false
        });
        }, timeoutOut);
    };

    this.spiderAnimateMove = function(unit) {
        var group1 = unit.find('.group-leg-1');
        group1.each(function(){
            MageS.Game.monimations.swing($(this), 20, 350);
        })
    };
    
    this.spiderAnimateMelee = function(unit, data, container) {
        this.rotateUnitToTarget(unit, data);
        var heads = unit.find('.head,.eyes');
        var body = unit.find('.body');
        var leg = unit.find('.leg');
        var slash = this.game.spells.createIcon('icon-claw-slashes', 'color-white');
        container.append(slash);
        slash[0].style.transform = 'rotate(' + (unit.data('attackAngle') - 90) + 'deg)';
        slash.css({opacity:0});
        this.moveBodyPartForAttack(heads, -100, 0.25, {});
        this.moveBodyPartForAttack(body, -50, 0.25, {});
        this.moveBodyPartForAttack(leg, -30, 0, {});
        setTimeout(function(){
            slash.animate({opacity:1}, {duration:200,easing:'easeInExpo', complete:function(){
                var that = $(this);
                setTimeout(function() {
                    that.remove();
                }, 100);
            }});
        }, 450);
        setTimeout(function(){
            MageS.Game.units.rotateUnitBack(unit);
        }, 850);
    };

    this.mouseAnimateMelee = function(unit, data, container) {
        this.rotateUnitToTarget(unit, data);
        var heads = unit.find('.head,.eyes');
        var body = unit.find('.body');
        var ears = unit.find('.ears');
        var slash = this.game.spells.createIcon('icon-claw-slashes', 'color-white');
        container.append(slash);
        slash[0].style.transform = 'rotate(' + (unit.data('attackAngle') - 90) + 'deg)';
        slash.css({opacity:0});
        this.moveBodyPartForAttack(heads, -100, 0.25, {});
        this.moveBodyPartForAttack(ears, -90, 0.25, {});
        this.moveBodyPartForAttack(body, -50, 0.25, {});
        setTimeout(function(){
            slash.animate({opacity:1}, {duration:200,easing:'easeInExpo', complete:function(){
                var that = $(this);
                setTimeout(function() {
                    that.remove();
                }, 100);
            }});
        }, 450);

        setTimeout(function(){
            MageS.Game.units.rotateUnitBack(unit);
        }, 850);
    };

    this.unitSpawn = function(data, stage) {
        var icon = 'icon-bullet-around-side-line';
        var options = {
            'moveLeft': ((0.5 + parseInt(data.targetX)) * MageS.Game.cellSize) + 'rem',
            'moveTop': ((0.5 + parseInt(data.targetY)) * MageS.Game.cellSize) + 'rem',
            'time': 0.8,
            'beamWidth': 12,
            'segment1': ["100%", "100%"],
            'segment2': ["-40%", "0%"],
            'delete': true
        };
        for (var i = 0; i < 5; i++) {
            MageS.Game.spells.beamStrike(3, 360 / 5 * i, icon, MageS.Game.color.purpleDark, options);
        }
        setTimeout(function(){
            MageS.Game.animations.singleAnimationFinished(stage);
        }, 800);
    };

    this.animateDeath = function(unit, stage) {
        var iconName = unit.data('icon');

        switch (iconName) {
            case 'icon-fireImp-1':
                this.standartDeath(unit);
                var options = {'marginLeft' : unit.data('x'), 'marginTop' : unit.data('y')};
                MageS.Game.spells.fire.blastSunRing('color-red-bright', options);
                setTimeout(function() {
                    MageS.Game.spells.fire.blastSunRing('color-yellow', options);
                }, 100);
                setTimeout(function() {
                    MageS.Game.spells.fire.blastSunRing('color-white', options);
                }, 200);
                break;
            default:
                this.standartDeath(unit);
        }

        setTimeout(function(){
            MageS.Game.animations.singleAnimationFinished(stage);
        }, 500);
    };
    
    this.standartDeath = function(unit) {
        unit.animate({
            'opacity': 0
        }, {
            duration: 1000,
            'complete': (function () {
                    $(this).remove();
                }
            )
        });
    };

    this.addUnitStatusIcons = function(unit, flags) {
        this.addFlag(unit, flags);
    };

    this.addFlag = function(el, flags) {
        var iconName = '';
        var color = '';
        var addClass = '';
        for(var flag in flags) {
            switch (flag) {
                case 'frozen':
                    iconName = 'icon-cracked-glass';
                    color = '#37A4F9';
                    break;
                case 'burn':
                    iconName = 'icon-flame-tunnel';
                    color = '#FF8360';
                    addClass = 'under';
                    break;
                case 'web':
                    iconName = 'icon-spider-web';
                    color = '#FFF';
                    break;
                case 'quicksand':
                    iconName = 'icon-sand';
                    color = MageS.Game.color.sand;
                    break;
                case 'stoned':
                    iconName = 'icon-stoned';
                    color = MageS.Game.color.grey;
                    break;
                default :
                    info('Flag "' + flag + '" is not implemented');
                    continue;
                    break;
            }

            var div = $('<div class="fuckthisshit svg flag-' + flag + ' ' + addClass + ' unit-status"><svg viewBox="0 0 512 512"></svg></div>');
            var icon = $(this.game.svg).find('#' + iconName + ' path').css({'fill': color});
            div.find('svg').append(icon.clone());
            el.prepend(div);
        }
    }

};

 
 /**
 * Created by Ilya Rubinchik (ilfate) on 08/04/16.
 */




MageS.Mage = function (game) {
    this.game = game;
    this.bind = [];

    this.cantMoveTill = false;

    this.moveStarted = false;
    this.moveLoaded = false;
    this.moveFinished = false;
    this.moveStage = false;
    this.beforeMoveD = false;

    this.drawMage = function(mageConf) {
        var temaplate = $('#template-mage').html();
        Mustache.parse(temaplate);
        var rendered = Mustache.render(temaplate, {'d': mageConf.d});
        var obj = $(rendered);
        var icons = this.game.getIcon('icon-mage-1');
        info(icons);
        obj.find('svg').append(icons.clone());
        // $(this.game.svg).find('#icon-mage-1 path').each(function() {
        //     obj.find('svg').append($(this).clone());
        // });
        obj.animateRotate(0, mageConf.d * 90, 10);

        $('.mage-container').prepend(obj);
        if (mageConf.flags) {
            this.addMageStatus(mageConf.flags);
        }
        if (mageConf.firstTutorial !== undefined) {
            this.tutorialFirstMessage()
        }
    };
    
    this.moveMage = function(data, stage) {
        var newBattleField = $('<div class="battle-field new"></div>');
        for (var y in data.map) {
            for (var x in data.map[y]) {
                this.game.drawCell(data.map[y][x], x, y, newBattleField);
            }
        }

        $('.battle-border').append(newBattleField);
        for(var y in data.objects) {
            for(var x in data.objects[y]) {
                this.game.objects.drawObject(data.objects[y][x], x, y, '.battle-field.new');
            }
        }
        $('.tooltip-unit-area .unit-tooltip').remove();
        for(var y in data.units) {
            for(var x in data.units[y]) {
                this.game.units.drawUnit(data.units[y][x], x, y, '.battle-field.new');
            }
        }
        if (data.force !== undefined || data.bigMove !== undefined) {
            var newX = data.mage.x;
            var newY = data.mage.y;
            var oldX = data.mage.was.x;
            var oldY = data.mage.was.y;
            var baseMargin = this.game.fieldRadius * this.game.cellSize;
            var animateTime = this.game.animationTime;
            var dX = Math.abs(newX - oldX);
            var dY = Math.abs(newY - oldY);
            var dSum = dX + dY;
            if (dSum > 1) { animateTime = animateTime * 2; }
            newBattleField.css({
                'margin-left': baseMargin + (newX - oldX) * this.game.cellSize + 'rem',
                'margin-top': baseMargin + (newY - oldY) * this.game.cellSize + 'rem'
            });
            newBattleField.animate({
                'margin-left': baseMargin + 'rem',
                'margin-top': baseMargin + 'rem'
            }, {'duration': animateTime});
            MageS.Game.mage.moveFinished = false;
            this.startMove(oldX - newX, oldY - newY);
        }
        // if (data.bigMove !== undefined) {
        //
        // }


        // newBattleField.css({
        //     'margin-left': baseMargin + (newX - oldX) * this.game.cellSize + 'rem',
        //     'margin-top': baseMargin + (newY - oldY) * this.game.cellSize + 'rem'
        // });
        // var animateTime = this.game.animationTime;
        // var dX = Math.abs(newX - oldX);
        // var dY = Math.abs(newY - oldY);
        // var dSum = dX + dY;
        // if (dSum > 1) { animateTime = animateTime * 2; }

        // this.rotateTorso(animateTime, 2);
        // newBattleField.animate({
        //     'margin-left': baseMargin + 'rem',
        //     'margin-top': baseMargin + 'rem'
        // }, {'duration': animateTime});
        // var that = this;
        // $('.battle-field.current').animate({
        //     'margin-left': baseMargin - (newX - oldX) * this.game.cellSize + 'rem',
        //     'margin-top': baseMargin - (newY - oldY) * this.game.cellSize + 'rem'
        // }, {duration: animateTime,
        //     complete:function(){
        //         $('.battle-field.current').remove();
        //         $('.battle-field.new').removeClass('new').addClass('current');
        //         MageS.Game.units.allBackToField();
        //         MageS.Game.animations.singleAnimationFinished(stage);
        //     }});
        this.moveStage = stage;
        MageS.Game.mage.moveLoaded = true;
        if (MageS.Game.mage.moveFinished) {
            MageS.Game.mage.finishMove();
        }

    };

    this.startMove = function(x, y) {
        this.moveStarted = true;
        var baseMargin = this.game.fieldRadius * this.game.cellSize;
        
        var animateTime = this.game.animationTime;
        var dX = Math.abs(x);
        var dY = Math.abs(y);
        var dSum = dX + dY;
        if (dSum > 1) { animateTime = animateTime * 2; }
        this.rotateTorso(animateTime, 2);
        if (!this.game.spells.spellAnimationRunning) {
            this.mageMoveHands(animateTime);
        }
        MageS.Game.units.allToCell('toDelete');
        $('.battle-field.current').animate({
            'margin-left': baseMargin + x * this.game.cellSize + 'rem',
            'margin-top': baseMargin + y * this.game.cellSize + 'rem'
        }, {duration: animateTime,
            complete:function(){
                MageS.Game.mage.moveFinished = true;
                if (MageS.Game.mage.moveLoaded) {
                    MageS.Game.mage.finishMove();
                }
                // $('.battle-field.current').remove();
                // $('.battle-field.new').removeClass('new').addClass('current');
                // MageS.Game.units.allBackToField();
                // MageS.Game.animations.singleAnimationFinished(stage);
            }});
    };

    this.finishMove = function() {
        $('.battle-field.current').remove();
        $('.battle-field.new').removeClass('new').addClass('current');
        MageS.Game.units.allBackToField();
        MageS.Game.animations.singleAnimationFinished(this.moveStage);

        this.moveLoaded = false;
        this.moveFinished = false;
        this.moveStage = false;
        this.moveStarted = false;
        this.beforeMoveD = false;
    };
    
    this.cancelMove = function() {
        if (this.beforeMoveD !== false) {
            var el = $('.battle-border .mage');
            this.game.animations.rotate(
                el,
                {d: this.beforeMoveD, wasD:el.data('d')},
                false
            );
        }
        var baseMargin = this.game.fieldRadius * this.game.cellSize;
        $('.battle-field.current').animate({
            'margin-left': baseMargin + 'rem',
            'margin-top': baseMargin + 'rem'
        }, 200);
        MageS.Game.chat.dialogMessage({'targetX':0, 'targetY':0, 'message':'Wtf I just did? I can`t move there!', time:500});
    };

    this.addMageStatus = function(flags) {
        this.game.units.addFlag($('.mage-container .mage'), flags);
        for(var flag in flags) {
            switch (flag) {
                case 'web':
                    this.cantMoveTill = flags[flag];
                    break;
            }
        }
    };

    this.onLoad = function() {
        if (this.bind['onload'] !== undefined) {
            this.bind['onload']();
        }
    };

    this.tutorialFirstMessage = function() {
        this.bind['onload'] = function() {
            var text = 'You can swipe me to move!';
            if (MageS.Game.device == 'pc') {
                text = 'Move me with W A S D ';
            }
            var options = {
                time: 2000,
                direction: 2,
                message: text,
                targetX: 0,
                targetY: 0,
                noPost: true,
                delay: 1500
            };
            MageS.Game.chat.dialogMessage(options, false);
        }
    };

    this.mageMoveHands = function(duration) {
        var mageSvg = $('.battle-border .mage svg');
        var leftHand = mageSvg.find('.mage-hand-left');
        var leftHandFist = mageSvg.find('.mage-hand-left-fist');
        var rightHand = mageSvg.find('.mage-hand-right');
        var rightHandFist = mageSvg.find('.mage-hand-right-fist');
        var left = [leftHand, leftHandFist];
        var right = [rightHand, rightHandFist];
        var num = Math.floor(duration / 100);

        for (var i = 0; i < num; i++) {
            this.handSwitch(i * 100, (i%2==1) ? left : right);
        }
        setTimeout(function(){
            $('.battle-border .mage path.hand').show();
        }, duration);
    };

    this.handSwitch = function(delay, toHide) {
        setTimeout(function() {
            $('.battle-border .mage path.hand').show();
            for (var n in toHide) {
                toHide[n].hide();
            }
        }, delay);
    };

    this.rotateTorso = function(duration, amplitude) {
        var num = Math.floor(duration / 100);
        for (var i = 0; i < num; i++) {
            this.rotateTorsoSingle(i * 100, amplitude, (i%2==1) ? -1 : 1);
        }
        setTimeout(function(){
            $('.battle-border .mage path.mage-torso')[0].style.transform = 'rotate(0)';
        }, duration);
    };
    this.rotateTorsoSingle = function(delay, amplitude, direction) {
        setTimeout(function() {
            $('.battle-border .mage path.mage-torso')[0].style.transform = 'rotate(' + (amplitude * direction) + 'deg)';
        }, delay);
    };
};

 
 /**
 * Created by Ilya Rubinchik (ilfate) on 08/04/16.
 */




MageS.Admin = function (game) {
    this.game = game;
    this.isEnabled = false;
    this.actions = {};
    this.currentAction = {};
    this.actionNumber = 0;
    this.timeToLoadAjax = 1000;
    this.timeToLoadAjax2 = 5000;
    this.timeToLoadAjax3 = 30000;
    this.failedActions = 0;

    this.init = function() {
        this.isEnabled = true;
        $('.dead-mage').on('click', function() {
            $(this).next().slideToggle();
            if ($(this).hasClass('active')) {
                $(this).find('i').animateRotate(180, 0, 200, 'easeInOutQuad');
                $(this).removeClass('active');
            } else {
                // info($(this).find('svg'));
                $(this).find('i').animateRotate(0, 180, 400, 'easeInOutQuad');
                $(this).addClass('active');
            }
        });
    };
    
    this.start = function () {
        this.actions = this.game.rawData.loggedActions;
        if (!this.actions || this.actions.length == 0) {
            info ('there was no actions...');
            return;
        }
        this.performAction();
    };

    this.getNextAction = function() {
        var action = this.actions[0];
        this.actions = this.actions.slice(1);
        this.currentAction = action;
        if (action) this.actionNumber ++;
        return action;
    };
    
    this.performAction = function() {
        var action = this.getNextAction();
        if (!action) {
            info ('Preloaded actions are finished');
            setTimeout(function(){ MageS.Game.admin.loadActions();}, MageS.Game.admin.timeToLoadAjax);
            return;
        }
        action.data.fake = true;
        this.game.action(action.action, action.data);
        switch(action.action) {
            case 'spell':
                var dataObject = JSON.parse(action.data);
                var spellName = $('.spell.id-' + dataObject.id).data('spell');
                MageS.Game.spells.startCast(spellName);
                break;
        }
        setTimeout(function(){
            MageS.Game.admin.finishAction();
        }, 150);
    };
    
    this.finishAction = function () {
        this.game.callback(this.currentAction.result);
    };

    this.actionEnded = function () {
        if (!this.isEnabled) return;

        setTimeout(function(){
            MageS.Game.admin.performAction();
        }, 300);
    };

    this.loadActions = function() {
        var url = '/Spellcraft/admin/getActions/' + this.game.rawData.userId + '/' + this.game.rawData.pageTime;
        Ajax.json(url, {
             data: 'action=' + MageS.Game.admin.actionNumber,
             callBack : function(data){
                MageS.Game.admin.callback(data)
             }
        });
    };

    this.callback = function(data) {
        info(data);
        if (data && data.actions !== undefined && data.actions.length > 0) {
            this.actions = data;
            this.failedActions = 0;
            this.performAction();
        } else {
            if (data.thisWasLast !== undefined) {
                MageS.Game.chat.dialogMessage({'targetX':0, 'targetY':0, 'message':'This was last action on this page'});
                return;
            }
            this.failedActions++;
            var time = MageS.Game.admin.timeToLoadAjax2;
            if (this.failedActions > 5) {
                time = MageS.Game.admin.timeToLoadAjax3;
            }
            setTimeout(function(){ MageS.Game.admin.loadActions();}, time);
        }
    }
};

 
 /**
 * Created by Ilya Rubinchik (ilfate) on 10/04/16.
 */

MageS.Chat = function (game) {
    this.game = game;
    this.baseHeight = 0;
    this.inventorySize = 0;

    this.buildChat = function() {

        if (this.game.device == 'mobile') {
            var hammertime = new Hammer(document.getElementById('last-message'), {});
            hammertime.get('pan').set({direction: Hammer.DIRECTION_ALL});
            hammertime.get('swipe').set({direction: Hammer.DIRECTION_VERTICAL});

            hammertime.on('panstart', function (ev) { MageS.Game.chat.swipeStart(ev); });
            hammertime.on('panup', function (ev) { MageS.Game.chat.swipeUp(ev); });
            hammertime.on('pandown', function (ev) { MageS.Game.chat.swipeDown(ev); });
            hammertime.on('panend', function (ev) { MageS.Game.chat.swipeEnd(ev); });
        }
        $( window ).resize(function() { MageS.Game.chat.windowResize()});
        $( window ).bind('orientationchange', function() { MageS.Game.chat.windowResize()});
        this.windowResize();
    };

    this.windowResize = function() {
        MageS.Game.pageResize();
        var chat = $('.bottom-panel');
        var lastMessage = $('.bottom-panel .last-message');
        var chatSize = 0;
        if (this.game.device == 'mobile') {
            var rightPanel = $('.right-panel');
            var rightPanelOffset = rightPanel.offset().top;
            rightPanel.hide();
            var inventorySize = (($(document).height() - rightPanelOffset) / this.game.rem) - this.game.cellSize;
            rightPanel.show();

            $('.inventory, .spellBook, .right-panel').css({'height':inventorySize + 'rem'});
            chatSize = inventorySize;
            this.baseHeight = this.game.cellSize;
            this.inventorySize = inventorySize;
        } else {
            var distanceToBottom = $(document).height() - chat.offset().top - chat.height();
            if (distanceToBottom > 10) {
                this.baseHeight = (chat.height() + distanceToBottom - 2 ) / this.game.rem;
            }
            chatSize = 5 * this.game.cellSize;
        }
        lastMessage.height(this.baseHeight + 'rem');
        $('.chat-container').height(chatSize + 'rem');
    };

    this.hideChat = function() {
        if (this.game.device == 'mobile') {
            var bottomEl = $('.bottom-panel');
            if (bottomEl.hasClass('mobile-open')) {
                $('.bottom-panel .chat-container').hide();
                bottomEl.animate({
                    'margin-top':'0rem',
                    'height': this.baseHeight + 'rem'
                }, {'easing': 'easeOutElastic'});
                bottomEl.removeClass('mobile-open');
                $('.bottom-panel .last-message .cover .svg-icon').css({'transform': 'rotate(180deg)'});
                $('.bottom-panel .last-message .cover .middle').css({ 'opacity':0 });
            }
        }
    };
    this.showChat = function() {
        var bottomEl = $('.bottom-panel');
        if (!bottomEl.hasClass('mobile-open') && parseInt(bottomEl.height()) > this.baseHeight + this.game.rem) {
            bottomEl.addClass('mobile-open');
            var size = this.inventorySize;
            bottomEl.animate({
                'margin-top': '-' + size + 'rem',
                'height': this.baseHeight + size + 'rem'
            }, {'easing': 'easeOutElastic'});
            bottomEl.find('.chat-container').css({opacity: 1, 'overflow-y':'scroll'});
            $('.bottom-panel .last-message .cover .svg-icon').css({'transform': 'rotate(0deg)'});
            $('.bottom-panel .last-message .cover .middle').css({'opacity': 1});
        }
    };

    this.swipeStart = function(event) {
        if (!$('.bottom-panel').hasClass('mobile-open')) {
            $('.bottom-panel .chat-container').show().css({'opacity': '0'});
        }
    };
    this.swipeEnd = function(event) {
        var bottomEl = $('.bottom-panel');
        if (bottomEl.hasClass('mobile-open')) {
            this.hideChat();
        } else {
            this.showChat();
        }
    };

    this.swipeUp = function(event) {
        if ($('.bottom-panel').hasClass('mobile-open')) {
            return;
        }
        $('.bottom-panel').css({
            'margin-top':'-' + (event.distance / this.game.rem) + 'rem',
            'height': this.baseHeight + (event.distance / this.game.rem) + 'rem'
        });
        $('.bottom-panel .chat-container').css({'opacity':event.distance / 100});
        $('.bottom-panel .last-message .cover .middle').css({
            'opacity':event.distance / 50
        });
        var angle = 180 - event.distance * 2;
        if (angle >= 0) {
            $('.bottom-panel .last-message .cover .svg-icon').css({'transform': 'rotate(' + angle + 'deg)'});
        }
    };

    this.swipeDown = function(event) {
        if (!$('.bottom-panel').hasClass('mobile-open')) {
            return;
        }
        $('.bottom-panel').css({
            'margin-top':'-' + ((5 * this.game.cellSize) - (event.distance/this.game.rem)) + 'rem',
            'height': this.baseHeight + (5 * this.game.cellSize) - (event.distance / this.game.rem) + 'rem'
        });
        $('.bottom-panel .chat-container').css({'opacity': 1 - event.distance / 100});
        $('.bottom-panel .last-message .cover .middle').css({
            'opacity':1 - event.distance / 50
        });
        var angle = event.distance * 1.5;
        if (angle <= 180) {
            $('.bottom-panel .last-message .cover .svg-icon').css({'transform': 'rotate(' + angle + 'deg)'});
        }
    };

    this.postMessages = function(messages) {
        for (var i in messages) {
            var message = messages[i];
            this.postMessage(message.message, message.type, message.data);
        }
    };
    this.postMessage = function (message, type, data) {
        info(message);
        if (type === undefined) {
            type = 'chat';
        }
        if (type == 'chat') {
            var temaplate = $('#template-chat-message').html();
            Mustache.parse(temaplate);
            var rendered = Mustache.render(temaplate, {'content': message, 'type': type});
            var obj = $(rendered);
            obj.find('.text').css({'color':'#F07818'}).animate({'color':'#5E412F'});
            $('.bottom-panel .chat-container').append(obj.clone());
            $('.bottom-panel .last-message .content').html('').append(obj);

            var height = 0;
            $('.chat-container .chat-message').each(function(i, value){
                height += parseInt($(this).height());
            });

            height += '';
            $('.chat-container').animate({scrollTop: height});

        } else if (type == 'dialog') {
            info('DIALOG MESSAGE =' + message);
            if (data.x && data.y) {

            }
        }
    };

    this.dialogMessage = function(data, stage) {
        var delay = 0;
        if (data.delay !== undefined) {
            delay = data.delay;
        }
        setTimeout(function(){
            var directions = ['top', 'right', 'bottom', 'left'];
            var cell = $('.battle-border .pattern-cell.x-' + data.targetX + '.y-' + data.targetY);
            // cell.data('content', data.message);
            var direction = directions[2];
            if (data.direction !== undefined) {
                direction = directions[data.direction];
            } else if (data.targetX == data.targetY && data.targetY == 0) {
                direction = array_rand([directions[0], directions[2]]);
            } else {
                if (data.targetY > 3) { direction = directions[0]; }
                else if (data.targetY < -3) { direction = directions[2]; }
                else if (data.targetX < -3) { direction = directions[1]; }
                else if (data.targetX > 3) { direction = directions[3]; }
                else { direction = array_rand([directions[0], directions[2]]); }
            }
            var options =  {content:data.message, placement:direction, trigger:'manual'};// auto
            cell.popover(options);
            cell.popover('show');
            setTimeout(function() {
                    cell.popover('hide');
                    cell.popover('destroy');
                    if (data.noPost === undefined) {
                        MageS.Game.chat.postMessage(data.message, 'chat')
                    }
                }, data.time + 150);
            if (stage) {
                setTimeout(function () {
                    MageS.Game.animations.singleAnimationFinished(stage);
                }, data.showTime + 150)
            }
        }, delay);
    }


};

 
 /**
 * Created by Ilya Rubinchik (ilfate) on 10/04/16.
 */

MageS.Home = function (game) {
    this.game = game;
    this.mageType = '';

    this.createMageSubmitFormAction = function(){
        var name = $('#create-mage-pop-up .last-step .mage-name').val();
        var type = MageS.Game.home.mageType;
        info(name);
        if (!name || !type) {
            //display error
            return false;
        }
        Ajax.json('/Spellcraft/createMage', {
            data: 'name=' + name + '&type=' + type + '&device=' + MageS.Game.device,
            callBack : function(data){ MageS.Game.callback(data) }
        });
    };

    this.init = function() {
        $('a#mage-create-button').on('click', function () {
            MageS.Game.home.showCreateMagePopUp();
        });
        $('.player-mage-list .mage-type-select').on('click', function() {
            MageS.Game.home.mageType = $(this).data('type');
            var el = $(this).parent();
            el.append($('.player-mage-list .last-step').slideDown());
        });
        $('#create-mage-pop-up a.submit').on('click', function() {
            MageS.Game.home.createMageSubmitFormAction();
        });
        $('#create-mage-pop-up form').on('submit', function() {
            MageS.Game.home.createMageSubmitFormAction();
            return false;
        });
        $('.open-dead-info').on('click', function() {
            $(this).parents('.dead-mage').next().slideToggle();
            if ($(this).hasClass('active')) {
                $(this).find('i').animateRotate(180, 0, 200, 'easeInOutQuad');
                $(this).removeClass('active');
            } else {
                // info($(this).find('svg'));
                $(this).find('i').animateRotate(0, 180, 400, 'easeInOutQuad');
                $(this).addClass('active');
            }
        })
        $('.single-mage-type.locked').on('click', function() {
            $(this).find('.requirements').slideToggle();
        });
        $('.progress-bar.colored').each(function(){
            var color = $(this).data('color');
            $(this).css({'background-color': MageS.Game.color[color]});
        });
    };

    this.showCreateMagePopUp = function() {
        $('#create-mage-pop-up').slideDown({easing:'easeOutBounce'});
    };

    this.startAnimation = function() {
        var containerEl = $('.animation-layer');
        var size = containerEl.width() / 10 * 6;
        var base = 0;
        for (var i = 0; i < 10; i++) {
            var svgEl = $('<div></div>').width('1').height('1').css({'position': 'absolute'});
            svgEl.svg({
                onLoad: function (svg) {
                    svg.circle(0, size, 0.25 * MageS.Game.rem,
                        {fill: 'none', stroke: 'none'});
                }
            });
            MageS.Game.monimations.portalStar(svgEl, size, 0.25 * MageS.Game.rem, base, Math.random() * 1500);
            base += 36;
            containerEl.append(svgEl);
        }

    }

};

 
 /**
 * Created by Ilya Rubinchik (ilfate) on 06/11/15.
 */




MageS.Spellcraft = function (game) {
    this.game = game;
    this.craftingIsInProgress = false;
    this.spellCraftProcess = {};
    this.skweezing = {};
    this.craftAnimationsInProcess = 0;
    this.animationDestination = {};
    this.isSpellBlenderAllowed = true;
    this.isBlenderActive = false;
    this.blenderSchool = 0;
    
    this.init = function() {
        $('.craft-demo-zone .blend-spells-show-button').on('click', function(){ MageS.Game.spellcraft.showBlender()})
    }

    this.spellCrafted = function(data) {
        this.spellCraftProcess = [];
        //this.endSpellCraftAnimations();

        //this.game.spellbook.showSpellbook();

    };

    this.startSpellCraftAnimations = function () {
        // this.craftAnimationsInProcess = true;
        $('.craft-spell-overlay').hide();
        $('.craft-spell-overlay-blender').hide();
        $('.confirm-create-spell').removeClass('active');
        $('.helper-spell-craft-step-1, .helper-spell-craft-step-2, .spell-craft-info').remove();
        if (this.isBlenderActive) {
            this.hideBlender();
        }

        this.spellCraftProcess = {};

        $('.craft-demo-zone').removeClass('active').animate({
            'opacity':0
        }, {duration:1000, complete:function() {
            $(this);
        }});
        this.game.spellbook.showSpellbook();
        //if (this.game.device == 'mobile') {
            //var destinationEl = $('.interface-switch-panel .toggle-spellbook');
            $('.spellBook .spells').append('<div class="spell empty-div"></div>');
            var destinationEl = $('.spellBook .empty-div');
            if (destinationEl.length < 1) {
                destinationEl = $('.spellBook');
            }
            this.animationDestination.top = destinationEl.offset().top;
            this.animationDestination.left = destinationEl.offset().left;
            $('.spellBook .empty-div').remove();


            //var pageHeight =  $(document).height();
            //var pageWidth =  $(document).width();
            var destinations = [
                [0, -50],
                [0, -100],
                [50, -100],
                [-50, -100],
            ];
            for (var i = 0; i < 4; i++) {
                var animationEl = $('.craft-animation-item.n-' + i);
                if (animationEl.length < 1) { continue; }
                //this.craftAnimationsInProcess ++;
                var thisTop = parseInt(animationEl.css('top'));
                var thisLeft = parseInt(animationEl.css('left'));
                animationEl.animate({
                    'top': thisTop + destinations[i][1] + 'px', 'left': thisLeft + destinations[i][0] + 'px'
                }, {
                    duration: 300, queue: false, easing: 'easeInOutCirc', complete: function () {

                    }
                });
            }
        //}
        //$('.inventory .item.animation').animate({
        //    'opacity':0
        //});

    };
    this.endSpellCraftAnimations = function (data, stage) {
        for (var i = 0; i < 4; i++) {
            var animationEl = $('.craft-animation-item.n-' + i);
            if (animationEl.length < 1) { continue; }
            //this.craftAnimationsInProcess ++;
            animationEl.animate({'left': this.animationDestination.left + 'px'}, {duration: 1000, queue:false, easing:'easeInBack'});
            animationEl.animate({
                'top': this.animationDestination.top + 'px', opacity: 0.3
            }, {
                duration: 1000, easing: 'easeInOutSine', complete: function () {
                    $(this).remove();
                }
            });
        }
        setTimeout(function(){
            MageS.Game.spellcraft.craftingIsInProgress = false;
        }, 1200);
        $('.inventory,.spellBook').removeClass('craft');
        $('.inventory-shadow').animate({'opacity': 0}, {'duration': this.game.animationTime / 3,'complete':function(){
            $(this).hide();
        }});
        $('.chemical-animation').html('');
        $('.item-drop-zone').removeClass('filled');
        //$('.craft-animation-item').remove();
        this.game.inventory.turnOffFilters();
        this.game.spellbook.turnOffFilters();
        //this.game.endAction();
        MageS.Game.animations.singleAnimationFinished(stage);
    };

    this.cancelCrafting = function () {
        $('.inventory').removeClass('craft');
        MageS.Game.spellcraft.hideShadow();
        $('.item-drop-zone').removeClass('filled').removeClass('active');
        $('.craft-animation-item').remove();
        $('.craft-spell-overlay').hide();
        $('.confirm-create-spell').removeClass('active');
        $('.chemical-animation').html('');
        $('.helper-spell-craft-step-1, .helper-spell-craft-step-2, .spell-craft-info').remove();
        $('.craft-value.active').removeClass('active').html('');
        $('.craft-demo-zone').removeClass('active');
        if (this.isBlenderActive) {
            this.hideBlender();
        }

        this.spellCraftProcess = {};
        setTimeout(function(){
            MageS.Game.spellcraft.craftingIsInProgress = false;
        }, 300);

        this.game.inventory.turnOffFilters();
    };
    this.hideBlender = function() {
        this.isBlenderActive = false;
        this.blenderSchool = 0;
        this.game.spellbook.turnOffFilters();
        $('.craft-spell-overlay-blender').hide();
        $('.items-col').prepend($('.craft-demo-zone'));
        $('.spellBook').removeClass('craft');
    };


    this.showSpellCrafting = function() {
        if (this.craftingIsInProgress) {
            return;
        }
        if (this.game.device != 'pc') {
            this.game.inventory.showInventory();
        }
        this.game.spellbook.removePermanentTooltip();
        var itemsCount = 0;
        $('.inventory .item.type-ingredient .value').each(function() {
            itemsCount += 1;
        });
        if (itemsCount < 3) {
            this.game.chat.postMessage('You need more than 3 ingredients to create a spell');
            return;
        }
        this.craftingIsInProgress = true;
        $('.craft-demo-zone').addClass('active').animate({'opacity': 1});
        MageS.Game.spellcraft.showShadow(function() {
            MageS.Game.spellcraft.cancelCrafting();
        });
        $('.inventory').addClass('craft');
        MageS.Game.inventory.filterItems($('.items-filter.name-ingredient'));

        this.showSpellCraftHelperStep1();
        $('.craft-spell-overlay').show();
        if (this.isSpellBlenderAllowed) {
            setTimeout(function() {
                $('.craft-demo-zone .blend-spells-show-button').fadeIn();
            }, 600);
        }
    };
    
    this.showBlender = function () {
        this.isBlenderActive = true;
        this.game.spellbook.showSpellbook();
        this.game.spellbook.turnOffFilters();
        $('.spellBook').addClass('craft');
        $('.craft-demo-zone .blend-spells-show-button').fadeOut();
        $('.spells-col').prepend($('.craft-demo-zone'));
        // this.showSpellCraftHelperBlender();
        $('.craft-spell-overlay-blender').show();
        $('.craft-spell-overlay').hide();
        this.game.spellbook.filterAllWithValueLessThen(5);
    };

    this.blenderCheck = function(spellEl) {
        if (this.blenderSchool === 0) {
            this.blenderSchool = spellEl.data('school');
            this.game.spellbook.filterSpells($('.spell-filter.school-' + spellEl.data('school')));
            this.game.spellbook.filterAllWithValueLessThen(5);
        } else {
            if (spellEl.data('school') !== this.blenderSchool) {
                return false;
            }
        }
        var quantity = parseInt(spellEl.find('.value').html());
        if (quantity < 5) {
            return false;
        }
        return true;
    };

    this.showShadow = function(callback) {
        var shadow = $('.inventory-shadow');
        shadow.show().animate({'opacity': 0.8}, {'duration': MageS.Game.animationTime / 3})
        if (callback) {
            shadow.bind('click', callback);
        }

    };
    this.hideShadow = function() {
        var shadow = $('.inventory-shadow');
        shadow.animate({'opacity': 0}, {'duration': MageS.Game.animationTime / 3,'complete':function(){
            $(this).hide();
        }});
        shadow.unbind('click');
    };

    this.itemClick = function(itemObj) {
        if (itemObj.hasClass('type-catalyst')) {
            this.SpellCraftStep2(itemObj);
        } else if (itemObj.hasClass('type-ingredient')) {
            this.SpellCraftStep1(itemObj);
        } else if (itemObj.hasClass('spell') && this.isBlenderActive === true) {
            if (this.blenderCheck(itemObj)) {
                this.SpellCraftStep1(itemObj);
            }
        }
    };

    this.SpellCraftStep2 = function(catalystEl) {
        this.spellCraftProcess.catalyst = catalystEl;
        $('.helper-spell-craft-step-2').hide(200, function(){ $(this).remove(); });
        this.skweezing.stop();
        this.addItemToCrafting(catalystEl, true);
        setTimeout(function() {
            MageS.Game.spellcraft.createSpellAction();
        }, 1000);
    };

    this.SpellCraftStep1 = function(ingridientEl) {
        if (!this.spellCraftProcess['ingridients']) {
            this.spellCraftProcess['ingridients'] = [];
        }
        if (this.spellCraftProcess['ingridients'].length > 3) {
            return;
        }
        $('.craft-demo-zone .blend-spells-show-button').fadeOut();
        $('.helper-spell-craft-step-2 .helper-spell-craft-step-2-error').remove();
        this.spellCraftProcess['ingridients'].push(ingridientEl);
        var isLastItem = this.spellCraftProcess['ingridients'].length == 3;
        this.addItemToCrafting(ingridientEl, false);
        if (isLastItem) {
            if (this.isBlenderActive === true) {
                setTimeout(function() {
                    MageS.Game.spellcraft.createSpellAction();
                }, 1000);
            } else {
                $('.spell-craft-2').hide(200, function () { $(this).remove(); });
                $('.helper-spell-craft-step-2').hide(200, function () { $(this).remove(); });
                this.showCatalystStep();
            }
        } else {
            //ingridientEl.find('path').css({'fill': '#069E2D', transition: "2.0s"});
            var number = $('.select-mode-ingredients');
            number.html(3 - this.spellCraftProcess['ingridients'].length);
            number.css('color', '#FF8360').animate({'color' : '#FFF'});
        }
    };

    this.addItemToCrafting = function(ingridientEl, isLastItem) {
        var copyEl = ingridientEl.find('.svg').clone();
        copyEl.addClass('craft-animation-item');
        ingridientEl.before(copyEl);
        var offsetTop = ingridientEl.offset().top;
        var offsetLeft = ingridientEl.offset().left;
        $('.mage-survival').append(copyEl);

        copyEl.css({'top':offsetTop, 'left':offsetLeft});
        var i = 1;
        if (!isLastItem) {
            for (i = 1; i <= 3; i++) {
                var zoneEl = $('.zone-' + i);
                if (!zoneEl.hasClass('filled')) {
                    break;
                }
            }
        } else {
            var zoneEl = $('.chemical-animation');
            i = 0;
        }
        copyEl.addClass('n-' + i);
        var zoneSvg = zoneEl.find('.svg');
        var offsetTopZone = zoneSvg.offset().top / this.game.rem;
        var offsetLeftZone = zoneSvg.offset().left / this.game.rem;
        var cellSizeBuffer = 0.25 * this.game.cellSize;
        var cellSizeBufferX = 0;
        var cellSizeBufferY = 0;
        if (i > 1) {
            cellSizeBuffer = 0.4 * this.game.cellSize;
        }
        if (isLastItem) {
            cellSizeBuffer = 0;
            cellSizeBufferX = -0.5 * this.game.cellSize;
            cellSizeBufferY = 0.05 * this.game.cellSize;
        }
        MageS.Game.monimations.skweeze(copyEl);
        copyEl.animate({
            'top': offsetTopZone + cellSizeBuffer + cellSizeBufferY + 'rem'
        }, {duration:1000, queue:false, easing:'easeInOutCirc'});
        copyEl.animate({
            'left':offsetLeftZone + cellSizeBuffer + cellSizeBufferX + 'rem'
        }, {duration:1000, queue:false, easing:'easeOutBack', complete: function() {
              //
        }});
        zoneEl.addClass('filled');
        ingridientEl.addClass('filtered-out');

    };




    this.showSpellCraftHelperStep1 = function() {
        var temaplate = $('#template-helper-spell-craft-step-1').html();
        Mustache.parse(temaplate);
        var rendered = Mustache.render(temaplate);
        var obj = $(rendered);
        $('.craft-spell-overlay').append(obj);
    };

    this.showCatalystStep = function () {
        var temaplate = $('#template-spell-craft-catalyst').html();
        Mustache.parse(temaplate);

        var rendered = Mustache.render(temaplate, {

        });
        var obj = $(rendered);

        MageS.Game.inventory.filterItems($('.items-filter.name-catalyst'));

        $('.craft-spell-overlay').append(obj);
        var createButton = $('.confirm-create-spell');
        createButton.addClass('active');
        this.game.monimations.blastInScale(createButton, 1.33);
        createButton.on('click', function(){
            MageS.Game.spellcraft.createSpellAction();
        });
        var svgEl = $('<div></div>').addClass('svg');
        $('.chemical-animation').append(svgEl);
        svgEl.svg({
            onLoad: function (svg) {
                svg.circle(0, 0, 1.2 * MageS.Game.rem,
                    {fill: 'none', stroke: '#fff',strokeWidth: 0.1 * MageS.Game.rem});
            }
        });
        var svg = svgEl.find('svg').width('1').height('1');
        this.skweezing = MageS.Game.monimations.skweezeSlow(svg);
    };

    this.createSpellAction = function()
    {
        var items = [];
        for(var i in this.spellCraftProcess.ingridients) {
            items.push(this.spellCraftProcess.ingridients[i].data('id'))
        }
        if (this.spellCraftProcess.catalyst !== undefined) {
            items.push(this.spellCraftProcess.catalyst.data('id'))
        }
        var isBlender = this.isBlenderActive;
        this.startSpellCraftAnimations();
        var data = '{"ingredients": ["' + items[0] + '","' + items[1] + '","' + items[2] ;
        if (items[3] !== undefined) {
            data += '","' + items[3]
        }
        data +=  '"]';
        if (isBlender === true) {
            data +=  ',"blender":true';
        }
        data +=  '}';
        this.game.action('craftSpell', data);
    };

    this.showSpellCraftInfo = function() {
        var temaplate = $('#template-spell-craft-info').html();
        Mustache.parse(temaplate);

        var stats = {
            //'usagesMin':0,
            //'usagesMax':0,
            //'spell':0,
            //'school':{},
            //'cooldown':{},
        };
        //var carrier = this.game.inventory.items[this.spellCraftProcess.carrier.data('id')];
        //var usagesArr = carrier.stats.usages.split('-');
        //stats.usagesMin = usagesArr[0];
        //stats.usagesMax = usagesArr[1];
        var items = [];
        for(var i in this.spellCraftProcess.ingridients) {
            items.push(this.game.inventory.items[this.spellCraftProcess.ingridients[i].data('id')]);
        }
        for (var i in items) {
            var item = items[i];
            //if (item.stats.spell !== undefined) {
            //    stats.spell += parseInt(item.stats.spell);
            //}
            //if (item.stats.school !== undefined) {
            //    stats.isSchool = true;
            //    for(var schoolName in item.stats.school) {
            //        if (stats.school[schoolName] === undefined) {
            //            stats.school[schoolName] = 0;
            //        }
            //        stats.school[schoolName] += item.stats.school[schoolName];
            //    }
            //}
            //if (item.stats.cooldown !== undefined) {
            //    stats.isCooldown = true;
            //    if (stats.cooldown.min === undefined) {
            //        stats.cooldown.min = 0;
            //    }
            //    if (stats.cooldown.max === undefined) {
            //        stats.cooldown.max = 0;
            //    }
            //    stats.cooldown.min += parseInt(item.stats.cooldown.min);
            //    stats.cooldown.max += parseInt(item.stats.cooldown.max);
            //}

        }
        //if (stats.isSchool !== undefined) {
        //    var schools = [];
        //    for(var schoolName in stats.school) {
        //        schools.push({'name':schoolName,'value':stats.school[schoolName]});
        //    }
        //    stats.school = schools;
        //}
        var rendered = Mustache.render(temaplate, {
            'stats': stats
        });
        var obj = $(rendered);
        var craftItemsEl = obj.find('.craft-items');
        var itemsNum = 0
        for (var i in items) {
            // copy item
            if (craftItemsEl.find('.id-' + items[i].id).length > 0) continue;
            itemsNum++;
            var newItem = $('.inventory .item.id-' + items[i].id).clone();
            newItem.removeClass('filtered-out').find('.value').remove();
            newItem.find('.craft-value').css({'background-color': '#529BCA'});
            var craftValueEl = newItem.find('.craft-value');
            if (parseInt(craftValueEl.html()) == 1) {
                craftValueEl.remove();
            }
            craftItemsEl.append(newItem);
            this.game.inventory.bindItemTooltip(newItem);
            newItem.find('path').css({'fill': '#FFF'});
        }
        craftItemsEl.css('width', itemsNum * this.game.itemSize + 'rem');
        $('.craft-spell-overlay').append(obj);
        var height = this.game.mageInventorySize;
        if (this.game.device == 'mobile') {
            height = this.game.mageMobileInventorySize;
        }
        obj.animate({'height': height + 'rem'}, {'duration':this.game.animationTime, 'easing':'easeInCirc'});
        $('.confirm-create-spell').on('click', function(){
            MageS.Game.spellcraft.createSpellAction();
        });
    };
};

 
 /**
 * Created by Ilya Rubinchik (ilfate) on 06/11/15.
 */




MageS.Monimations = function (game) {
    this.game = game;

    this.extremeInElasticOutEasing = mojs.easing.path('M0,100 C50,100 50,100 50,50 C50,-15.815625 53.7148438,-19.1218754 60.4981394,0 C62.2625924,4.97393188 66.4286578,6.07928485 68.3303467,0 C71.3633751,-6.23011049 74.5489919,-1.10166123 75.7012545,0 C79.6946191,3.60945678 84.2063904,-0.104182975 84.2063905,0 C87.5409362,-2.25875668 90.4589294,-0.0327241098 93.4950242,0 C97.3271182,0.20445262 100,-0.104182352 100,0');
    //this.extremeInOutEasing = mojs.easing.path('M0,100 C50,100 50,100 50,50 C50,0 50,0 100,0');
    //this.fastSpin = mojs.easing.path('M 1.2711864,1.6949153 C 45.471519,8.8882369 41.125196,74.897877 49.035199,100.42373 57.256112,75.166388 55.374514,8.389801 100,0');
    this.parabola = mojs.easing.path('M -4.0677966e-8,0.42372886 C 50.556265,0.4136606 0.87095901,99.897877 49.035199,100.42373 99.628993,100.59012 50.713497,0.33895357 100,0');
    this.singlePeak = mojs.easing.path('M 0,100 C 10.074957,75.575965 59.597896,94.558365 61.187447,5.4986503 61.889257,29.132172 84.521141,25.04019 100,25');
    this.bounce50 = mojs.easing.path('M 0,50 C 5.3102312,37.282606 2.5221993,12.853007 11.47837,12.648512 21.89607,12.410646 14.728785,69.440119 25.730114,69.491526 32.1567,70.369873 28.768715,24.96061 37.76202,25.02908 c 6.616381,0.05037 4.34318,33.035725 11.476824,33.230797 2.842319,0.07772 9.484178,-20.527049 18.631075,-18.920776 C 77.550759,41.039138 84.713696,50.105127 100,50');
    this.wave50 = mojs.easing.path('M 0,50 C 0.07849772,36.786 7.8365117,25.510818 20.649999,25.43824 72.008172,25.14734 27.752226,74.270293 75.305916,73.840196 91.127102,74.004292 100.57868,60.132927 100,50');
    this.scaleInIntencePath = mojs.easing.path('M 0,100 C 5.3102312,87.282606 2.5221993,12.853007 11.47837,12.648512 21.89607,12.410646 14.728785,69.440119 25.730114,69.491526 32.1567,70.369873 28.768715,24.96061 37.76202,25.02908 c 6.616381,0.05037 4.34318,33.035725 11.476824,33.230797 2.842319,0.07772 9.484178,-20.527049 18.631075,-18.920776 C 77.550759,41.039138 84.713696,50.105127 100,50');
    this.normalProgressionPath = mojs.easing.path('M 0,100 C 12.100531,70.665506 7.5311473,0.24009095 100,0');

    this.spinItem = function(el) {
        new mojs.Tween({
            repeat:   0,
            delay:    10,
            duration: 1000,
            onUpdate: function (progress) {
                var extremeInOutProgress = MageS.Game.monimations.parabola(progress) * 2 - 1;
                el[0].style.transform = 'scaleX(' + extremeInOutProgress + ')';
            }
        }).run();
    };

    this.bounce = function(el, effect) {
        if (!effect) {
            effect = 2;
        }
        new mojs.Tween({
            repeat:   0,
            delay:    10,
            duration: 1000,
            onUpdate: function (progress) {
                var extremeInOutProgress = MageS.Game.monimations.bounce50(progress) * effect;
                el[0].style.transform = 'scale(' + extremeInOutProgress + ')';
            }
        }).run();
    };

    this.scaleIn = function(el, duration) {
        if (!duration) {
            duration = 1500;
        }
        el[0].style.transform = 'scale(0)';
        new mojs.Tween({
            repeat:   0,
            delay:    10,
            duration: duration,
            onUpdate: function (progress) {
                var extremeInOutProgress = (MageS.Game.monimations.scaleInIntencePath(progress) * 3) - 0.5;
                el[0].style.transform = 'scale(' + (extremeInOutProgress) + ')';
            },
            onComplete: function () {
                el[0].style.transform = '';
            }
        }).run();
    }

    this.scaleInWithRotate = function(el) {
        el[0].style.transform = 'scale(0)';
        new mojs.Tween({
            repeat:   0,
            delay:    10,
            duration: 1500,
            onUpdate: function (progress) {
                var extremeInOutProgress = MageS.Game.monimations.scaleInIntencePath(progress) * 2;
                var normalProgression = MageS.Game.monimations.normalProgressionPath(progress);
                el[0].style.transform = 'scale(' + (extremeInOutProgress) + ') rotate(' +  (720 * normalProgression) + 'deg)';
            }
        }).run();
    };

    this.blastInScale = function(el, scale, callback, duration) {
        if (!duration) {
            duration = 500;
        }
        if (!scale) {
            scale = 1.33;
        }
        el[0].style.transform = 'scale(0)';
        new mojs.Tween({
            repeat:   0,
            delay:    10,
            duration: duration,
            onUpdate: function (progress) {
                var singlePeak = MageS.Game.monimations.singlePeak(progress) * scale;
                //var normalProgression = MageS.Game.monimations.normalProgressionPath(progress);
                el[0].style.transform = 'scale(' + (singlePeak) + ')';
            }, onComplete: callback
        }).run();
    };
    this.rotate = function (el, base, grad, duration, isReverce, easing, callback) {
        new mojs.Tween({
            repeat:   0,
            delay:    10,
            duration: duration,
            onUpdate: function (progress) {
                var normalProgression = progress;
                if (easing) {
                    normalProgression = easing(progress);
                }
                normalProgression = normalProgression * grad - grad;
                if (isReverce) {
                    normalProgression *= -1;
                }
                el[0].style.transform = 'rotate(' + (base + normalProgression) + 'deg)';
            }, onComplete: callback
        }).run();
    };
    this.rotateWithScale = function (el,base, grad, sFrom, sTo, duration) {
        new mojs.Tween({
            repeat:   0,
            delay:    10,
            duration: duration,
            onUpdate: function (progress) {
                var normalProgression = MageS.Game.monimations.normalProgressionPath(progress) * grad - grad;
                var normalProgressionScale = sFrom +MageS.Game.monimations.normalProgressionPath(progress) * sTo;
                el[0].style.transform = 'rotate(' + (base + normalProgression) + 'deg) scale(' + ( normalProgressionScale) + ')';
            }
        }).run();
    };
    this.portalStar = function (el, cx, r, base, delay) {
        new mojs.Tween({
            repeat:   9999,
            delay:    delay,
            duration: 1500,
            onUpdate: function (progress) {
                var normalProgression = MageS.Game.monimations.normalProgressionPath(progress);
                //var normalProgressionScale = sFrom +MageS.Game.monimations.normalProgressionPath(progress) * sTo;
                //scale(' + ( 1 - normalProgression) + ')
                el.find('svg')[0].style.transform = 'rotate(' + (base - normalProgression * 60) + 'deg) ';

                el.find('circle').css({'svgR' : r - (r * normalProgression), 'svgCy' : cx - (cx * normalProgression)});
                //el.find('svg').css('margin-left', cx - (cx * normalProgression));
            }
        }).run();
    };

    this.skweeze = function(el) {
        new mojs.Tween({
            repeat:   0,
            delay:    10,
            duration: 1500,
            onUpdate: function (progress) {
                var bounce50 = MageS.Game.monimations.bounce50(progress) * 2;
                var degree = 35;
                el[0].style.transform = 'skewX(' + (bounce50 * degree - degree) + 'deg) skewY(' + (bounce50 * degree - degree) + 'deg)';
            },
            onComplete: function() {
                el[0].style.transform = '';
            }
        }).run();
    };

    this.swing = function(el, rotateAmplitude, time) { // rotate there and back
        new mojs.Tween({
            repeat:   0,
            delay:    10,
            duration: time,
            onUpdate: function (progress) {
                var wave50 = MageS.Game.monimations.wave50(progress) * 2;
                el[0].style.transform = 'rotate(' + ((wave50 - 1) * rotateAmplitude) + 'deg)';
            },
            onComplete: function() {
                el[0].style.transform = '';
            }
        }).run();
    };

    this.skweezeSlow = function(el) {
        return new mojs.Tween({
            repeat:   999,
            delay:    1,
            duration: 1500,
            onUpdate: function (progress) {
                var bounce50 = (MageS.Game.monimations.wave50(progress) / 2) + 0.75;
                el[0].style.transform = 'scaleX(' + (bounce50) + ') scaleY(' + (2 - bounce50) + ')';
            }
        }).run();
    };

    this.flame = function(el, callback) {
        return new mojs.Tween({
            repeat:   0,
            delay:    1,
            duration: 200,
            onUpdate: function (progress) {
                if (Math.random() > 0.5) return;
                //var bounce50 = (MageS.Game.monimations.wave50(progress) / 2) + 0.75;
                //var scaleX = (Math.random() * 0.4) + 0.8;
                //var scaleY = (Math.random() * 0.4) + 0.8;
                var skewX = (Math.random() * 30) - 15;
                var skewY = (Math.random() * 30) - 15;

                el[0].style.transform = 'skewX(' + (skewX) + 'deg) skewY(' + (skewY) + 'deg)';
            }, onComplete: callback
        }).run();
    };
    
    this.camShake = function (direction, duration, startAmplitude, options, callback) {
        if (!options) { options = {};}
        var el = $('.battle-border');
        if (options.el !== undefined) {
            el = options.el;
        }
        var sign = array_rand([1, -1]);
        if (!direction) { direction = 'X'; }
        if (direction !== 'X' && direction !== 'Y') {
            switch (direction) {
                case 0: case 2: direction = 'Y'; break;
                case 1: case 3: direction = 'X'; break;
            }
        }
        if (!duration) { duration = 600; }
        if (!startAmplitude) { startAmplitude = 5; }
        var delay = 0;
        if (options.delay !== undefined) {
            delay = options.delay;
        }
        return new mojs.Tween({
            repeat:   0,
            delay:    delay,
            duration: duration,
            onUpdate: function (progress) {
                var amplitude = (1 - progress) * startAmplitude;
                // var halfA = amplitude / 2;
                // var bA = amplitude * 2;
                // var skewX = (Math.random() * amplitude) - halfA;
                // var skewY = (Math.random() * amplitude) - halfA;
                var translate = amplitude * sign;
                sign *= -1;

                el[0].style.transform = 'translate' + direction + '(' + translate + 'px)';
            }, onComplete: function() {
                el[0].style.transform = '';
                if (callback) {
                    callback();
                }
            }
        }).run();
    };
    this.shake = function(el, options) {
        var delay = 0;
        var duration = 500;
        var angle = 20;
        return new mojs.Tween({
            repeat:   0,
            delay:    delay,
            duration: duration,
            onUpdate: function (progress) {
                var bounce50 = (MageS.Game.monimations.bounce50(progress) - 0.5) * 3;
                var rotate = bounce50 * angle;
                el[0].style.transform = 'rotate(' + (rotate) + 'deg)';
            }
        }).run();
    };
};

 
 /**
 * Created by Ilya Rubinchik (ilfate) on 06/11/15.
 */

function Map () {

}
Map = new Map();

$(document).ready(function() {
    if ($('body.mage-map-builder').length) {
        Map.Game = new Map.Game();
        Map.Game.init();
    }
});


Map.Game = function () {
    this.width = $('body').width();
    this.height = $('body').height();
    this.cellSize = 32;
    this.yStart = 0;
    this.xStart = 0;
    this.perRow = 0;
    this.perCol = 0;
    this.fullMap = {};
    this.offsetX = 0;
    this.offsetY = 0;
    this.coordinatOffsetX = 0;
    this.coordinatOffsetY = 0;

    this.init = function() {
        $('.container.main').css({
            'padding':0, 'margin':0, 'width':'100%'
        });
        $('.map-builder .map').css({
            'width': this.width / 2,
            'margin-left': this.width / 2,
            'height': this.height / 2,
            'margin-top': this.height / 2,
            'position':'relative',
        }).addClass($('#map-name').val());
        $('.export').on('click', function() { Map.Game.export(); });
        $('.go-top').on('click', function() { Map.Game.go(0); });
        $('.go-right').on('click', function() { Map.Game.go(1); });
        $('.go-bottom').on('click', function() { Map.Game.go(2); });
        $('.go-left').on('click', function() { Map.Game.go(3); });
        this.perRow = Math.floor(this.width / this.cellSize);
        this.perCol = Math.floor(this.height / this.cellSize);
        this.yStart = Math.round(this.perCol / 2) - this.perCol;
        this.xStart = Math.round(this.perRow / 2) - this.perRow;
        if (undefined !== window.mapBuilderValue) {
            this.fullMap = mapBuilderValue;
        }
        if (undefined !== window.mapBuilderOffsetX) {
            this.offsetX = window.mapBuilderOffsetX;
        }
        if (undefined !== window.mapBuilderOffsetY) {
            this.offsetY = window.mapBuilderOffsetY;
        }
        this.xStart += this.offsetX;
        this.yStart += this.offsetY;
        info('y start = ' + this.yStart);

        for(var y = this.yStart; y < this.yStart + this.perCol - 1; y++) {
            for(var x = this.xStart; x < this.xStart + this.perRow - 2; x++) {
                var cell = $('<div></div>').addClass('cell x-' + x + ' y-'+y).css({
                    'margin-top':(y - this.offsetY) * this.cellSize + 'px',
                    'margin-left':(x - this.offsetX) * this.cellSize + 'px',
                    'width': this.cellSize + 'px',
                    'height': this.cellSize + 'px'
                });
                cell.data('x' , x);
                cell.data('y' , y);
                cell.on('click', function() {
                    Map.Game.click($(this));
                });
                if (this.fullMap[y] !== undefined && this.fullMap[y][x] !== undefined) {
                    var cellValue = this.fullMap[y][x];
                    cell.html(cellValue);
                    cell.data('value', cellValue);
                    cell.addClass(this.getfirstPartOfValue(cellValue));
                }
                $('.map-builder .map').append(cell);
            }
        }
    };

    this.click = function (el) {
        $('.map .editor').each(function() {
            Map.Game.submit($(this));
        });
        var editor = $('<form><input type="text" /></form>').addClass('editor');
        var input = editor.find('input');
        var value = el.data('value');
        if (value) {
            el.html('');
            input.val(value);
        }
        el.append(editor);
        input.width(this.cellSize).focus();
        editor.on('submit', function(){Map.Game.submit($(this)); return false;});
    }

    this.submit = function(el) {
        var text = el.find('input').val();
        info('TEXT= ' + text);
        var cell = el.parent('.cell');
        var oldValue = cell.data('value');
        if (oldValue) {
            cell.removeClass(this.getfirstPartOfValue(oldValue));
        }
        cell.html(text);
        cell.data('value', text);
        cell.addClass(this.getfirstPartOfValue(text));
    }
    this.getAll = function () {
        var data = {};
        for(var y = this.yStart; y < this.yStart + this.perCol - 1; y++) {
            for(var x = this.xStart; x < this.xStart + this.perRow - 2; x++) {
                var cell = $('.cell.x-' + x + '.y-' + y);
                var value = cell.data('value');
                if (value) {
                    if (data[y] === undefined) {
                        data[y] = {};
                    }
                    data[y][x] = value;
                }
            }
        }
        return JSON.stringify(data);
    };
    this.export = function() {
        var string = this.getAll();
        Ajax.json('/Spellcraft/mapBuilder/save', {
            data: 'name=' + $('#map-name').val() + '&map=' + string,
            callBack : function(data){ Map.Game.callback(data) }
        });
    };
    this.go = function (d) {
        var string = this.getAll();
        Ajax.json('/Spellcraft/mapBuilder/save', {
            data: 'name=' + $('#map-name').val() + '&map=' + string,
            callBack : function(data){ Map.Game.move(d) }
        });
    };
    this.getfirstPartOfValue = function(value) {
        var byUnits = value.split('-');
        if (byUnits.length > 1) {
            value = byUnits[0];
        }
        var byObjects = value.split('+');
        if (byObjects.length > 1) {
            value = byObjects[0];
        }
        return value;
    };

    this.callback = function(data) {
        info(data);
        window.location = '/Spellcraft/mapBuilder/show/' + $('#map-name').val();
    }
    this.move = function(d) {
        var x = this.offsetX;
        var y = this.offsetY;
        switch (d) {
            case 0: y -= Math.round(this.perCol / 2); break;
            case 1: x += Math.round(this.perCol / 2); break;
            case 2: y += Math.round(this.perCol / 2); break;
            case 3: x -= Math.round(this.perCol / 2); break;
        }
        window.location = '/Spellcraft/mapBuilder/' + $('#map-name').val() + '?x=' + x + '&y=' + y;
    }

};

