<?php
/**
 * TODO: Package description.
 *
 * PHP version 5
 *
 * @category
 * @package
 * @author    Ilya Rubinchik <ilfate@gmail.com>
 *
 * @license   Proprietary license.
 * @link      http://ilfate.net
 */
namespace Ilfate\MageSurvival\Generators;
use Ilfate\MageSurvival\Event;
use Ilfate\MageSurvival\Spell;
use Ilfate\MageSurvival\WorldGenerator;

/**
 * PHP version 5
 *
 * @category
 * @package
 * @author    Ilya Rubinchik <ilfate@gmail.com>
 * @license   Proprietary license.
 * @link      http://ilfate.net
 */
class WorldGeneratorTutorial extends WorldGenerator
{
    const CELL_BURNT_LANDING = 'bl';
    const CELL_FIELD_1 = 'f1';
    const CELL_FIELD_2 = 'f2';
    const CELL_FIELD_3 = 'f3';
    const CELL_STONE = 's';
    const CELL_WALL   = 'w1';
    const CELL_WALL_2 = 'w2';
    const CELL_WALL_3 = 'w3';
    const CELL_WALL_4 = 'w4';
    const CELL_WALL_5 = 'w5';
    const CELL_WALL_6 = 'w6';

    protected $cells = [
        self::CELL_BURNT_LANDING, // birnedLanding
    ];

    protected $random = [
        self::CELL_WALL,
        self::CELL_WALL,
        self::CELL_WALL,
        self::CELL_WALL,
        self::CELL_WALL_2,
        self::CELL_WALL_2,
        self::CELL_WALL_2,
        self::CELL_WALL_2,
        self::CELL_WALL_3,
        self::CELL_WALL_3,
        self::CELL_WALL_3,
        self::CELL_WALL_3,
        self::CELL_WALL_4,
        self::CELL_WALL_5,
        self::CELL_WALL_6,
    ];

    protected $notPassable = [
        self::CELL_STONE,
        self::CELL_WALL,
        self::CELL_WALL_2,
        self::CELL_WALL_3,
        self::CELL_WALL_4,
        self::CELL_WALL_5,
        self::CELL_WALL_6,
    ];

    protected static $generatorConfig = [
        'world-predefined' => true,
        'full-world' =>
            array ( 0 => array ( 0 => 'f1', 1 => 'f1', 2 => 'f1', -2 => 'f1', -1 => 'f1', ), 1 => array ( 0 => 'f1', 1 => 'f1', 2 => 'f1', -2 => 'f1', -1 => 'f1', ), 2 => array ( 0 => 'f1', 1 => 'f1', -1 => 'f1', ), 3 => array ( 0 => 'f1', ), -9 => array ( 0 => 'f1', 1 => 'f1', -1 => 'f1', ), -8 => array ( 0 => 'f1', 1 => 'f1', -1 => 'f1', ), -7 => array ( 0 => 'f1', 1 => 'f1', -1 => 'f1', ), -6 => array ( 0 => 'f1', 1 => 'f1', 2 => 'f1', -2 => 'f1', -1 => 'f1', ), -5 => array ( 0 => 'f1', 1 => 'f1', -1 => 'f1', ), -4 => array ( 0 => 'f1+50', ), -3 => array ( 0 => 'f1-2', 1 => 'f1', -1 => 'f1', ), -2 => array ( 0 => 'f1', 1 => 'f1', -1 => 'f1', ), -1 => array ( 0 => 'f1', 1 => 'f1', 2 => 'f1', -2 => 'f1', -1 => 'f1', ), -11 => array ( 0 => 'f1', 1 => 'f1', 2 => 'f1', 3 => 'f1', -3 => 'f1', -2 => 'f1', -1 => 'f1', 4 => 'f1', 5 => 'f1', -5 => 'f1', -4 => 'f1', ), -10 => array ( 0 => 'f1', 3 => 'f1', 4 => 'f1', 5 => 'f1', -5 => 'f1', -4 => 'f1', -3 => 'f1', ), -21 => array ( 0 => 'f1', ), -20 => array ( 0 => 'f1', 1 => 'f1', -1 => 'f1', ), -19 => array ( 0 => 'f1+1000', 1 => 'f1', 2 => 'f1', -2 => 'f1', -1 => 'f1', 3 => 'f1', 4 => 'f1', -4 => 'f1', -3 => 'f1', ), -18 => array ( 0 => 'f1', 1 => 'f1', -1 => 'f1', 4 => 'f1', -4 => 'f1', ), -17 => array ( 0 => 'f1', 4 => 'f1', -4 => 'f1', ), -16 => array ( 0 => 'f1+50', 4 => 'f1', -4 => 'f1', ), -15 => array ( 0 => 'f1', 4 => 'f1+50', -4 => 'f1+50', 1 => 'f1', -1 => 'f1', ), -14 => array ( 0 => 'f1+1', 1 => 'f1', 2 => 'f1', 3 => 'f1', -3 => 'f1', -2 => 'f1', -1 => 'f1', 4 => 'f1', 5 => 'f1', -5 => 'f1', -4 => 'f1', ), -13 => array ( 0 => 'f1', 3 => 'f1', -3 => 'f1', 4 => 'f1', 5 => 'f1', -5 => 'f1', -4 => 'f1', 1 => 'f1', -1 => 'f1', ), -12 => array ( 0 => 'f1', 3 => 'f1', -3 => 'f1', 4 => 'f1+1', 5 => 'f1', -5 => 'f1', -4 => 'f1+1', ), )
            ,
        'portalLocation' => ['x' => 0, 'y' => 1]
    ];

    public function init()
    {
        parent::init(); // TODO: Change the autogenerated stub
        $unit = $this->world->getUnit(0, -3);
        Event::create(Event::EVENT_UNIT_AFTER_DYING, [
                'times' => 1,
                'owner' => $unit,
                'doorX' => 0, 'doorY' => -4
            ],
            'Objects:openDoor'
        );
        $lootCoords = [
            [-4, -12],
            [4, -12],
            [0, -14],
        ];
        $doorsCoords = [
            [-4, -15],
            [4, -15],
            [0, -16],
        ];
        foreach ($lootCoords as $num => $lootCoord) {
            $object = $this->world->getObject($lootCoord[0], $lootCoord[1]);

            Event::create(Event::EVENT_MAGE_AFTER_OBJECT_ACTIVATE, [
                    'times' => 1,
                    'target' => $object,
                    'doorX' => $doorsCoords[$num][0], 'doorY' => $doorsCoords[$num][1]
                ],
                'Objects:openDoor'
            );
        }
        $this->world->setEvents(Event::export());
        $this->world->save();

        //add 1 spell
        $class = Spell::getSpellClass('fire', 'Fireball');
        if (!class_exists($class)) {
            throw new \Exception('Spell with name "Fireball" not found at "' . $class . '"' );
        }
        /**
         * @var Spell $spell
         */
        // 0 is Fireball
        // 1 is Fire school
        $spell = new $class(0, 1, ['usages' => 1]);
        $spell->generateCoolDown();
        $this->mage->addSpell($spell);
        $this->mage->save();
    }

    /**
     * @param $type
     *
     * @return string
     * @throws \Exception
     */
    public function getCellByType($type)
    {
        $cell = '';
        switch($type) {
            case WorldGenerator::CELL_TYPE_SPAWN:
                $cell = self::CELL_BURNT_LANDING;
                break;
            case WorldGenerator::CELL_TYPE_RANDOM:

                $cell = $this->random[array_rand($this->random)];
                break;
            default:
                throw new \Exception('In ' . __CLASS__ . ' cell for type "' . $type . '" is not defined');
        }
        return $cell;
    }



}