<?php
/**
 * TODO: Package description.
 *
 * PHP version 5
 *
 * @category
 * @package
 * @author    Ilya Rubinchik <ilfate@gmail.com>
 *
 * @license   Proprietary license.
 * @link      http://ilfate.net
 */
namespace Ilfate\MageSurvival\Generators;
use Ilfate\MageSurvival\Event;
use Ilfate\MageSurvival\GameBuilder;
use Ilfate\MageSurvival\Spell;
use Ilfate\MageSurvival\WorldGenerator;

/**
 * PHP version 5
 *
 * @category
 * @package
 * @author    Ilya Rubinchik <ilfate@gmail.com>
 * @license   Proprietary license.
 * @link      http://ilfate.net
 */
class WorldGeneratorTutorial extends WorldGeneratorSchool
{
    
    protected static $generatorConfig = [
        'world-predefined' => true,
        'full-world' =>
            array ( 0 => array ( 0 => 'f1', 1 => 'f3', 2 => 'f2', -2 => 'f2', -1 => 'f1', ), 1 => array ( 0 => 'f3', 1 => 'f4', 2 => 'f3', -2 => 'f1', -1 => 'f2', ), 2 => array ( 0 => 'f3', 1 => 'f4', -1 => 'f2', ), 3 => array ( 0 => 'f1', ), -11 => array ( 0 => 'f1', 1 => 'f2', 9 => 'f2', 10 => 'f3', 11 => 'f1+111', -1 => 'f3', 15 => 'f3', 16 => 'f4', 17 => 'f2', ), -10 => array ( 0 => 'f1+1000', 1 => 'f4', 2 => 'f4', 7 => 'f1', 8 => 'f1', 9 => 'f2', 10 => 'f3', 11 => 'f1+111', 12 => 'f1', 13 => 'f1', 14 => 'f1', 15 => 'f1', 16 => 'f1+1000', -2 => 'f2', -1 => 'f3', 17 => 'f3', ), -9 => array ( 0 => 'f1', 1 => 'f1+113', 9 => 'f2', 10 => 'f3', 11 => 'f1+111', -1 => 'f1+113', 15 => 'f2', 16 => 'f4', 17 => 'f2', ), -8 => array ( 0 => 'f1-2', ), -7 => array ( 0 => 'f1', 1 => 'f3', -1 => 'f4', ), -6 => array ( 0 => 'f1', 1 => 'f2', 2 => 'f4', -2 => 'f3', -1 => 'f4', ), -5 => array ( 0 => 'f1', 1 => 'f2', -1 => 'f3', ), -4 => array ( 0 => 'f1-2', ), -3 => array ( 0 => 'f1', 1 => 'f2', -1 => 'f3', ), -2 => array ( 0 => 'f1+99', 1 => 'f3', -1 => 'f4', ), -1 => array ( 0 => 'f1', 1 => 'f1+98', 2 => 'f1', -2 => 'f3', -1 => 'f1+97', ), )
            ,
        'portalLocation' => ['x' => 0, 'y' => 1],
        'dialog' => [
            'help' => [
                ['method' => 'tutorialMessage']
            ], 'turn' => [
//                1 => ['message' => 'OMG what happened to my school?? Oh I found fireball spell. Who dropped it here?'],
//                3 => ['message' => 'Where is everybody? All the teachers and students are missing!'],
//                5 => ['message' => 'Ok here is the wand of one of the teachers. She is a witch.'],
//                7 => ['message' => 'Maybe I can find her? I remember that she was living in a forest.'],
//                11 => ['message' => 'I just need to get to the portal.'],
                //100 => ['message' => 'I h.'],
            ]
        ]
    ];

    public function init()
    {
        parent::init(); // TODO: Change the autogenerated stub
        $unit = $this->world->getUnit(0, -4);
        Event::create(Event::EVENT_UNIT_BEFORE_DYING, [
                'times' => 1,
                'owner' => $unit,
                'step' => 2,
                'message' => 'Ok this thing is out of my way. But now I don`t have any more spells.'
            ],
            'General:tutorialStep'
        );
        $unit2 = $this->world->getUnit(0, -8);
        Event::create(Event::EVENT_UNIT_BEFORE_DYING, [
                'times' => 1,
                'owner' => $unit2,
                'step' => 3,
                'message' => 'I need to find out what happen in the school. Who killed everybody here.'
            ],
            'General:tutorialStep'
        );
        $object = $this->world->getObject(0, -10);
        Event::create(Event::EVENT_MAGE_AFTER_OBJECT_ACTIVATE, [
                'times' => 1,
                'target' => $object,
                'step' => 4
            ],
            'General:tutorialStep'
        );
//        $lootCoords = [
//            [-4, -12],
//            [4, -12],
//            [0, -14],
//        ];
//        $doorsCoords = [
//            [-4, -15],
//            [4, -15],
//            [0, -16],
//        ];
//        foreach ($lootCoords as $num => $lootCoord) {
//            $object = $this->world->getObject($lootCoord[0], $lootCoord[1]);
//
//            Event::create(Event::EVENT_MAGE_AFTER_OBJECT_ACTIVATE, [
//                    'times' => 1,
//                    'target' => $object,
//                    'doorX' => $doorsCoords[$num][0], 'doorY' => $doorsCoords[$num][1]
//                ],
//                'Objects:openDoor'
//            );
//        }
        $this->world->setEvents(Event::export());
        $this->world->addData('tutorialStep', 1);
        $this->world->save();

        //add 1 spell
        $class = Spell::getSpellClass('fire', 'Fireball');
        if (!class_exists($class)) {
            throw new \Exception('Spell with name "Fireball" not found at "' . $class . '"' );
        }
        /**
         * @var Spell $spell
         */
        // 0 is Fireball
        // 1 is Fire school
        $spell = new $class(0, 1, ['usages' => 1]);
        $spell->generateCoolDown();
        $this->mage->addSpell($spell);
        $this->mage->save();
    }
    
    public function onLeaveWorld()
    {
        GameBuilder::getGame()->setUserFlag('WitchForest', 'open');
    }

    public function tutorialMessage() {
        $step = $this->world->getData()['tutorialStep'];
        $message = '';
        switch($step) {
            case 1:
                $message = 'I`m locked here. Let`s use this FireBall spell to clear the path!';
                break;
            case 2:
                $message = 'I need to use three ingredients to craft new spell!';
                break;
            case 3:
                $message = 'Let`s use portal to get out of here!';
                break;
        }
        
        return $message;
    }

    public function getHelpMessageChance() {
        return 25;
    }
    public function getHelpMessageTypes() {
        return ['help'];
    }


}