<?php
/**
 * TODO: Package description.
 *
 * PHP version 5
 *
 * @category
 * @package
 * @author    Ilya Rubinchik <ilfate@gmail.com>
 * @copyright 2016 Watchmaster GmbH
 * @license   Proprietary license.
 * @link      http://www.watchmaster.de
 */
namespace Ilfate\ShipAi;

use Illuminate\Database\Eloquent\Model;

/**
 * TODO: Short description.
 * TODO: Long description here.
 *
 * PHP version 5
 *
 * @category
 * @package
 * @author    Ilya Rubinchik <ilfate@gmail.com>
 * @link      http://ilfate.net
 */
class Star extends Model
{

    const TYPE_YELLOW_DWARF = 'yellow dwarf';
    const TYPE_O_TYPE = 'O-type';
    const TYPE_BLUE_GIANT = 'Blue giant';
    const TYPE_A_TYPE = 'A-type';
    const TYPE_F_TYPE = 'F-type';
    const TYPE_K_TYPE = 'K-type';
    const TYPE_M_TYPE = 'M-type';


    protected static $starTypeChance = [
        self::TYPE_O_TYPE => 1,
        self::TYPE_A_TYPE => 20,
        self::TYPE_F_TYPE => 5,
        self::TYPE_K_TYPE => 15,
        self::TYPE_M_TYPE => 35,
        self::TYPE_YELLOW_DWARF => 19,
        self::TYPE_BLUE_GIANT => 5,
    ];



    /**
     * The database table used by the model.
     *
     * @var string
     */
    protected $table = 'sa_stars';

//    protected $saveable = ['id', 'user_id', 'name', 'data', 'resources', 'inventory', 'events'];

    public function hex()
    {
        return $this->hasOne(Hex::class, 'id', 'hex_id');
    }


    /**
     * @param $id
     *
     * @return Hex
     */
    public static function loadFull($id)
    {
        $star = self::findOrFail($id);
//        $planets = Star::where('hex_id', '=', $id)->get();
        if ($star->objects) {
            $star->objects = json_decode($star->objects, true);
//            $stars = Generator::createStarsInHex($id);
        } else {
            Generator::createStarSystem($star);
        }
        return $star;
    }

    protected function decodeObjects()
    {

    }

    public static function getRandomType()
    {
        $x = rand(1,100);
        $current = 0;
        foreach (self::$starTypeChance as $type => $chance) {
            $current += $chance;
            if ($x <= $current) {
                return $type;
            }
        }
        return self::TYPE_M_TYPE;
    }

    public function save(array $options = [])
    {
        if ($this->objects && is_array($this->objects)) {
            $this->objects = json_encode($this->objects);
        }
        return parent::save($options); // TODO: Change the autogenerated stub
    }


}