<?php
/**
 * TODO: Package description.
 *
 * PHP version 5
 *
 * @category
 * @package
 * @author    Ilya Rubinchik <ilfate@gmail.com>
 * @copyright 2016 Watchmaster GmbH
 * @license   Proprietary license.
 * @link      http://www.watchmaster.de
 */
namespace Ilfate\ShipAi;

use Illuminate\Database\Eloquent\Model;

/**
 * TODO: Short description.
 * TODO: Long description here.
 *
 * PHP version 5
 *
 * @category
 * @package
 * @author    Ilya Rubinchik <ilfate@gmail.com>
 * @link      http://ilfate.net
 */
class Location extends Model
{
    const TYPE_PLANETOID = 'planetoid';
    const TYPE_PLANET = 'planet';
    const TYPE_MOON = 'moon';
    const TYPE_SATELLITE = 'satellite';
    const TYPE_STATION = 'station';

    const PLANET_TYPE_GAS_GIANT = 'Gas giant';
    const PLANET_TYPE_TERRESTRIAL_PLANET = 'Terrestrial planet';
    const PLANET_TYPE_OCEAN_PLANET = 'Ocean planet';
    const PLANET_TYPE_ICE_PLANET = 'Ice planet';
    const PLANET_TYPE_LAVA_PLANET = 'Lava planet';

    public static $locationTypes = [
        self::PLANET_TYPE_TERRESTRIAL_PLANET,
        self::PLANET_TYPE_GAS_GIANT,
        self::PLANET_TYPE_ICE_PLANET,
        self::PLANET_TYPE_OCEAN_PLANET,
        self::PLANET_TYPE_LAVA_PLANET,
    ];

    public static $planetChances = [
        self::PLANET_TYPE_TERRESTRIAL_PLANET => 35,
        self::PLANET_TYPE_GAS_GIANT => 35,
        self::PLANET_TYPE_ICE_PLANET => 15,
        self::PLANET_TYPE_OCEAN_PLANET => 10,
        self::PLANET_TYPE_LAVA_PLANET => 5,
    ];

    /**
     * The database table used by the model.
     *
     * @var string
     */
    protected $table = 'sa_locations';

//    protected $saveable = ['id', 'user_id', 'name', 'data', 'resources', 'inventory', 'events'];

    public function hex()
    {
        return $this->hasOne(Hex::class, 'id', 'hex_id');
    }


    /**
     * @param $id
     *
     * @return Hex
     */
    public static function loadFull($id)
    {
        $star = self::findOrFail($id);
//        $planets = Star::where('hex_id', '=', $id)->get();
        if ($star->objects) {
            $star->objects = json_decode($star->objects, true);
//            $stars = Generator::createStarsInHex($id);
        } else {
            Generator::createStarSystem($star);
        }
        return $star;
    }



    public function save(array $options = [])
    {
        if ($this->resources && is_array($this->resources)) {
            $this->resources = json_encode($this->resources);
        }
        if ($this->conditions && is_array($this->conditions)) {
            $this->conditions = json_encode($this->conditions);
        }
        return parent::save($options); // TODO: Change the autogenerated stub
    }


    public static function randomOrbitType()
    {
        $rand = rand(1,100);
        $current = 0;
        foreach (self::$planetChances as $type => $planetChance) {
            $current += $planetChance;
            if ($rand <= $current) {
                return $type;
            }
        }
        return 0;
    }
}